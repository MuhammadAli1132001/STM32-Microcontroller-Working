
SPI_Communication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002614  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080027a8  080027a8  000127a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027c8  080027c8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080027c8  080027c8  000127c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027d0  080027d0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027d0  080027d0  000127d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027d4  080027d4  000127d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080027d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  08002840  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08002840  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008aee  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017b3  00000000  00000000  00028bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a18  00000000  00000000  0002a380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007bc  00000000  00000000  0002ad98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016975  00000000  00000000  0002b554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ae24  00000000  00000000  00041ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c515  00000000  00000000  0004cced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003000  00000000  00000000  000d9204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000dc204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000068 	.word	0x20000068
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002790 	.word	0x08002790

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000006c 	.word	0x2000006c
 80001d0:	08002790 	.word	0x08002790

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004e0:	f003 0301 	and.w	r3, r3, #1
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d013      	beq.n	8000510 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d00b      	beq.n	8000510 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004f8:	e000      	b.n	80004fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80004fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0f9      	beq.n	80004fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000506:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800050a:	687a      	ldr	r2, [r7, #4]
 800050c:	b2d2      	uxtb	r2, r2
 800050e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000510:	687b      	ldr	r3, [r7, #4]
}
 8000512:	4618      	mov	r0, r3
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
	...

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000526:	f000 fa7b 	bl	8000a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052a:	f000 f813 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052e:	f000 f8cd 	bl	80006cc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000532:	f000 f879 	bl	8000628 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  uint8_t data[4] = {0};
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
  uint8_t txData[4] = {0x03, 0x00, 0x00, 0x00};
 800053a:	2303      	movs	r3, #3
 800053c:	603b      	str	r3, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("salam dunya \n");
 800053e:	4804      	ldr	r0, [pc, #16]	; (8000550 <main+0x30>)
 8000540:	f001 fd90 	bl	8002064 <puts>
	  HAL_Delay(1000);
 8000544:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000548:	f000 fadc 	bl	8000b04 <HAL_Delay>
	  printf("salam dunya \n");
 800054c:	e7f7      	b.n	800053e <main+0x1e>
 800054e:	bf00      	nop
 8000550:	080027a8 	.word	0x080027a8

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	2230      	movs	r2, #48	; 0x30
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f001 fe5e 	bl	8002224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	4b28      	ldr	r3, [pc, #160]	; (8000620 <SystemClock_Config+0xcc>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	4a27      	ldr	r2, [pc, #156]	; (8000620 <SystemClock_Config+0xcc>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	; 0x40
 8000588:	4b25      	ldr	r3, [pc, #148]	; (8000620 <SystemClock_Config+0xcc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b22      	ldr	r3, [pc, #136]	; (8000624 <SystemClock_Config+0xd0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a0:	4a20      	ldr	r2, [pc, #128]	; (8000624 <SystemClock_Config+0xd0>)
 80005a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <SystemClock_Config+0xd0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b4:	2301      	movs	r3, #1
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005c8:	2308      	movs	r3, #8
 80005ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80005cc:	2350      	movs	r3, #80	; 0x50
 80005ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005d4:	2304      	movs	r3, #4
 80005d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 0320 	add.w	r3, r7, #32
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 fd39 	bl	8001054 <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005e8:	f000 f8dc 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f0:	2302      	movs	r3, #2
 80005f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	2102      	movs	r1, #2
 8000608:	4618      	mov	r0, r3
 800060a:	f000 ff9b 	bl	8001544 <HAL_RCC_ClockConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000614:	f000 f8c6 	bl	80007a4 <Error_Handler>
  }
}
 8000618:	bf00      	nop
 800061a:	3750      	adds	r7, #80	; 0x50
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000646:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <MX_TIM1_Init+0x9c>)
 8000648:	4a1f      	ldr	r2, [pc, #124]	; (80006c8 <MX_TIM1_Init+0xa0>)
 800064a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 800064c:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <MX_TIM1_Init+0x9c>)
 800064e:	2210      	movs	r2, #16
 8000650:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <MX_TIM1_Init+0x9c>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000658:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <MX_TIM1_Init+0x9c>)
 800065a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800065e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <MX_TIM1_Init+0x9c>)
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <MX_TIM1_Init+0x9c>)
 8000668:	2200      	movs	r2, #0
 800066a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <MX_TIM1_Init+0x9c>)
 800066e:	2200      	movs	r2, #0
 8000670:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000672:	4814      	ldr	r0, [pc, #80]	; (80006c4 <MX_TIM1_Init+0x9c>)
 8000674:	f001 f950 	bl	8001918 <HAL_TIM_Base_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800067e:	f000 f891 	bl	80007a4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	4619      	mov	r1, r3
 8000690:	480c      	ldr	r0, [pc, #48]	; (80006c4 <MX_TIM1_Init+0x9c>)
 8000692:	f001 f990 	bl	80019b6 <HAL_TIM_SlaveConfigSynchro>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800069c:	f000 f882 	bl	80007a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	4619      	mov	r1, r3
 80006ac:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_TIM1_Init+0x9c>)
 80006ae:	f001 fb55 	bl	8001d5c <HAL_TIMEx_MasterConfigSynchronization>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80006b8:	f000 f874 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	3720      	adds	r7, #32
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000084 	.word	0x20000084
 80006c8:	40010000 	.word	0x40010000

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <MX_GPIO_Init+0x98>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a1e      	ldr	r2, [pc, #120]	; (8000764 <MX_GPIO_Init+0x98>)
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <MX_GPIO_Init+0x98>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0304 	and.w	r3, r3, #4
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_GPIO_Init+0x98>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a17      	ldr	r2, [pc, #92]	; (8000764 <MX_GPIO_Init+0x98>)
 8000708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_GPIO_Init+0x98>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_GPIO_Init+0x98>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a10      	ldr	r2, [pc, #64]	; (8000764 <MX_GPIO_Init+0x98>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_GPIO_Init+0x98>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	2110      	movs	r1, #16
 800073a:	480b      	ldr	r0, [pc, #44]	; (8000768 <MX_GPIO_Init+0x9c>)
 800073c:	f000 fc70 	bl	8001020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000740:	2310      	movs	r3, #16
 8000742:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	2301      	movs	r3, #1
 8000746:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	4619      	mov	r1, r3
 8000756:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_GPIO_Init+0x9c>)
 8000758:	f000 fade 	bl	8000d18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800075c:	bf00      	nop
 800075e:	3720      	adds	r7, #32
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40023800 	.word	0x40023800
 8000768:	40020000 	.word	0x40020000

0800076c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
 (void)file;
 int DataIdx;

 for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	e009      	b.n	8000792 <_write+0x26>
 {
   ITM_SendChar(*ptr++);
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	1c5a      	adds	r2, r3, #1
 8000782:	60ba      	str	r2, [r7, #8]
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff fea2 	bl	80004d0 <ITM_SendChar>
 for (DataIdx = 0; DataIdx < len; DataIdx++)
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	3301      	adds	r3, #1
 8000790:	617b      	str	r3, [r7, #20]
 8000792:	697a      	ldr	r2, [r7, #20]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	429a      	cmp	r2, r3
 8000798:	dbf1      	blt.n	800077e <_write+0x12>
 }
 return len;
 800079a:	687b      	ldr	r3, [r7, #4]
}
 800079c:	4618      	mov	r0, r3
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	e7fe      	b.n	80007ac <Error_Handler+0x8>
	...

080007b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <HAL_MspInit+0x4c>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <HAL_MspInit+0x4c>)
 80007c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c4:	6453      	str	r3, [r2, #68]	; 0x44
 80007c6:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <HAL_MspInit+0x4c>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <HAL_MspInit+0x4c>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	4a08      	ldr	r2, [pc, #32]	; (80007fc <HAL_MspInit+0x4c>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e0:	6413      	str	r3, [r2, #64]	; 0x40
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_MspInit+0x4c>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800

08000800 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a0b      	ldr	r2, [pc, #44]	; (800083c <HAL_TIM_Base_MspInit+0x3c>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d10d      	bne.n	800082e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <HAL_TIM_Base_MspInit+0x40>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	4a09      	ldr	r2, [pc, #36]	; (8000840 <HAL_TIM_Base_MspInit+0x40>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6453      	str	r3, [r2, #68]	; 0x44
 8000822:	4b07      	ldr	r3, [pc, #28]	; (8000840 <HAL_TIM_Base_MspInit+0x40>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800082e:	bf00      	nop
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40010000 	.word	0x40010000
 8000840:	40023800 	.word	0x40023800

08000844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <NMI_Handler+0x4>

0800084a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <HardFault_Handler+0x4>

08000850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <MemManage_Handler+0x4>

08000856 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <UsageFault_Handler+0x4>

08000862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000890:	f000 f918 	bl	8000ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}

08000898 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	e00a      	b.n	80008c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008aa:	f3af 8000 	nop.w
 80008ae:	4601      	mov	r1, r0
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	1c5a      	adds	r2, r3, #1
 80008b4:	60ba      	str	r2, [r7, #8]
 80008b6:	b2ca      	uxtb	r2, r1
 80008b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	3301      	adds	r3, #1
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	697a      	ldr	r2, [r7, #20]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	dbf0      	blt.n	80008aa <_read+0x12>
  }

  return len;
 80008c8:	687b      	ldr	r3, [r7, #4]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80008d2:	b480      	push	{r7}
 80008d4:	b083      	sub	sp, #12
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008de:	4618      	mov	r0, r3
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008ea:	b480      	push	{r7}
 80008ec:	b083      	sub	sp, #12
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
 80008f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008fa:	605a      	str	r2, [r3, #4]
  return 0;
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <_isatty>:

int _isatty(int file)
{
 800090a:	b480      	push	{r7}
 800090c:	b083      	sub	sp, #12
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000912:	2301      	movs	r3, #1
}
 8000914:	4618      	mov	r0, r3
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
	...

0800093c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000944:	4a14      	ldr	r2, [pc, #80]	; (8000998 <_sbrk+0x5c>)
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <_sbrk+0x60>)
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000950:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <_sbrk+0x64>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d102      	bne.n	800095e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <_sbrk+0x64>)
 800095a:	4a12      	ldr	r2, [pc, #72]	; (80009a4 <_sbrk+0x68>)
 800095c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <_sbrk+0x64>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4413      	add	r3, r2
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	429a      	cmp	r2, r3
 800096a:	d207      	bcs.n	800097c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800096c:	f001 fca8 	bl	80022c0 <__errno>
 8000970:	4603      	mov	r3, r0
 8000972:	220c      	movs	r2, #12
 8000974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000976:	f04f 33ff 	mov.w	r3, #4294967295
 800097a:	e009      	b.n	8000990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <_sbrk+0x64>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000982:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <_sbrk+0x64>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	4a05      	ldr	r2, [pc, #20]	; (80009a0 <_sbrk+0x64>)
 800098c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800098e:	68fb      	ldr	r3, [r7, #12]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3718      	adds	r7, #24
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20018000 	.word	0x20018000
 800099c:	00000400 	.word	0x00000400
 80009a0:	200000cc 	.word	0x200000cc
 80009a4:	20000220 	.word	0x20000220

080009a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <SystemInit+0x20>)
 80009ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b2:	4a05      	ldr	r2, [pc, #20]	; (80009c8 <SystemInit+0x20>)
 80009b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009d0:	480d      	ldr	r0, [pc, #52]	; (8000a08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009d2:	490e      	ldr	r1, [pc, #56]	; (8000a0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009d4:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d8:	e002      	b.n	80009e0 <LoopCopyDataInit>

080009da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009de:	3304      	adds	r3, #4

080009e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e4:	d3f9      	bcc.n	80009da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e6:	4a0b      	ldr	r2, [pc, #44]	; (8000a14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009e8:	4c0b      	ldr	r4, [pc, #44]	; (8000a18 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ec:	e001      	b.n	80009f2 <LoopFillZerobss>

080009ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f0:	3204      	adds	r2, #4

080009f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f4:	d3fb      	bcc.n	80009ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009f6:	f7ff ffd7 	bl	80009a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009fa:	f001 fc67 	bl	80022cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009fe:	f7ff fd8f 	bl	8000520 <main>
  bx  lr    
 8000a02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a04:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a0c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a10:	080027d8 	.word	0x080027d8
  ldr r2, =_sbss
 8000a14:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a18:	20000220 	.word	0x20000220

08000a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a1c:	e7fe      	b.n	8000a1c <ADC_IRQHandler>
	...

08000a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <HAL_Init+0x40>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0d      	ldr	r2, [pc, #52]	; (8000a60 <HAL_Init+0x40>)
 8000a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <HAL_Init+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <HAL_Init+0x40>)
 8000a36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <HAL_Init+0x40>)
 8000a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a48:	2003      	movs	r0, #3
 8000a4a:	f000 f931 	bl	8000cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4e:	200f      	movs	r0, #15
 8000a50:	f000 f808 	bl	8000a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a54:	f7ff feac 	bl	80007b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023c00 	.word	0x40023c00

08000a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_InitTick+0x54>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_InitTick+0x58>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4619      	mov	r1, r3
 8000a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f93b 	bl	8000cfe <HAL_SYSTICK_Config>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e00e      	b.n	8000ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b0f      	cmp	r3, #15
 8000a96:	d80a      	bhi.n	8000aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa0:	f000 f911 	bl	8000cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa4:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <HAL_InitTick+0x5c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e000      	b.n	8000ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	20000004 	.word	0x20000004

08000ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_IncTick+0x20>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	200000d0 	.word	0x200000d0

08000aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return uwTick;
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <HAL_GetTick+0x14>)
 8000af2:	681b      	ldr	r3, [r3, #0]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	200000d0 	.word	0x200000d0

08000b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b0c:	f7ff ffee 	bl	8000aec <HAL_GetTick>
 8000b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b1c:	d005      	beq.n	8000b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <HAL_Delay+0x44>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4413      	add	r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b2a:	bf00      	nop
 8000b2c:	f7ff ffde 	bl	8000aec <HAL_GetTick>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d8f7      	bhi.n	8000b2c <HAL_Delay+0x28>
  {
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000008 	.word	0x20000008

08000b4c <__NVIC_SetPriorityGrouping>:
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	60d3      	str	r3, [r2, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_GetPriorityGrouping>:
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <__NVIC_GetPriorityGrouping+0x18>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_SetPriority>:
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	6039      	str	r1, [r7, #0]
 8000bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	db0a      	blt.n	8000bda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	490c      	ldr	r1, [pc, #48]	; (8000bfc <__NVIC_SetPriority+0x4c>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	0112      	lsls	r2, r2, #4
 8000bd0:	b2d2      	uxtb	r2, r2
 8000bd2:	440b      	add	r3, r1
 8000bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000bd8:	e00a      	b.n	8000bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4908      	ldr	r1, [pc, #32]	; (8000c00 <__NVIC_SetPriority+0x50>)
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	f003 030f 	and.w	r3, r3, #15
 8000be6:	3b04      	subs	r3, #4
 8000be8:	0112      	lsls	r2, r2, #4
 8000bea:	b2d2      	uxtb	r2, r2
 8000bec:	440b      	add	r3, r1
 8000bee:	761a      	strb	r2, [r3, #24]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000e100 	.word	0xe000e100
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <NVIC_EncodePriority>:
{
 8000c04:	b480      	push	{r7}
 8000c06:	b089      	sub	sp, #36	; 0x24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	f1c3 0307 	rsb	r3, r3, #7
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	bf28      	it	cs
 8000c22:	2304      	movcs	r3, #4
 8000c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	2b06      	cmp	r3, #6
 8000c2c:	d902      	bls.n	8000c34 <NVIC_EncodePriority+0x30>
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3b03      	subs	r3, #3
 8000c32:	e000      	b.n	8000c36 <NVIC_EncodePriority+0x32>
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	f04f 32ff 	mov.w	r2, #4294967295
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43da      	mvns	r2, r3
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	401a      	ands	r2, r3
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	fa01 f303 	lsl.w	r3, r1, r3
 8000c56:	43d9      	mvns	r1, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	4313      	orrs	r3, r2
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3724      	adds	r7, #36	; 0x24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <SysTick_Config>:
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c7c:	d301      	bcc.n	8000c82 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00f      	b.n	8000ca2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <SysTick_Config+0x40>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8a:	210f      	movs	r1, #15
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f7ff ff8e 	bl	8000bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <SysTick_Config+0x40>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9a:	4b04      	ldr	r3, [pc, #16]	; (8000cac <SysTick_Config+0x40>)
 8000c9c:	2207      	movs	r2, #7
 8000c9e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	e000e010 	.word	0xe000e010

08000cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff ff47 	bl	8000b4c <__NVIC_SetPriorityGrouping>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b086      	sub	sp, #24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
 8000cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd8:	f7ff ff5c 	bl	8000b94 <__NVIC_GetPriorityGrouping>
 8000cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	68b9      	ldr	r1, [r7, #8]
 8000ce2:	6978      	ldr	r0, [r7, #20]
 8000ce4:	f7ff ff8e 	bl	8000c04 <NVIC_EncodePriority>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff5d 	bl	8000bb0 <__NVIC_SetPriority>
}
 8000cf6:	bf00      	nop
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff ffb0 	bl	8000c6c <SysTick_Config>
 8000d0c:	4603      	mov	r3, r0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
 8000d32:	e159      	b.n	8000fe8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d34:	2201      	movs	r2, #1
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	697a      	ldr	r2, [r7, #20]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	f040 8148 	bne.w	8000fe2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 0303 	and.w	r3, r3, #3
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d005      	beq.n	8000d6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d130      	bne.n	8000dcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	2203      	movs	r2, #3
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	68da      	ldr	r2, [r3, #12]
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da0:	2201      	movs	r2, #1
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	091b      	lsrs	r3, r3, #4
 8000db6:	f003 0201 	and.w	r2, r3, #1
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 0303 	and.w	r3, r3, #3
 8000dd4:	2b03      	cmp	r3, #3
 8000dd6:	d017      	beq.n	8000e08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	2203      	movs	r2, #3
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	689a      	ldr	r2, [r3, #8]
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0303 	and.w	r3, r3, #3
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d123      	bne.n	8000e5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	08da      	lsrs	r2, r3, #3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3208      	adds	r2, #8
 8000e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	f003 0307 	and.w	r3, r3, #7
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	220f      	movs	r2, #15
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	691a      	ldr	r2, [r3, #16]
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	08da      	lsrs	r2, r3, #3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3208      	adds	r2, #8
 8000e56:	69b9      	ldr	r1, [r7, #24]
 8000e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	2203      	movs	r2, #3
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0203 	and.w	r2, r3, #3
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	f000 80a2 	beq.w	8000fe2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	4b57      	ldr	r3, [pc, #348]	; (8001000 <HAL_GPIO_Init+0x2e8>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	4a56      	ldr	r2, [pc, #344]	; (8001000 <HAL_GPIO_Init+0x2e8>)
 8000ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eac:	6453      	str	r3, [r2, #68]	; 0x44
 8000eae:	4b54      	ldr	r3, [pc, #336]	; (8001000 <HAL_GPIO_Init+0x2e8>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eba:	4a52      	ldr	r2, [pc, #328]	; (8001004 <HAL_GPIO_Init+0x2ec>)
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	089b      	lsrs	r3, r3, #2
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	220f      	movs	r2, #15
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4013      	ands	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a49      	ldr	r2, [pc, #292]	; (8001008 <HAL_GPIO_Init+0x2f0>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d019      	beq.n	8000f1a <HAL_GPIO_Init+0x202>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a48      	ldr	r2, [pc, #288]	; (800100c <HAL_GPIO_Init+0x2f4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d013      	beq.n	8000f16 <HAL_GPIO_Init+0x1fe>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a47      	ldr	r2, [pc, #284]	; (8001010 <HAL_GPIO_Init+0x2f8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d00d      	beq.n	8000f12 <HAL_GPIO_Init+0x1fa>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a46      	ldr	r2, [pc, #280]	; (8001014 <HAL_GPIO_Init+0x2fc>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d007      	beq.n	8000f0e <HAL_GPIO_Init+0x1f6>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a45      	ldr	r2, [pc, #276]	; (8001018 <HAL_GPIO_Init+0x300>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d101      	bne.n	8000f0a <HAL_GPIO_Init+0x1f2>
 8000f06:	2304      	movs	r3, #4
 8000f08:	e008      	b.n	8000f1c <HAL_GPIO_Init+0x204>
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	e006      	b.n	8000f1c <HAL_GPIO_Init+0x204>
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e004      	b.n	8000f1c <HAL_GPIO_Init+0x204>
 8000f12:	2302      	movs	r3, #2
 8000f14:	e002      	b.n	8000f1c <HAL_GPIO_Init+0x204>
 8000f16:	2301      	movs	r3, #1
 8000f18:	e000      	b.n	8000f1c <HAL_GPIO_Init+0x204>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	69fa      	ldr	r2, [r7, #28]
 8000f1e:	f002 0203 	and.w	r2, r2, #3
 8000f22:	0092      	lsls	r2, r2, #2
 8000f24:	4093      	lsls	r3, r2
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f2c:	4935      	ldr	r1, [pc, #212]	; (8001004 <HAL_GPIO_Init+0x2ec>)
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	089b      	lsrs	r3, r3, #2
 8000f32:	3302      	adds	r3, #2
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f3a:	4b38      	ldr	r3, [pc, #224]	; (800101c <HAL_GPIO_Init+0x304>)
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f5e:	4a2f      	ldr	r2, [pc, #188]	; (800101c <HAL_GPIO_Init+0x304>)
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f64:	4b2d      	ldr	r3, [pc, #180]	; (800101c <HAL_GPIO_Init+0x304>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f88:	4a24      	ldr	r2, [pc, #144]	; (800101c <HAL_GPIO_Init+0x304>)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f8e:	4b23      	ldr	r3, [pc, #140]	; (800101c <HAL_GPIO_Init+0x304>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fb2:	4a1a      	ldr	r2, [pc, #104]	; (800101c <HAL_GPIO_Init+0x304>)
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb8:	4b18      	ldr	r3, [pc, #96]	; (800101c <HAL_GPIO_Init+0x304>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fdc:	4a0f      	ldr	r2, [pc, #60]	; (800101c <HAL_GPIO_Init+0x304>)
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	61fb      	str	r3, [r7, #28]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	2b0f      	cmp	r3, #15
 8000fec:	f67f aea2 	bls.w	8000d34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3724      	adds	r7, #36	; 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800
 8001004:	40013800 	.word	0x40013800
 8001008:	40020000 	.word	0x40020000
 800100c:	40020400 	.word	0x40020400
 8001010:	40020800 	.word	0x40020800
 8001014:	40020c00 	.word	0x40020c00
 8001018:	40021000 	.word	0x40021000
 800101c:	40013c00 	.word	0x40013c00

08001020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	807b      	strh	r3, [r7, #2]
 800102c:	4613      	mov	r3, r2
 800102e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001030:	787b      	ldrb	r3, [r7, #1]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001036:	887a      	ldrh	r2, [r7, #2]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800103c:	e003      	b.n	8001046 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800103e:	887b      	ldrh	r3, [r7, #2]
 8001040:	041a      	lsls	r2, r3, #16
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	619a      	str	r2, [r3, #24]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e267      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	2b00      	cmp	r3, #0
 8001070:	d075      	beq.n	800115e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001072:	4b88      	ldr	r3, [pc, #544]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 030c 	and.w	r3, r3, #12
 800107a:	2b04      	cmp	r3, #4
 800107c:	d00c      	beq.n	8001098 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800107e:	4b85      	ldr	r3, [pc, #532]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001086:	2b08      	cmp	r3, #8
 8001088:	d112      	bne.n	80010b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800108a:	4b82      	ldr	r3, [pc, #520]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001092:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001096:	d10b      	bne.n	80010b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001098:	4b7e      	ldr	r3, [pc, #504]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d05b      	beq.n	800115c <HAL_RCC_OscConfig+0x108>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d157      	bne.n	800115c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e242      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010b8:	d106      	bne.n	80010c8 <HAL_RCC_OscConfig+0x74>
 80010ba:	4b76      	ldr	r3, [pc, #472]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a75      	ldr	r2, [pc, #468]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 80010c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	e01d      	b.n	8001104 <HAL_RCC_OscConfig+0xb0>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010d0:	d10c      	bne.n	80010ec <HAL_RCC_OscConfig+0x98>
 80010d2:	4b70      	ldr	r3, [pc, #448]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a6f      	ldr	r2, [pc, #444]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 80010d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	4b6d      	ldr	r3, [pc, #436]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a6c      	ldr	r2, [pc, #432]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 80010e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	e00b      	b.n	8001104 <HAL_RCC_OscConfig+0xb0>
 80010ec:	4b69      	ldr	r3, [pc, #420]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a68      	ldr	r2, [pc, #416]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 80010f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	4b66      	ldr	r3, [pc, #408]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a65      	ldr	r2, [pc, #404]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 80010fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001102:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d013      	beq.n	8001134 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110c:	f7ff fcee 	bl	8000aec <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001114:	f7ff fcea 	bl	8000aec <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b64      	cmp	r3, #100	; 0x64
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e207      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001126:	4b5b      	ldr	r3, [pc, #364]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d0f0      	beq.n	8001114 <HAL_RCC_OscConfig+0xc0>
 8001132:	e014      	b.n	800115e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001134:	f7ff fcda 	bl	8000aec <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800113c:	f7ff fcd6 	bl	8000aec <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b64      	cmp	r3, #100	; 0x64
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e1f3      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800114e:	4b51      	ldr	r3, [pc, #324]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f0      	bne.n	800113c <HAL_RCC_OscConfig+0xe8>
 800115a:	e000      	b.n	800115e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d063      	beq.n	8001232 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800116a:	4b4a      	ldr	r3, [pc, #296]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f003 030c 	and.w	r3, r3, #12
 8001172:	2b00      	cmp	r3, #0
 8001174:	d00b      	beq.n	800118e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001176:	4b47      	ldr	r3, [pc, #284]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800117e:	2b08      	cmp	r3, #8
 8001180:	d11c      	bne.n	80011bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001182:	4b44      	ldr	r3, [pc, #272]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d116      	bne.n	80011bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800118e:	4b41      	ldr	r3, [pc, #260]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d005      	beq.n	80011a6 <HAL_RCC_OscConfig+0x152>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d001      	beq.n	80011a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e1c7      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a6:	4b3b      	ldr	r3, [pc, #236]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	4937      	ldr	r1, [pc, #220]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ba:	e03a      	b.n	8001232 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d020      	beq.n	8001206 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011c4:	4b34      	ldr	r3, [pc, #208]	; (8001298 <HAL_RCC_OscConfig+0x244>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ca:	f7ff fc8f 	bl	8000aec <HAL_GetTick>
 80011ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d2:	f7ff fc8b 	bl	8000aec <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e1a8      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e4:	4b2b      	ldr	r3, [pc, #172]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f0      	beq.n	80011d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f0:	4b28      	ldr	r3, [pc, #160]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	4925      	ldr	r1, [pc, #148]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 8001200:	4313      	orrs	r3, r2
 8001202:	600b      	str	r3, [r1, #0]
 8001204:	e015      	b.n	8001232 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001206:	4b24      	ldr	r3, [pc, #144]	; (8001298 <HAL_RCC_OscConfig+0x244>)
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120c:	f7ff fc6e 	bl	8000aec <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001214:	f7ff fc6a 	bl	8000aec <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e187      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001226:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f0      	bne.n	8001214 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0308 	and.w	r3, r3, #8
 800123a:	2b00      	cmp	r3, #0
 800123c:	d036      	beq.n	80012ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d016      	beq.n	8001274 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <HAL_RCC_OscConfig+0x248>)
 8001248:	2201      	movs	r2, #1
 800124a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124c:	f7ff fc4e 	bl	8000aec <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001254:	f7ff fc4a 	bl	8000aec <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e167      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 8001268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f0      	beq.n	8001254 <HAL_RCC_OscConfig+0x200>
 8001272:	e01b      	b.n	80012ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <HAL_RCC_OscConfig+0x248>)
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127a:	f7ff fc37 	bl	8000aec <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001280:	e00e      	b.n	80012a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001282:	f7ff fc33 	bl	8000aec <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d907      	bls.n	80012a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e150      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
 8001294:	40023800 	.word	0x40023800
 8001298:	42470000 	.word	0x42470000
 800129c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a0:	4b88      	ldr	r3, [pc, #544]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 80012a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1ea      	bne.n	8001282 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f000 8097 	beq.w	80013e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012be:	4b81      	ldr	r3, [pc, #516]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10f      	bne.n	80012ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	4b7d      	ldr	r3, [pc, #500]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	4a7c      	ldr	r2, [pc, #496]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 80012d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d8:	6413      	str	r3, [r2, #64]	; 0x40
 80012da:	4b7a      	ldr	r3, [pc, #488]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012e6:	2301      	movs	r3, #1
 80012e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ea:	4b77      	ldr	r3, [pc, #476]	; (80014c8 <HAL_RCC_OscConfig+0x474>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d118      	bne.n	8001328 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012f6:	4b74      	ldr	r3, [pc, #464]	; (80014c8 <HAL_RCC_OscConfig+0x474>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a73      	ldr	r2, [pc, #460]	; (80014c8 <HAL_RCC_OscConfig+0x474>)
 80012fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001302:	f7ff fbf3 	bl	8000aec <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800130a:	f7ff fbef 	bl	8000aec <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e10c      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131c:	4b6a      	ldr	r3, [pc, #424]	; (80014c8 <HAL_RCC_OscConfig+0x474>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0f0      	beq.n	800130a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d106      	bne.n	800133e <HAL_RCC_OscConfig+0x2ea>
 8001330:	4b64      	ldr	r3, [pc, #400]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001334:	4a63      	ldr	r2, [pc, #396]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	6713      	str	r3, [r2, #112]	; 0x70
 800133c:	e01c      	b.n	8001378 <HAL_RCC_OscConfig+0x324>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b05      	cmp	r3, #5
 8001344:	d10c      	bne.n	8001360 <HAL_RCC_OscConfig+0x30c>
 8001346:	4b5f      	ldr	r3, [pc, #380]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800134a:	4a5e      	ldr	r2, [pc, #376]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 800134c:	f043 0304 	orr.w	r3, r3, #4
 8001350:	6713      	str	r3, [r2, #112]	; 0x70
 8001352:	4b5c      	ldr	r3, [pc, #368]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001356:	4a5b      	ldr	r2, [pc, #364]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6713      	str	r3, [r2, #112]	; 0x70
 800135e:	e00b      	b.n	8001378 <HAL_RCC_OscConfig+0x324>
 8001360:	4b58      	ldr	r3, [pc, #352]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001364:	4a57      	ldr	r2, [pc, #348]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001366:	f023 0301 	bic.w	r3, r3, #1
 800136a:	6713      	str	r3, [r2, #112]	; 0x70
 800136c:	4b55      	ldr	r3, [pc, #340]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 800136e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001370:	4a54      	ldr	r2, [pc, #336]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001372:	f023 0304 	bic.w	r3, r3, #4
 8001376:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d015      	beq.n	80013ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001380:	f7ff fbb4 	bl	8000aec <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001386:	e00a      	b.n	800139e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001388:	f7ff fbb0 	bl	8000aec <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	f241 3288 	movw	r2, #5000	; 0x1388
 8001396:	4293      	cmp	r3, r2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e0cb      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800139e:	4b49      	ldr	r3, [pc, #292]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 80013a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0ee      	beq.n	8001388 <HAL_RCC_OscConfig+0x334>
 80013aa:	e014      	b.n	80013d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ac:	f7ff fb9e 	bl	8000aec <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b2:	e00a      	b.n	80013ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013b4:	f7ff fb9a 	bl	8000aec <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e0b5      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ca:	4b3e      	ldr	r3, [pc, #248]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 80013cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1ee      	bne.n	80013b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013d6:	7dfb      	ldrb	r3, [r7, #23]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d105      	bne.n	80013e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013dc:	4b39      	ldr	r3, [pc, #228]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	4a38      	ldr	r2, [pc, #224]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 80013e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 80a1 	beq.w	8001534 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013f2:	4b34      	ldr	r3, [pc, #208]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 030c 	and.w	r3, r3, #12
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d05c      	beq.n	80014b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	2b02      	cmp	r3, #2
 8001404:	d141      	bne.n	800148a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001406:	4b31      	ldr	r3, [pc, #196]	; (80014cc <HAL_RCC_OscConfig+0x478>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140c:	f7ff fb6e 	bl	8000aec <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001414:	f7ff fb6a 	bl	8000aec <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e087      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001426:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f0      	bne.n	8001414 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69da      	ldr	r2, [r3, #28]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	431a      	orrs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	019b      	lsls	r3, r3, #6
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001448:	085b      	lsrs	r3, r3, #1
 800144a:	3b01      	subs	r3, #1
 800144c:	041b      	lsls	r3, r3, #16
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001454:	061b      	lsls	r3, r3, #24
 8001456:	491b      	ldr	r1, [pc, #108]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001458:	4313      	orrs	r3, r2
 800145a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800145c:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <HAL_RCC_OscConfig+0x478>)
 800145e:	2201      	movs	r2, #1
 8001460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001462:	f7ff fb43 	bl	8000aec <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800146a:	f7ff fb3f 	bl	8000aec <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e05c      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0f0      	beq.n	800146a <HAL_RCC_OscConfig+0x416>
 8001488:	e054      	b.n	8001534 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <HAL_RCC_OscConfig+0x478>)
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001490:	f7ff fb2c 	bl	8000aec <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001498:	f7ff fb28 	bl	8000aec <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e045      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0x444>
 80014b6:	e03d      	b.n	8001534 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d107      	bne.n	80014d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e038      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40007000 	.word	0x40007000
 80014cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <HAL_RCC_OscConfig+0x4ec>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d028      	beq.n	8001530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d121      	bne.n	8001530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d11a      	bne.n	8001530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001500:	4013      	ands	r3, r2
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001506:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001508:	4293      	cmp	r3, r2
 800150a:	d111      	bne.n	8001530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001516:	085b      	lsrs	r3, r3, #1
 8001518:	3b01      	subs	r3, #1
 800151a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800151c:	429a      	cmp	r2, r3
 800151e:	d107      	bne.n	8001530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800152c:	429a      	cmp	r2, r3
 800152e:	d001      	beq.n	8001534 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800

08001544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0cc      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001558:	4b68      	ldr	r3, [pc, #416]	; (80016fc <HAL_RCC_ClockConfig+0x1b8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0307 	and.w	r3, r3, #7
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	429a      	cmp	r2, r3
 8001564:	d90c      	bls.n	8001580 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001566:	4b65      	ldr	r3, [pc, #404]	; (80016fc <HAL_RCC_ClockConfig+0x1b8>)
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800156e:	4b63      	ldr	r3, [pc, #396]	; (80016fc <HAL_RCC_ClockConfig+0x1b8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	d001      	beq.n	8001580 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e0b8      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d020      	beq.n	80015ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001598:	4b59      	ldr	r3, [pc, #356]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	4a58      	ldr	r2, [pc, #352]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 800159e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d005      	beq.n	80015bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015b0:	4b53      	ldr	r3, [pc, #332]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	4a52      	ldr	r2, [pc, #328]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015bc:	4b50      	ldr	r3, [pc, #320]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	494d      	ldr	r1, [pc, #308]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d044      	beq.n	8001664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d107      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e2:	4b47      	ldr	r3, [pc, #284]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d119      	bne.n	8001622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e07f      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d003      	beq.n	8001602 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015fe:	2b03      	cmp	r3, #3
 8001600:	d107      	bne.n	8001612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001602:	4b3f      	ldr	r3, [pc, #252]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d109      	bne.n	8001622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e06f      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001612:	4b3b      	ldr	r3, [pc, #236]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e067      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001622:	4b37      	ldr	r3, [pc, #220]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f023 0203 	bic.w	r2, r3, #3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	4934      	ldr	r1, [pc, #208]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 8001630:	4313      	orrs	r3, r2
 8001632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001634:	f7ff fa5a 	bl	8000aec <HAL_GetTick>
 8001638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163a:	e00a      	b.n	8001652 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800163c:	f7ff fa56 	bl	8000aec <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	f241 3288 	movw	r2, #5000	; 0x1388
 800164a:	4293      	cmp	r3, r2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e04f      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001652:	4b2b      	ldr	r3, [pc, #172]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 020c 	and.w	r2, r3, #12
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	429a      	cmp	r2, r3
 8001662:	d1eb      	bne.n	800163c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001664:	4b25      	ldr	r3, [pc, #148]	; (80016fc <HAL_RCC_ClockConfig+0x1b8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d20c      	bcs.n	800168c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001672:	4b22      	ldr	r3, [pc, #136]	; (80016fc <HAL_RCC_ClockConfig+0x1b8>)
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800167a:	4b20      	ldr	r3, [pc, #128]	; (80016fc <HAL_RCC_ClockConfig+0x1b8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d001      	beq.n	800168c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e032      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	d008      	beq.n	80016aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001698:	4b19      	ldr	r3, [pc, #100]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	4916      	ldr	r1, [pc, #88]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d009      	beq.n	80016ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	490e      	ldr	r1, [pc, #56]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016ca:	f000 f821 	bl	8001710 <HAL_RCC_GetSysClockFreq>
 80016ce:	4602      	mov	r2, r0
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	091b      	lsrs	r3, r3, #4
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	490a      	ldr	r1, [pc, #40]	; (8001704 <HAL_RCC_ClockConfig+0x1c0>)
 80016dc:	5ccb      	ldrb	r3, [r1, r3]
 80016de:	fa22 f303 	lsr.w	r3, r2, r3
 80016e2:	4a09      	ldr	r2, [pc, #36]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 80016e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <HAL_RCC_ClockConfig+0x1c8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff f9ba 	bl	8000a64 <HAL_InitTick>

  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40023c00 	.word	0x40023c00
 8001700:	40023800 	.word	0x40023800
 8001704:	080027b8 	.word	0x080027b8
 8001708:	20000000 	.word	0x20000000
 800170c:	20000004 	.word	0x20000004

08001710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001714:	b094      	sub	sp, #80	; 0x50
 8001716:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	647b      	str	r3, [r7, #68]	; 0x44
 800171c:	2300      	movs	r3, #0
 800171e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001720:	2300      	movs	r3, #0
 8001722:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001728:	4b79      	ldr	r3, [pc, #484]	; (8001910 <HAL_RCC_GetSysClockFreq+0x200>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 030c 	and.w	r3, r3, #12
 8001730:	2b08      	cmp	r3, #8
 8001732:	d00d      	beq.n	8001750 <HAL_RCC_GetSysClockFreq+0x40>
 8001734:	2b08      	cmp	r3, #8
 8001736:	f200 80e1 	bhi.w	80018fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800173a:	2b00      	cmp	r3, #0
 800173c:	d002      	beq.n	8001744 <HAL_RCC_GetSysClockFreq+0x34>
 800173e:	2b04      	cmp	r3, #4
 8001740:	d003      	beq.n	800174a <HAL_RCC_GetSysClockFreq+0x3a>
 8001742:	e0db      	b.n	80018fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001744:	4b73      	ldr	r3, [pc, #460]	; (8001914 <HAL_RCC_GetSysClockFreq+0x204>)
 8001746:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001748:	e0db      	b.n	8001902 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800174a:	4b72      	ldr	r3, [pc, #456]	; (8001914 <HAL_RCC_GetSysClockFreq+0x204>)
 800174c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800174e:	e0d8      	b.n	8001902 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001750:	4b6f      	ldr	r3, [pc, #444]	; (8001910 <HAL_RCC_GetSysClockFreq+0x200>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001758:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800175a:	4b6d      	ldr	r3, [pc, #436]	; (8001910 <HAL_RCC_GetSysClockFreq+0x200>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d063      	beq.n	800182e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001766:	4b6a      	ldr	r3, [pc, #424]	; (8001910 <HAL_RCC_GetSysClockFreq+0x200>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	099b      	lsrs	r3, r3, #6
 800176c:	2200      	movs	r2, #0
 800176e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001770:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001778:	633b      	str	r3, [r7, #48]	; 0x30
 800177a:	2300      	movs	r3, #0
 800177c:	637b      	str	r3, [r7, #52]	; 0x34
 800177e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001782:	4622      	mov	r2, r4
 8001784:	462b      	mov	r3, r5
 8001786:	f04f 0000 	mov.w	r0, #0
 800178a:	f04f 0100 	mov.w	r1, #0
 800178e:	0159      	lsls	r1, r3, #5
 8001790:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001794:	0150      	lsls	r0, r2, #5
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4621      	mov	r1, r4
 800179c:	1a51      	subs	r1, r2, r1
 800179e:	6139      	str	r1, [r7, #16]
 80017a0:	4629      	mov	r1, r5
 80017a2:	eb63 0301 	sbc.w	r3, r3, r1
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017b4:	4659      	mov	r1, fp
 80017b6:	018b      	lsls	r3, r1, #6
 80017b8:	4651      	mov	r1, sl
 80017ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017be:	4651      	mov	r1, sl
 80017c0:	018a      	lsls	r2, r1, #6
 80017c2:	4651      	mov	r1, sl
 80017c4:	ebb2 0801 	subs.w	r8, r2, r1
 80017c8:	4659      	mov	r1, fp
 80017ca:	eb63 0901 	sbc.w	r9, r3, r1
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017e2:	4690      	mov	r8, r2
 80017e4:	4699      	mov	r9, r3
 80017e6:	4623      	mov	r3, r4
 80017e8:	eb18 0303 	adds.w	r3, r8, r3
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	462b      	mov	r3, r5
 80017f0:	eb49 0303 	adc.w	r3, r9, r3
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001802:	4629      	mov	r1, r5
 8001804:	028b      	lsls	r3, r1, #10
 8001806:	4621      	mov	r1, r4
 8001808:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800180c:	4621      	mov	r1, r4
 800180e:	028a      	lsls	r2, r1, #10
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001816:	2200      	movs	r2, #0
 8001818:	62bb      	str	r3, [r7, #40]	; 0x28
 800181a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800181c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001820:	f7fe fcd8 	bl	80001d4 <__aeabi_uldivmod>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4613      	mov	r3, r2
 800182a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800182c:	e058      	b.n	80018e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800182e:	4b38      	ldr	r3, [pc, #224]	; (8001910 <HAL_RCC_GetSysClockFreq+0x200>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	099b      	lsrs	r3, r3, #6
 8001834:	2200      	movs	r2, #0
 8001836:	4618      	mov	r0, r3
 8001838:	4611      	mov	r1, r2
 800183a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800183e:	623b      	str	r3, [r7, #32]
 8001840:	2300      	movs	r3, #0
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
 8001844:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001848:	4642      	mov	r2, r8
 800184a:	464b      	mov	r3, r9
 800184c:	f04f 0000 	mov.w	r0, #0
 8001850:	f04f 0100 	mov.w	r1, #0
 8001854:	0159      	lsls	r1, r3, #5
 8001856:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800185a:	0150      	lsls	r0, r2, #5
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4641      	mov	r1, r8
 8001862:	ebb2 0a01 	subs.w	sl, r2, r1
 8001866:	4649      	mov	r1, r9
 8001868:	eb63 0b01 	sbc.w	fp, r3, r1
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001878:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800187c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001880:	ebb2 040a 	subs.w	r4, r2, sl
 8001884:	eb63 050b 	sbc.w	r5, r3, fp
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	00eb      	lsls	r3, r5, #3
 8001892:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001896:	00e2      	lsls	r2, r4, #3
 8001898:	4614      	mov	r4, r2
 800189a:	461d      	mov	r5, r3
 800189c:	4643      	mov	r3, r8
 800189e:	18e3      	adds	r3, r4, r3
 80018a0:	603b      	str	r3, [r7, #0]
 80018a2:	464b      	mov	r3, r9
 80018a4:	eb45 0303 	adc.w	r3, r5, r3
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018b6:	4629      	mov	r1, r5
 80018b8:	028b      	lsls	r3, r1, #10
 80018ba:	4621      	mov	r1, r4
 80018bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018c0:	4621      	mov	r1, r4
 80018c2:	028a      	lsls	r2, r1, #10
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018ca:	2200      	movs	r2, #0
 80018cc:	61bb      	str	r3, [r7, #24]
 80018ce:	61fa      	str	r2, [r7, #28]
 80018d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018d4:	f7fe fc7e 	bl	80001d4 <__aeabi_uldivmod>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4613      	mov	r3, r2
 80018de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_RCC_GetSysClockFreq+0x200>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	0c1b      	lsrs	r3, r3, #16
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	3301      	adds	r3, #1
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80018f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80018f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018fa:	e002      	b.n	8001902 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <HAL_RCC_GetSysClockFreq+0x204>)
 80018fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001900:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001904:	4618      	mov	r0, r3
 8001906:	3750      	adds	r7, #80	; 0x50
 8001908:	46bd      	mov	sp, r7
 800190a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800
 8001914:	00f42400 	.word	0x00f42400

08001918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e041      	b.n	80019ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d106      	bne.n	8001944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7fe ff5e 	bl	8000800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2202      	movs	r2, #2
 8001948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3304      	adds	r3, #4
 8001954:	4619      	mov	r1, r3
 8001956:	4610      	mov	r0, r2
 8001958:	f000 f870 	bl	8001a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d101      	bne.n	80019ce <HAL_TIM_SlaveConfigSynchro+0x18>
 80019ca:	2302      	movs	r3, #2
 80019cc:	e031      	b.n	8001a32 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2202      	movs	r2, #2
 80019da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80019de:	6839      	ldr	r1, [r7, #0]
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 f8ab 	bl	8001b3c <TIM_SlaveTimer_SetConfig>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d009      	beq.n	8001a00 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e018      	b.n	8001a32 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a0e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a1e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a34      	ldr	r2, [pc, #208]	; (8001b20 <TIM_Base_SetConfig+0xe4>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d00f      	beq.n	8001a74 <TIM_Base_SetConfig+0x38>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a5a:	d00b      	beq.n	8001a74 <TIM_Base_SetConfig+0x38>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a31      	ldr	r2, [pc, #196]	; (8001b24 <TIM_Base_SetConfig+0xe8>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d007      	beq.n	8001a74 <TIM_Base_SetConfig+0x38>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a30      	ldr	r2, [pc, #192]	; (8001b28 <TIM_Base_SetConfig+0xec>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d003      	beq.n	8001a74 <TIM_Base_SetConfig+0x38>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a2f      	ldr	r2, [pc, #188]	; (8001b2c <TIM_Base_SetConfig+0xf0>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d108      	bne.n	8001a86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a25      	ldr	r2, [pc, #148]	; (8001b20 <TIM_Base_SetConfig+0xe4>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d01b      	beq.n	8001ac6 <TIM_Base_SetConfig+0x8a>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a94:	d017      	beq.n	8001ac6 <TIM_Base_SetConfig+0x8a>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a22      	ldr	r2, [pc, #136]	; (8001b24 <TIM_Base_SetConfig+0xe8>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d013      	beq.n	8001ac6 <TIM_Base_SetConfig+0x8a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a21      	ldr	r2, [pc, #132]	; (8001b28 <TIM_Base_SetConfig+0xec>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d00f      	beq.n	8001ac6 <TIM_Base_SetConfig+0x8a>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a20      	ldr	r2, [pc, #128]	; (8001b2c <TIM_Base_SetConfig+0xf0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d00b      	beq.n	8001ac6 <TIM_Base_SetConfig+0x8a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a1f      	ldr	r2, [pc, #124]	; (8001b30 <TIM_Base_SetConfig+0xf4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d007      	beq.n	8001ac6 <TIM_Base_SetConfig+0x8a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a1e      	ldr	r2, [pc, #120]	; (8001b34 <TIM_Base_SetConfig+0xf8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d003      	beq.n	8001ac6 <TIM_Base_SetConfig+0x8a>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a1d      	ldr	r2, [pc, #116]	; (8001b38 <TIM_Base_SetConfig+0xfc>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d108      	bne.n	8001ad8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001acc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a08      	ldr	r2, [pc, #32]	; (8001b20 <TIM_Base_SetConfig+0xe4>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d103      	bne.n	8001b0c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	691a      	ldr	r2, [r3, #16]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	615a      	str	r2, [r3, #20]
}
 8001b12:	bf00      	nop
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40010000 	.word	0x40010000
 8001b24:	40000400 	.word	0x40000400
 8001b28:	40000800 	.word	0x40000800
 8001b2c:	40000c00 	.word	0x40000c00
 8001b30:	40014000 	.word	0x40014000
 8001b34:	40014400 	.word	0x40014400
 8001b38:	40014800 	.word	0x40014800

08001b3c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b58:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	f023 0307 	bic.w	r3, r3, #7
 8001b6a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b70      	cmp	r3, #112	; 0x70
 8001b84:	d01a      	beq.n	8001bbc <TIM_SlaveTimer_SetConfig+0x80>
 8001b86:	2b70      	cmp	r3, #112	; 0x70
 8001b88:	d860      	bhi.n	8001c4c <TIM_SlaveTimer_SetConfig+0x110>
 8001b8a:	2b60      	cmp	r3, #96	; 0x60
 8001b8c:	d054      	beq.n	8001c38 <TIM_SlaveTimer_SetConfig+0xfc>
 8001b8e:	2b60      	cmp	r3, #96	; 0x60
 8001b90:	d85c      	bhi.n	8001c4c <TIM_SlaveTimer_SetConfig+0x110>
 8001b92:	2b50      	cmp	r3, #80	; 0x50
 8001b94:	d046      	beq.n	8001c24 <TIM_SlaveTimer_SetConfig+0xe8>
 8001b96:	2b50      	cmp	r3, #80	; 0x50
 8001b98:	d858      	bhi.n	8001c4c <TIM_SlaveTimer_SetConfig+0x110>
 8001b9a:	2b40      	cmp	r3, #64	; 0x40
 8001b9c:	d019      	beq.n	8001bd2 <TIM_SlaveTimer_SetConfig+0x96>
 8001b9e:	2b40      	cmp	r3, #64	; 0x40
 8001ba0:	d854      	bhi.n	8001c4c <TIM_SlaveTimer_SetConfig+0x110>
 8001ba2:	2b30      	cmp	r3, #48	; 0x30
 8001ba4:	d055      	beq.n	8001c52 <TIM_SlaveTimer_SetConfig+0x116>
 8001ba6:	2b30      	cmp	r3, #48	; 0x30
 8001ba8:	d850      	bhi.n	8001c4c <TIM_SlaveTimer_SetConfig+0x110>
 8001baa:	2b20      	cmp	r3, #32
 8001bac:	d051      	beq.n	8001c52 <TIM_SlaveTimer_SetConfig+0x116>
 8001bae:	2b20      	cmp	r3, #32
 8001bb0:	d84c      	bhi.n	8001c4c <TIM_SlaveTimer_SetConfig+0x110>
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d04d      	beq.n	8001c52 <TIM_SlaveTimer_SetConfig+0x116>
 8001bb6:	2b10      	cmp	r3, #16
 8001bb8:	d04b      	beq.n	8001c52 <TIM_SlaveTimer_SetConfig+0x116>
 8001bba:	e047      	b.n	8001c4c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6818      	ldr	r0, [r3, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68d9      	ldr	r1, [r3, #12]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	f000 f8a6 	bl	8001d1c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8001bd0:	e040      	b.n	8001c54 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b05      	cmp	r3, #5
 8001bd8:	d101      	bne.n	8001bde <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e03b      	b.n	8001c56 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6a1a      	ldr	r2, [r3, #32]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 0201 	bic.w	r2, r2, #1
 8001bf4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c04:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	621a      	str	r2, [r3, #32]
      break;
 8001c22:	e017      	b.n	8001c54 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	6899      	ldr	r1, [r3, #8]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	461a      	mov	r2, r3
 8001c32:	f000 f814 	bl	8001c5e <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8001c36:	e00d      	b.n	8001c54 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6818      	ldr	r0, [r3, #0]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	6899      	ldr	r1, [r3, #8]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	461a      	mov	r2, r3
 8001c46:	f000 f839 	bl	8001cbc <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8001c4a:	e003      	b.n	8001c54 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8001c50:	e000      	b.n	8001c54 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8001c52:	bf00      	nop
  }

  return status;
 8001c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b087      	sub	sp, #28
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	f023 0201 	bic.w	r2, r3, #1
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	011b      	lsls	r3, r3, #4
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f023 030a 	bic.w	r3, r3, #10
 8001c9a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	621a      	str	r2, [r3, #32]
}
 8001cb0:	bf00      	nop
 8001cb2:	371c      	adds	r7, #28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b087      	sub	sp, #28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	f023 0210 	bic.w	r2, r3, #16
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ce6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	031b      	lsls	r3, r3, #12
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001cf8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	621a      	str	r2, [r3, #32]
}
 8001d10:	bf00      	nop
 8001d12:	371c      	adds	r7, #28
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
 8001d28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	021a      	lsls	r2, r3, #8
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	609a      	str	r2, [r3, #8]
}
 8001d50:	bf00      	nop
 8001d52:	371c      	adds	r7, #28
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e050      	b.n	8001e16 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2202      	movs	r2, #2
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a1c      	ldr	r2, [pc, #112]	; (8001e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d018      	beq.n	8001dea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc0:	d013      	beq.n	8001dea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a18      	ldr	r2, [pc, #96]	; (8001e28 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d00e      	beq.n	8001dea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a16      	ldr	r2, [pc, #88]	; (8001e2c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d009      	beq.n	8001dea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a15      	ldr	r2, [pc, #84]	; (8001e30 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d004      	beq.n	8001dea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a13      	ldr	r2, [pc, #76]	; (8001e34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d10c      	bne.n	8001e04 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001df0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40010000 	.word	0x40010000
 8001e28:	40000400 	.word	0x40000400
 8001e2c:	40000800 	.word	0x40000800
 8001e30:	40000c00 	.word	0x40000c00
 8001e34:	40014000 	.word	0x40014000

08001e38 <std>:
 8001e38:	2300      	movs	r3, #0
 8001e3a:	b510      	push	{r4, lr}
 8001e3c:	4604      	mov	r4, r0
 8001e3e:	e9c0 3300 	strd	r3, r3, [r0]
 8001e42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e46:	6083      	str	r3, [r0, #8]
 8001e48:	8181      	strh	r1, [r0, #12]
 8001e4a:	6643      	str	r3, [r0, #100]	; 0x64
 8001e4c:	81c2      	strh	r2, [r0, #14]
 8001e4e:	6183      	str	r3, [r0, #24]
 8001e50:	4619      	mov	r1, r3
 8001e52:	2208      	movs	r2, #8
 8001e54:	305c      	adds	r0, #92	; 0x5c
 8001e56:	f000 f9e5 	bl	8002224 <memset>
 8001e5a:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <std+0x58>)
 8001e5c:	6263      	str	r3, [r4, #36]	; 0x24
 8001e5e:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <std+0x5c>)
 8001e60:	62a3      	str	r3, [r4, #40]	; 0x28
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <std+0x60>)
 8001e64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001e66:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <std+0x64>)
 8001e68:	6323      	str	r3, [r4, #48]	; 0x30
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <std+0x68>)
 8001e6c:	6224      	str	r4, [r4, #32]
 8001e6e:	429c      	cmp	r4, r3
 8001e70:	d006      	beq.n	8001e80 <std+0x48>
 8001e72:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001e76:	4294      	cmp	r4, r2
 8001e78:	d002      	beq.n	8001e80 <std+0x48>
 8001e7a:	33d0      	adds	r3, #208	; 0xd0
 8001e7c:	429c      	cmp	r4, r3
 8001e7e:	d105      	bne.n	8001e8c <std+0x54>
 8001e80:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e88:	f000 ba44 	b.w	8002314 <__retarget_lock_init_recursive>
 8001e8c:	bd10      	pop	{r4, pc}
 8001e8e:	bf00      	nop
 8001e90:	08002075 	.word	0x08002075
 8001e94:	08002097 	.word	0x08002097
 8001e98:	080020cf 	.word	0x080020cf
 8001e9c:	080020f3 	.word	0x080020f3
 8001ea0:	200000d4 	.word	0x200000d4

08001ea4 <stdio_exit_handler>:
 8001ea4:	4a02      	ldr	r2, [pc, #8]	; (8001eb0 <stdio_exit_handler+0xc>)
 8001ea6:	4903      	ldr	r1, [pc, #12]	; (8001eb4 <stdio_exit_handler+0x10>)
 8001ea8:	4803      	ldr	r0, [pc, #12]	; (8001eb8 <stdio_exit_handler+0x14>)
 8001eaa:	f000 b869 	b.w	8001f80 <_fwalk_sglue>
 8001eae:	bf00      	nop
 8001eb0:	2000000c 	.word	0x2000000c
 8001eb4:	08002619 	.word	0x08002619
 8001eb8:	20000018 	.word	0x20000018

08001ebc <cleanup_stdio>:
 8001ebc:	6841      	ldr	r1, [r0, #4]
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <cleanup_stdio+0x34>)
 8001ec0:	4299      	cmp	r1, r3
 8001ec2:	b510      	push	{r4, lr}
 8001ec4:	4604      	mov	r4, r0
 8001ec6:	d001      	beq.n	8001ecc <cleanup_stdio+0x10>
 8001ec8:	f000 fba6 	bl	8002618 <_fflush_r>
 8001ecc:	68a1      	ldr	r1, [r4, #8]
 8001ece:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <cleanup_stdio+0x38>)
 8001ed0:	4299      	cmp	r1, r3
 8001ed2:	d002      	beq.n	8001eda <cleanup_stdio+0x1e>
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	f000 fb9f 	bl	8002618 <_fflush_r>
 8001eda:	68e1      	ldr	r1, [r4, #12]
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <cleanup_stdio+0x3c>)
 8001ede:	4299      	cmp	r1, r3
 8001ee0:	d004      	beq.n	8001eec <cleanup_stdio+0x30>
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ee8:	f000 bb96 	b.w	8002618 <_fflush_r>
 8001eec:	bd10      	pop	{r4, pc}
 8001eee:	bf00      	nop
 8001ef0:	200000d4 	.word	0x200000d4
 8001ef4:	2000013c 	.word	0x2000013c
 8001ef8:	200001a4 	.word	0x200001a4

08001efc <global_stdio_init.part.0>:
 8001efc:	b510      	push	{r4, lr}
 8001efe:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <global_stdio_init.part.0+0x30>)
 8001f00:	4c0b      	ldr	r4, [pc, #44]	; (8001f30 <global_stdio_init.part.0+0x34>)
 8001f02:	4a0c      	ldr	r2, [pc, #48]	; (8001f34 <global_stdio_init.part.0+0x38>)
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	4620      	mov	r0, r4
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2104      	movs	r1, #4
 8001f0c:	f7ff ff94 	bl	8001e38 <std>
 8001f10:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001f14:	2201      	movs	r2, #1
 8001f16:	2109      	movs	r1, #9
 8001f18:	f7ff ff8e 	bl	8001e38 <std>
 8001f1c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001f20:	2202      	movs	r2, #2
 8001f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f26:	2112      	movs	r1, #18
 8001f28:	f7ff bf86 	b.w	8001e38 <std>
 8001f2c:	2000020c 	.word	0x2000020c
 8001f30:	200000d4 	.word	0x200000d4
 8001f34:	08001ea5 	.word	0x08001ea5

08001f38 <__sfp_lock_acquire>:
 8001f38:	4801      	ldr	r0, [pc, #4]	; (8001f40 <__sfp_lock_acquire+0x8>)
 8001f3a:	f000 b9ec 	b.w	8002316 <__retarget_lock_acquire_recursive>
 8001f3e:	bf00      	nop
 8001f40:	20000215 	.word	0x20000215

08001f44 <__sfp_lock_release>:
 8001f44:	4801      	ldr	r0, [pc, #4]	; (8001f4c <__sfp_lock_release+0x8>)
 8001f46:	f000 b9e7 	b.w	8002318 <__retarget_lock_release_recursive>
 8001f4a:	bf00      	nop
 8001f4c:	20000215 	.word	0x20000215

08001f50 <__sinit>:
 8001f50:	b510      	push	{r4, lr}
 8001f52:	4604      	mov	r4, r0
 8001f54:	f7ff fff0 	bl	8001f38 <__sfp_lock_acquire>
 8001f58:	6a23      	ldr	r3, [r4, #32]
 8001f5a:	b11b      	cbz	r3, 8001f64 <__sinit+0x14>
 8001f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f60:	f7ff bff0 	b.w	8001f44 <__sfp_lock_release>
 8001f64:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <__sinit+0x28>)
 8001f66:	6223      	str	r3, [r4, #32]
 8001f68:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <__sinit+0x2c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1f5      	bne.n	8001f5c <__sinit+0xc>
 8001f70:	f7ff ffc4 	bl	8001efc <global_stdio_init.part.0>
 8001f74:	e7f2      	b.n	8001f5c <__sinit+0xc>
 8001f76:	bf00      	nop
 8001f78:	08001ebd 	.word	0x08001ebd
 8001f7c:	2000020c 	.word	0x2000020c

08001f80 <_fwalk_sglue>:
 8001f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f84:	4607      	mov	r7, r0
 8001f86:	4688      	mov	r8, r1
 8001f88:	4614      	mov	r4, r2
 8001f8a:	2600      	movs	r6, #0
 8001f8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001f90:	f1b9 0901 	subs.w	r9, r9, #1
 8001f94:	d505      	bpl.n	8001fa2 <_fwalk_sglue+0x22>
 8001f96:	6824      	ldr	r4, [r4, #0]
 8001f98:	2c00      	cmp	r4, #0
 8001f9a:	d1f7      	bne.n	8001f8c <_fwalk_sglue+0xc>
 8001f9c:	4630      	mov	r0, r6
 8001f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fa2:	89ab      	ldrh	r3, [r5, #12]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d907      	bls.n	8001fb8 <_fwalk_sglue+0x38>
 8001fa8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001fac:	3301      	adds	r3, #1
 8001fae:	d003      	beq.n	8001fb8 <_fwalk_sglue+0x38>
 8001fb0:	4629      	mov	r1, r5
 8001fb2:	4638      	mov	r0, r7
 8001fb4:	47c0      	blx	r8
 8001fb6:	4306      	orrs	r6, r0
 8001fb8:	3568      	adds	r5, #104	; 0x68
 8001fba:	e7e9      	b.n	8001f90 <_fwalk_sglue+0x10>

08001fbc <_puts_r>:
 8001fbc:	6a03      	ldr	r3, [r0, #32]
 8001fbe:	b570      	push	{r4, r5, r6, lr}
 8001fc0:	6884      	ldr	r4, [r0, #8]
 8001fc2:	4605      	mov	r5, r0
 8001fc4:	460e      	mov	r6, r1
 8001fc6:	b90b      	cbnz	r3, 8001fcc <_puts_r+0x10>
 8001fc8:	f7ff ffc2 	bl	8001f50 <__sinit>
 8001fcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001fce:	07db      	lsls	r3, r3, #31
 8001fd0:	d405      	bmi.n	8001fde <_puts_r+0x22>
 8001fd2:	89a3      	ldrh	r3, [r4, #12]
 8001fd4:	0598      	lsls	r0, r3, #22
 8001fd6:	d402      	bmi.n	8001fde <_puts_r+0x22>
 8001fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001fda:	f000 f99c 	bl	8002316 <__retarget_lock_acquire_recursive>
 8001fde:	89a3      	ldrh	r3, [r4, #12]
 8001fe0:	0719      	lsls	r1, r3, #28
 8001fe2:	d513      	bpl.n	800200c <_puts_r+0x50>
 8001fe4:	6923      	ldr	r3, [r4, #16]
 8001fe6:	b18b      	cbz	r3, 800200c <_puts_r+0x50>
 8001fe8:	3e01      	subs	r6, #1
 8001fea:	68a3      	ldr	r3, [r4, #8]
 8001fec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	60a3      	str	r3, [r4, #8]
 8001ff4:	b9e9      	cbnz	r1, 8002032 <_puts_r+0x76>
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	da2e      	bge.n	8002058 <_puts_r+0x9c>
 8001ffa:	4622      	mov	r2, r4
 8001ffc:	210a      	movs	r1, #10
 8001ffe:	4628      	mov	r0, r5
 8002000:	f000 f87b 	bl	80020fa <__swbuf_r>
 8002004:	3001      	adds	r0, #1
 8002006:	d007      	beq.n	8002018 <_puts_r+0x5c>
 8002008:	250a      	movs	r5, #10
 800200a:	e007      	b.n	800201c <_puts_r+0x60>
 800200c:	4621      	mov	r1, r4
 800200e:	4628      	mov	r0, r5
 8002010:	f000 f8b0 	bl	8002174 <__swsetup_r>
 8002014:	2800      	cmp	r0, #0
 8002016:	d0e7      	beq.n	8001fe8 <_puts_r+0x2c>
 8002018:	f04f 35ff 	mov.w	r5, #4294967295
 800201c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800201e:	07da      	lsls	r2, r3, #31
 8002020:	d405      	bmi.n	800202e <_puts_r+0x72>
 8002022:	89a3      	ldrh	r3, [r4, #12]
 8002024:	059b      	lsls	r3, r3, #22
 8002026:	d402      	bmi.n	800202e <_puts_r+0x72>
 8002028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800202a:	f000 f975 	bl	8002318 <__retarget_lock_release_recursive>
 800202e:	4628      	mov	r0, r5
 8002030:	bd70      	pop	{r4, r5, r6, pc}
 8002032:	2b00      	cmp	r3, #0
 8002034:	da04      	bge.n	8002040 <_puts_r+0x84>
 8002036:	69a2      	ldr	r2, [r4, #24]
 8002038:	429a      	cmp	r2, r3
 800203a:	dc06      	bgt.n	800204a <_puts_r+0x8e>
 800203c:	290a      	cmp	r1, #10
 800203e:	d004      	beq.n	800204a <_puts_r+0x8e>
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	1c5a      	adds	r2, r3, #1
 8002044:	6022      	str	r2, [r4, #0]
 8002046:	7019      	strb	r1, [r3, #0]
 8002048:	e7cf      	b.n	8001fea <_puts_r+0x2e>
 800204a:	4622      	mov	r2, r4
 800204c:	4628      	mov	r0, r5
 800204e:	f000 f854 	bl	80020fa <__swbuf_r>
 8002052:	3001      	adds	r0, #1
 8002054:	d1c9      	bne.n	8001fea <_puts_r+0x2e>
 8002056:	e7df      	b.n	8002018 <_puts_r+0x5c>
 8002058:	6823      	ldr	r3, [r4, #0]
 800205a:	250a      	movs	r5, #10
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	6022      	str	r2, [r4, #0]
 8002060:	701d      	strb	r5, [r3, #0]
 8002062:	e7db      	b.n	800201c <_puts_r+0x60>

08002064 <puts>:
 8002064:	4b02      	ldr	r3, [pc, #8]	; (8002070 <puts+0xc>)
 8002066:	4601      	mov	r1, r0
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	f7ff bfa7 	b.w	8001fbc <_puts_r>
 800206e:	bf00      	nop
 8002070:	20000064 	.word	0x20000064

08002074 <__sread>:
 8002074:	b510      	push	{r4, lr}
 8002076:	460c      	mov	r4, r1
 8002078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800207c:	f000 f8fc 	bl	8002278 <_read_r>
 8002080:	2800      	cmp	r0, #0
 8002082:	bfab      	itete	ge
 8002084:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002086:	89a3      	ldrhlt	r3, [r4, #12]
 8002088:	181b      	addge	r3, r3, r0
 800208a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800208e:	bfac      	ite	ge
 8002090:	6563      	strge	r3, [r4, #84]	; 0x54
 8002092:	81a3      	strhlt	r3, [r4, #12]
 8002094:	bd10      	pop	{r4, pc}

08002096 <__swrite>:
 8002096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800209a:	461f      	mov	r7, r3
 800209c:	898b      	ldrh	r3, [r1, #12]
 800209e:	05db      	lsls	r3, r3, #23
 80020a0:	4605      	mov	r5, r0
 80020a2:	460c      	mov	r4, r1
 80020a4:	4616      	mov	r6, r2
 80020a6:	d505      	bpl.n	80020b4 <__swrite+0x1e>
 80020a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020ac:	2302      	movs	r3, #2
 80020ae:	2200      	movs	r2, #0
 80020b0:	f000 f8d0 	bl	8002254 <_lseek_r>
 80020b4:	89a3      	ldrh	r3, [r4, #12]
 80020b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020be:	81a3      	strh	r3, [r4, #12]
 80020c0:	4632      	mov	r2, r6
 80020c2:	463b      	mov	r3, r7
 80020c4:	4628      	mov	r0, r5
 80020c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020ca:	f000 b8e7 	b.w	800229c <_write_r>

080020ce <__sseek>:
 80020ce:	b510      	push	{r4, lr}
 80020d0:	460c      	mov	r4, r1
 80020d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020d6:	f000 f8bd 	bl	8002254 <_lseek_r>
 80020da:	1c43      	adds	r3, r0, #1
 80020dc:	89a3      	ldrh	r3, [r4, #12]
 80020de:	bf15      	itete	ne
 80020e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80020e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80020e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80020ea:	81a3      	strheq	r3, [r4, #12]
 80020ec:	bf18      	it	ne
 80020ee:	81a3      	strhne	r3, [r4, #12]
 80020f0:	bd10      	pop	{r4, pc}

080020f2 <__sclose>:
 80020f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020f6:	f000 b89d 	b.w	8002234 <_close_r>

080020fa <__swbuf_r>:
 80020fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020fc:	460e      	mov	r6, r1
 80020fe:	4614      	mov	r4, r2
 8002100:	4605      	mov	r5, r0
 8002102:	b118      	cbz	r0, 800210c <__swbuf_r+0x12>
 8002104:	6a03      	ldr	r3, [r0, #32]
 8002106:	b90b      	cbnz	r3, 800210c <__swbuf_r+0x12>
 8002108:	f7ff ff22 	bl	8001f50 <__sinit>
 800210c:	69a3      	ldr	r3, [r4, #24]
 800210e:	60a3      	str	r3, [r4, #8]
 8002110:	89a3      	ldrh	r3, [r4, #12]
 8002112:	071a      	lsls	r2, r3, #28
 8002114:	d525      	bpl.n	8002162 <__swbuf_r+0x68>
 8002116:	6923      	ldr	r3, [r4, #16]
 8002118:	b31b      	cbz	r3, 8002162 <__swbuf_r+0x68>
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	6922      	ldr	r2, [r4, #16]
 800211e:	1a98      	subs	r0, r3, r2
 8002120:	6963      	ldr	r3, [r4, #20]
 8002122:	b2f6      	uxtb	r6, r6
 8002124:	4283      	cmp	r3, r0
 8002126:	4637      	mov	r7, r6
 8002128:	dc04      	bgt.n	8002134 <__swbuf_r+0x3a>
 800212a:	4621      	mov	r1, r4
 800212c:	4628      	mov	r0, r5
 800212e:	f000 fa73 	bl	8002618 <_fflush_r>
 8002132:	b9e0      	cbnz	r0, 800216e <__swbuf_r+0x74>
 8002134:	68a3      	ldr	r3, [r4, #8]
 8002136:	3b01      	subs	r3, #1
 8002138:	60a3      	str	r3, [r4, #8]
 800213a:	6823      	ldr	r3, [r4, #0]
 800213c:	1c5a      	adds	r2, r3, #1
 800213e:	6022      	str	r2, [r4, #0]
 8002140:	701e      	strb	r6, [r3, #0]
 8002142:	6962      	ldr	r2, [r4, #20]
 8002144:	1c43      	adds	r3, r0, #1
 8002146:	429a      	cmp	r2, r3
 8002148:	d004      	beq.n	8002154 <__swbuf_r+0x5a>
 800214a:	89a3      	ldrh	r3, [r4, #12]
 800214c:	07db      	lsls	r3, r3, #31
 800214e:	d506      	bpl.n	800215e <__swbuf_r+0x64>
 8002150:	2e0a      	cmp	r6, #10
 8002152:	d104      	bne.n	800215e <__swbuf_r+0x64>
 8002154:	4621      	mov	r1, r4
 8002156:	4628      	mov	r0, r5
 8002158:	f000 fa5e 	bl	8002618 <_fflush_r>
 800215c:	b938      	cbnz	r0, 800216e <__swbuf_r+0x74>
 800215e:	4638      	mov	r0, r7
 8002160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002162:	4621      	mov	r1, r4
 8002164:	4628      	mov	r0, r5
 8002166:	f000 f805 	bl	8002174 <__swsetup_r>
 800216a:	2800      	cmp	r0, #0
 800216c:	d0d5      	beq.n	800211a <__swbuf_r+0x20>
 800216e:	f04f 37ff 	mov.w	r7, #4294967295
 8002172:	e7f4      	b.n	800215e <__swbuf_r+0x64>

08002174 <__swsetup_r>:
 8002174:	b538      	push	{r3, r4, r5, lr}
 8002176:	4b2a      	ldr	r3, [pc, #168]	; (8002220 <__swsetup_r+0xac>)
 8002178:	4605      	mov	r5, r0
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	460c      	mov	r4, r1
 800217e:	b118      	cbz	r0, 8002188 <__swsetup_r+0x14>
 8002180:	6a03      	ldr	r3, [r0, #32]
 8002182:	b90b      	cbnz	r3, 8002188 <__swsetup_r+0x14>
 8002184:	f7ff fee4 	bl	8001f50 <__sinit>
 8002188:	89a3      	ldrh	r3, [r4, #12]
 800218a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800218e:	0718      	lsls	r0, r3, #28
 8002190:	d422      	bmi.n	80021d8 <__swsetup_r+0x64>
 8002192:	06d9      	lsls	r1, r3, #27
 8002194:	d407      	bmi.n	80021a6 <__swsetup_r+0x32>
 8002196:	2309      	movs	r3, #9
 8002198:	602b      	str	r3, [r5, #0]
 800219a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800219e:	81a3      	strh	r3, [r4, #12]
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295
 80021a4:	e034      	b.n	8002210 <__swsetup_r+0x9c>
 80021a6:	0758      	lsls	r0, r3, #29
 80021a8:	d512      	bpl.n	80021d0 <__swsetup_r+0x5c>
 80021aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80021ac:	b141      	cbz	r1, 80021c0 <__swsetup_r+0x4c>
 80021ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80021b2:	4299      	cmp	r1, r3
 80021b4:	d002      	beq.n	80021bc <__swsetup_r+0x48>
 80021b6:	4628      	mov	r0, r5
 80021b8:	f000 f8b0 	bl	800231c <_free_r>
 80021bc:	2300      	movs	r3, #0
 80021be:	6363      	str	r3, [r4, #52]	; 0x34
 80021c0:	89a3      	ldrh	r3, [r4, #12]
 80021c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80021c6:	81a3      	strh	r3, [r4, #12]
 80021c8:	2300      	movs	r3, #0
 80021ca:	6063      	str	r3, [r4, #4]
 80021cc:	6923      	ldr	r3, [r4, #16]
 80021ce:	6023      	str	r3, [r4, #0]
 80021d0:	89a3      	ldrh	r3, [r4, #12]
 80021d2:	f043 0308 	orr.w	r3, r3, #8
 80021d6:	81a3      	strh	r3, [r4, #12]
 80021d8:	6923      	ldr	r3, [r4, #16]
 80021da:	b94b      	cbnz	r3, 80021f0 <__swsetup_r+0x7c>
 80021dc:	89a3      	ldrh	r3, [r4, #12]
 80021de:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80021e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021e6:	d003      	beq.n	80021f0 <__swsetup_r+0x7c>
 80021e8:	4621      	mov	r1, r4
 80021ea:	4628      	mov	r0, r5
 80021ec:	f000 fa62 	bl	80026b4 <__smakebuf_r>
 80021f0:	89a0      	ldrh	r0, [r4, #12]
 80021f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80021f6:	f010 0301 	ands.w	r3, r0, #1
 80021fa:	d00a      	beq.n	8002212 <__swsetup_r+0x9e>
 80021fc:	2300      	movs	r3, #0
 80021fe:	60a3      	str	r3, [r4, #8]
 8002200:	6963      	ldr	r3, [r4, #20]
 8002202:	425b      	negs	r3, r3
 8002204:	61a3      	str	r3, [r4, #24]
 8002206:	6923      	ldr	r3, [r4, #16]
 8002208:	b943      	cbnz	r3, 800221c <__swsetup_r+0xa8>
 800220a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800220e:	d1c4      	bne.n	800219a <__swsetup_r+0x26>
 8002210:	bd38      	pop	{r3, r4, r5, pc}
 8002212:	0781      	lsls	r1, r0, #30
 8002214:	bf58      	it	pl
 8002216:	6963      	ldrpl	r3, [r4, #20]
 8002218:	60a3      	str	r3, [r4, #8]
 800221a:	e7f4      	b.n	8002206 <__swsetup_r+0x92>
 800221c:	2000      	movs	r0, #0
 800221e:	e7f7      	b.n	8002210 <__swsetup_r+0x9c>
 8002220:	20000064 	.word	0x20000064

08002224 <memset>:
 8002224:	4402      	add	r2, r0
 8002226:	4603      	mov	r3, r0
 8002228:	4293      	cmp	r3, r2
 800222a:	d100      	bne.n	800222e <memset+0xa>
 800222c:	4770      	bx	lr
 800222e:	f803 1b01 	strb.w	r1, [r3], #1
 8002232:	e7f9      	b.n	8002228 <memset+0x4>

08002234 <_close_r>:
 8002234:	b538      	push	{r3, r4, r5, lr}
 8002236:	4d06      	ldr	r5, [pc, #24]	; (8002250 <_close_r+0x1c>)
 8002238:	2300      	movs	r3, #0
 800223a:	4604      	mov	r4, r0
 800223c:	4608      	mov	r0, r1
 800223e:	602b      	str	r3, [r5, #0]
 8002240:	f7fe fb47 	bl	80008d2 <_close>
 8002244:	1c43      	adds	r3, r0, #1
 8002246:	d102      	bne.n	800224e <_close_r+0x1a>
 8002248:	682b      	ldr	r3, [r5, #0]
 800224a:	b103      	cbz	r3, 800224e <_close_r+0x1a>
 800224c:	6023      	str	r3, [r4, #0]
 800224e:	bd38      	pop	{r3, r4, r5, pc}
 8002250:	20000210 	.word	0x20000210

08002254 <_lseek_r>:
 8002254:	b538      	push	{r3, r4, r5, lr}
 8002256:	4d07      	ldr	r5, [pc, #28]	; (8002274 <_lseek_r+0x20>)
 8002258:	4604      	mov	r4, r0
 800225a:	4608      	mov	r0, r1
 800225c:	4611      	mov	r1, r2
 800225e:	2200      	movs	r2, #0
 8002260:	602a      	str	r2, [r5, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	f7fe fb5c 	bl	8000920 <_lseek>
 8002268:	1c43      	adds	r3, r0, #1
 800226a:	d102      	bne.n	8002272 <_lseek_r+0x1e>
 800226c:	682b      	ldr	r3, [r5, #0]
 800226e:	b103      	cbz	r3, 8002272 <_lseek_r+0x1e>
 8002270:	6023      	str	r3, [r4, #0]
 8002272:	bd38      	pop	{r3, r4, r5, pc}
 8002274:	20000210 	.word	0x20000210

08002278 <_read_r>:
 8002278:	b538      	push	{r3, r4, r5, lr}
 800227a:	4d07      	ldr	r5, [pc, #28]	; (8002298 <_read_r+0x20>)
 800227c:	4604      	mov	r4, r0
 800227e:	4608      	mov	r0, r1
 8002280:	4611      	mov	r1, r2
 8002282:	2200      	movs	r2, #0
 8002284:	602a      	str	r2, [r5, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	f7fe fb06 	bl	8000898 <_read>
 800228c:	1c43      	adds	r3, r0, #1
 800228e:	d102      	bne.n	8002296 <_read_r+0x1e>
 8002290:	682b      	ldr	r3, [r5, #0]
 8002292:	b103      	cbz	r3, 8002296 <_read_r+0x1e>
 8002294:	6023      	str	r3, [r4, #0]
 8002296:	bd38      	pop	{r3, r4, r5, pc}
 8002298:	20000210 	.word	0x20000210

0800229c <_write_r>:
 800229c:	b538      	push	{r3, r4, r5, lr}
 800229e:	4d07      	ldr	r5, [pc, #28]	; (80022bc <_write_r+0x20>)
 80022a0:	4604      	mov	r4, r0
 80022a2:	4608      	mov	r0, r1
 80022a4:	4611      	mov	r1, r2
 80022a6:	2200      	movs	r2, #0
 80022a8:	602a      	str	r2, [r5, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	f7fe fa5e 	bl	800076c <_write>
 80022b0:	1c43      	adds	r3, r0, #1
 80022b2:	d102      	bne.n	80022ba <_write_r+0x1e>
 80022b4:	682b      	ldr	r3, [r5, #0]
 80022b6:	b103      	cbz	r3, 80022ba <_write_r+0x1e>
 80022b8:	6023      	str	r3, [r4, #0]
 80022ba:	bd38      	pop	{r3, r4, r5, pc}
 80022bc:	20000210 	.word	0x20000210

080022c0 <__errno>:
 80022c0:	4b01      	ldr	r3, [pc, #4]	; (80022c8 <__errno+0x8>)
 80022c2:	6818      	ldr	r0, [r3, #0]
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	20000064 	.word	0x20000064

080022cc <__libc_init_array>:
 80022cc:	b570      	push	{r4, r5, r6, lr}
 80022ce:	4d0d      	ldr	r5, [pc, #52]	; (8002304 <__libc_init_array+0x38>)
 80022d0:	4c0d      	ldr	r4, [pc, #52]	; (8002308 <__libc_init_array+0x3c>)
 80022d2:	1b64      	subs	r4, r4, r5
 80022d4:	10a4      	asrs	r4, r4, #2
 80022d6:	2600      	movs	r6, #0
 80022d8:	42a6      	cmp	r6, r4
 80022da:	d109      	bne.n	80022f0 <__libc_init_array+0x24>
 80022dc:	4d0b      	ldr	r5, [pc, #44]	; (800230c <__libc_init_array+0x40>)
 80022de:	4c0c      	ldr	r4, [pc, #48]	; (8002310 <__libc_init_array+0x44>)
 80022e0:	f000 fa56 	bl	8002790 <_init>
 80022e4:	1b64      	subs	r4, r4, r5
 80022e6:	10a4      	asrs	r4, r4, #2
 80022e8:	2600      	movs	r6, #0
 80022ea:	42a6      	cmp	r6, r4
 80022ec:	d105      	bne.n	80022fa <__libc_init_array+0x2e>
 80022ee:	bd70      	pop	{r4, r5, r6, pc}
 80022f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80022f4:	4798      	blx	r3
 80022f6:	3601      	adds	r6, #1
 80022f8:	e7ee      	b.n	80022d8 <__libc_init_array+0xc>
 80022fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80022fe:	4798      	blx	r3
 8002300:	3601      	adds	r6, #1
 8002302:	e7f2      	b.n	80022ea <__libc_init_array+0x1e>
 8002304:	080027d0 	.word	0x080027d0
 8002308:	080027d0 	.word	0x080027d0
 800230c:	080027d0 	.word	0x080027d0
 8002310:	080027d4 	.word	0x080027d4

08002314 <__retarget_lock_init_recursive>:
 8002314:	4770      	bx	lr

08002316 <__retarget_lock_acquire_recursive>:
 8002316:	4770      	bx	lr

08002318 <__retarget_lock_release_recursive>:
 8002318:	4770      	bx	lr
	...

0800231c <_free_r>:
 800231c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800231e:	2900      	cmp	r1, #0
 8002320:	d044      	beq.n	80023ac <_free_r+0x90>
 8002322:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002326:	9001      	str	r0, [sp, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	f1a1 0404 	sub.w	r4, r1, #4
 800232e:	bfb8      	it	lt
 8002330:	18e4      	addlt	r4, r4, r3
 8002332:	f000 f8df 	bl	80024f4 <__malloc_lock>
 8002336:	4a1e      	ldr	r2, [pc, #120]	; (80023b0 <_free_r+0x94>)
 8002338:	9801      	ldr	r0, [sp, #4]
 800233a:	6813      	ldr	r3, [r2, #0]
 800233c:	b933      	cbnz	r3, 800234c <_free_r+0x30>
 800233e:	6063      	str	r3, [r4, #4]
 8002340:	6014      	str	r4, [r2, #0]
 8002342:	b003      	add	sp, #12
 8002344:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002348:	f000 b8da 	b.w	8002500 <__malloc_unlock>
 800234c:	42a3      	cmp	r3, r4
 800234e:	d908      	bls.n	8002362 <_free_r+0x46>
 8002350:	6825      	ldr	r5, [r4, #0]
 8002352:	1961      	adds	r1, r4, r5
 8002354:	428b      	cmp	r3, r1
 8002356:	bf01      	itttt	eq
 8002358:	6819      	ldreq	r1, [r3, #0]
 800235a:	685b      	ldreq	r3, [r3, #4]
 800235c:	1949      	addeq	r1, r1, r5
 800235e:	6021      	streq	r1, [r4, #0]
 8002360:	e7ed      	b.n	800233e <_free_r+0x22>
 8002362:	461a      	mov	r2, r3
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	b10b      	cbz	r3, 800236c <_free_r+0x50>
 8002368:	42a3      	cmp	r3, r4
 800236a:	d9fa      	bls.n	8002362 <_free_r+0x46>
 800236c:	6811      	ldr	r1, [r2, #0]
 800236e:	1855      	adds	r5, r2, r1
 8002370:	42a5      	cmp	r5, r4
 8002372:	d10b      	bne.n	800238c <_free_r+0x70>
 8002374:	6824      	ldr	r4, [r4, #0]
 8002376:	4421      	add	r1, r4
 8002378:	1854      	adds	r4, r2, r1
 800237a:	42a3      	cmp	r3, r4
 800237c:	6011      	str	r1, [r2, #0]
 800237e:	d1e0      	bne.n	8002342 <_free_r+0x26>
 8002380:	681c      	ldr	r4, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	6053      	str	r3, [r2, #4]
 8002386:	440c      	add	r4, r1
 8002388:	6014      	str	r4, [r2, #0]
 800238a:	e7da      	b.n	8002342 <_free_r+0x26>
 800238c:	d902      	bls.n	8002394 <_free_r+0x78>
 800238e:	230c      	movs	r3, #12
 8002390:	6003      	str	r3, [r0, #0]
 8002392:	e7d6      	b.n	8002342 <_free_r+0x26>
 8002394:	6825      	ldr	r5, [r4, #0]
 8002396:	1961      	adds	r1, r4, r5
 8002398:	428b      	cmp	r3, r1
 800239a:	bf04      	itt	eq
 800239c:	6819      	ldreq	r1, [r3, #0]
 800239e:	685b      	ldreq	r3, [r3, #4]
 80023a0:	6063      	str	r3, [r4, #4]
 80023a2:	bf04      	itt	eq
 80023a4:	1949      	addeq	r1, r1, r5
 80023a6:	6021      	streq	r1, [r4, #0]
 80023a8:	6054      	str	r4, [r2, #4]
 80023aa:	e7ca      	b.n	8002342 <_free_r+0x26>
 80023ac:	b003      	add	sp, #12
 80023ae:	bd30      	pop	{r4, r5, pc}
 80023b0:	20000218 	.word	0x20000218

080023b4 <sbrk_aligned>:
 80023b4:	b570      	push	{r4, r5, r6, lr}
 80023b6:	4e0e      	ldr	r6, [pc, #56]	; (80023f0 <sbrk_aligned+0x3c>)
 80023b8:	460c      	mov	r4, r1
 80023ba:	6831      	ldr	r1, [r6, #0]
 80023bc:	4605      	mov	r5, r0
 80023be:	b911      	cbnz	r1, 80023c6 <sbrk_aligned+0x12>
 80023c0:	f000 f9d6 	bl	8002770 <_sbrk_r>
 80023c4:	6030      	str	r0, [r6, #0]
 80023c6:	4621      	mov	r1, r4
 80023c8:	4628      	mov	r0, r5
 80023ca:	f000 f9d1 	bl	8002770 <_sbrk_r>
 80023ce:	1c43      	adds	r3, r0, #1
 80023d0:	d00a      	beq.n	80023e8 <sbrk_aligned+0x34>
 80023d2:	1cc4      	adds	r4, r0, #3
 80023d4:	f024 0403 	bic.w	r4, r4, #3
 80023d8:	42a0      	cmp	r0, r4
 80023da:	d007      	beq.n	80023ec <sbrk_aligned+0x38>
 80023dc:	1a21      	subs	r1, r4, r0
 80023de:	4628      	mov	r0, r5
 80023e0:	f000 f9c6 	bl	8002770 <_sbrk_r>
 80023e4:	3001      	adds	r0, #1
 80023e6:	d101      	bne.n	80023ec <sbrk_aligned+0x38>
 80023e8:	f04f 34ff 	mov.w	r4, #4294967295
 80023ec:	4620      	mov	r0, r4
 80023ee:	bd70      	pop	{r4, r5, r6, pc}
 80023f0:	2000021c 	.word	0x2000021c

080023f4 <_malloc_r>:
 80023f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023f8:	1ccd      	adds	r5, r1, #3
 80023fa:	f025 0503 	bic.w	r5, r5, #3
 80023fe:	3508      	adds	r5, #8
 8002400:	2d0c      	cmp	r5, #12
 8002402:	bf38      	it	cc
 8002404:	250c      	movcc	r5, #12
 8002406:	2d00      	cmp	r5, #0
 8002408:	4607      	mov	r7, r0
 800240a:	db01      	blt.n	8002410 <_malloc_r+0x1c>
 800240c:	42a9      	cmp	r1, r5
 800240e:	d905      	bls.n	800241c <_malloc_r+0x28>
 8002410:	230c      	movs	r3, #12
 8002412:	603b      	str	r3, [r7, #0]
 8002414:	2600      	movs	r6, #0
 8002416:	4630      	mov	r0, r6
 8002418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800241c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80024f0 <_malloc_r+0xfc>
 8002420:	f000 f868 	bl	80024f4 <__malloc_lock>
 8002424:	f8d8 3000 	ldr.w	r3, [r8]
 8002428:	461c      	mov	r4, r3
 800242a:	bb5c      	cbnz	r4, 8002484 <_malloc_r+0x90>
 800242c:	4629      	mov	r1, r5
 800242e:	4638      	mov	r0, r7
 8002430:	f7ff ffc0 	bl	80023b4 <sbrk_aligned>
 8002434:	1c43      	adds	r3, r0, #1
 8002436:	4604      	mov	r4, r0
 8002438:	d155      	bne.n	80024e6 <_malloc_r+0xf2>
 800243a:	f8d8 4000 	ldr.w	r4, [r8]
 800243e:	4626      	mov	r6, r4
 8002440:	2e00      	cmp	r6, #0
 8002442:	d145      	bne.n	80024d0 <_malloc_r+0xdc>
 8002444:	2c00      	cmp	r4, #0
 8002446:	d048      	beq.n	80024da <_malloc_r+0xe6>
 8002448:	6823      	ldr	r3, [r4, #0]
 800244a:	4631      	mov	r1, r6
 800244c:	4638      	mov	r0, r7
 800244e:	eb04 0903 	add.w	r9, r4, r3
 8002452:	f000 f98d 	bl	8002770 <_sbrk_r>
 8002456:	4581      	cmp	r9, r0
 8002458:	d13f      	bne.n	80024da <_malloc_r+0xe6>
 800245a:	6821      	ldr	r1, [r4, #0]
 800245c:	1a6d      	subs	r5, r5, r1
 800245e:	4629      	mov	r1, r5
 8002460:	4638      	mov	r0, r7
 8002462:	f7ff ffa7 	bl	80023b4 <sbrk_aligned>
 8002466:	3001      	adds	r0, #1
 8002468:	d037      	beq.n	80024da <_malloc_r+0xe6>
 800246a:	6823      	ldr	r3, [r4, #0]
 800246c:	442b      	add	r3, r5
 800246e:	6023      	str	r3, [r4, #0]
 8002470:	f8d8 3000 	ldr.w	r3, [r8]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d038      	beq.n	80024ea <_malloc_r+0xf6>
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	42a2      	cmp	r2, r4
 800247c:	d12b      	bne.n	80024d6 <_malloc_r+0xe2>
 800247e:	2200      	movs	r2, #0
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	e00f      	b.n	80024a4 <_malloc_r+0xb0>
 8002484:	6822      	ldr	r2, [r4, #0]
 8002486:	1b52      	subs	r2, r2, r5
 8002488:	d41f      	bmi.n	80024ca <_malloc_r+0xd6>
 800248a:	2a0b      	cmp	r2, #11
 800248c:	d917      	bls.n	80024be <_malloc_r+0xca>
 800248e:	1961      	adds	r1, r4, r5
 8002490:	42a3      	cmp	r3, r4
 8002492:	6025      	str	r5, [r4, #0]
 8002494:	bf18      	it	ne
 8002496:	6059      	strne	r1, [r3, #4]
 8002498:	6863      	ldr	r3, [r4, #4]
 800249a:	bf08      	it	eq
 800249c:	f8c8 1000 	streq.w	r1, [r8]
 80024a0:	5162      	str	r2, [r4, r5]
 80024a2:	604b      	str	r3, [r1, #4]
 80024a4:	4638      	mov	r0, r7
 80024a6:	f104 060b 	add.w	r6, r4, #11
 80024aa:	f000 f829 	bl	8002500 <__malloc_unlock>
 80024ae:	f026 0607 	bic.w	r6, r6, #7
 80024b2:	1d23      	adds	r3, r4, #4
 80024b4:	1af2      	subs	r2, r6, r3
 80024b6:	d0ae      	beq.n	8002416 <_malloc_r+0x22>
 80024b8:	1b9b      	subs	r3, r3, r6
 80024ba:	50a3      	str	r3, [r4, r2]
 80024bc:	e7ab      	b.n	8002416 <_malloc_r+0x22>
 80024be:	42a3      	cmp	r3, r4
 80024c0:	6862      	ldr	r2, [r4, #4]
 80024c2:	d1dd      	bne.n	8002480 <_malloc_r+0x8c>
 80024c4:	f8c8 2000 	str.w	r2, [r8]
 80024c8:	e7ec      	b.n	80024a4 <_malloc_r+0xb0>
 80024ca:	4623      	mov	r3, r4
 80024cc:	6864      	ldr	r4, [r4, #4]
 80024ce:	e7ac      	b.n	800242a <_malloc_r+0x36>
 80024d0:	4634      	mov	r4, r6
 80024d2:	6876      	ldr	r6, [r6, #4]
 80024d4:	e7b4      	b.n	8002440 <_malloc_r+0x4c>
 80024d6:	4613      	mov	r3, r2
 80024d8:	e7cc      	b.n	8002474 <_malloc_r+0x80>
 80024da:	230c      	movs	r3, #12
 80024dc:	603b      	str	r3, [r7, #0]
 80024de:	4638      	mov	r0, r7
 80024e0:	f000 f80e 	bl	8002500 <__malloc_unlock>
 80024e4:	e797      	b.n	8002416 <_malloc_r+0x22>
 80024e6:	6025      	str	r5, [r4, #0]
 80024e8:	e7dc      	b.n	80024a4 <_malloc_r+0xb0>
 80024ea:	605b      	str	r3, [r3, #4]
 80024ec:	deff      	udf	#255	; 0xff
 80024ee:	bf00      	nop
 80024f0:	20000218 	.word	0x20000218

080024f4 <__malloc_lock>:
 80024f4:	4801      	ldr	r0, [pc, #4]	; (80024fc <__malloc_lock+0x8>)
 80024f6:	f7ff bf0e 	b.w	8002316 <__retarget_lock_acquire_recursive>
 80024fa:	bf00      	nop
 80024fc:	20000214 	.word	0x20000214

08002500 <__malloc_unlock>:
 8002500:	4801      	ldr	r0, [pc, #4]	; (8002508 <__malloc_unlock+0x8>)
 8002502:	f7ff bf09 	b.w	8002318 <__retarget_lock_release_recursive>
 8002506:	bf00      	nop
 8002508:	20000214 	.word	0x20000214

0800250c <__sflush_r>:
 800250c:	898a      	ldrh	r2, [r1, #12]
 800250e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002512:	4605      	mov	r5, r0
 8002514:	0710      	lsls	r0, r2, #28
 8002516:	460c      	mov	r4, r1
 8002518:	d458      	bmi.n	80025cc <__sflush_r+0xc0>
 800251a:	684b      	ldr	r3, [r1, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	dc05      	bgt.n	800252c <__sflush_r+0x20>
 8002520:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002522:	2b00      	cmp	r3, #0
 8002524:	dc02      	bgt.n	800252c <__sflush_r+0x20>
 8002526:	2000      	movs	r0, #0
 8002528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800252c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800252e:	2e00      	cmp	r6, #0
 8002530:	d0f9      	beq.n	8002526 <__sflush_r+0x1a>
 8002532:	2300      	movs	r3, #0
 8002534:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002538:	682f      	ldr	r7, [r5, #0]
 800253a:	6a21      	ldr	r1, [r4, #32]
 800253c:	602b      	str	r3, [r5, #0]
 800253e:	d032      	beq.n	80025a6 <__sflush_r+0x9a>
 8002540:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002542:	89a3      	ldrh	r3, [r4, #12]
 8002544:	075a      	lsls	r2, r3, #29
 8002546:	d505      	bpl.n	8002554 <__sflush_r+0x48>
 8002548:	6863      	ldr	r3, [r4, #4]
 800254a:	1ac0      	subs	r0, r0, r3
 800254c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800254e:	b10b      	cbz	r3, 8002554 <__sflush_r+0x48>
 8002550:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002552:	1ac0      	subs	r0, r0, r3
 8002554:	2300      	movs	r3, #0
 8002556:	4602      	mov	r2, r0
 8002558:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800255a:	6a21      	ldr	r1, [r4, #32]
 800255c:	4628      	mov	r0, r5
 800255e:	47b0      	blx	r6
 8002560:	1c43      	adds	r3, r0, #1
 8002562:	89a3      	ldrh	r3, [r4, #12]
 8002564:	d106      	bne.n	8002574 <__sflush_r+0x68>
 8002566:	6829      	ldr	r1, [r5, #0]
 8002568:	291d      	cmp	r1, #29
 800256a:	d82b      	bhi.n	80025c4 <__sflush_r+0xb8>
 800256c:	4a29      	ldr	r2, [pc, #164]	; (8002614 <__sflush_r+0x108>)
 800256e:	410a      	asrs	r2, r1
 8002570:	07d6      	lsls	r6, r2, #31
 8002572:	d427      	bmi.n	80025c4 <__sflush_r+0xb8>
 8002574:	2200      	movs	r2, #0
 8002576:	6062      	str	r2, [r4, #4]
 8002578:	04d9      	lsls	r1, r3, #19
 800257a:	6922      	ldr	r2, [r4, #16]
 800257c:	6022      	str	r2, [r4, #0]
 800257e:	d504      	bpl.n	800258a <__sflush_r+0x7e>
 8002580:	1c42      	adds	r2, r0, #1
 8002582:	d101      	bne.n	8002588 <__sflush_r+0x7c>
 8002584:	682b      	ldr	r3, [r5, #0]
 8002586:	b903      	cbnz	r3, 800258a <__sflush_r+0x7e>
 8002588:	6560      	str	r0, [r4, #84]	; 0x54
 800258a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800258c:	602f      	str	r7, [r5, #0]
 800258e:	2900      	cmp	r1, #0
 8002590:	d0c9      	beq.n	8002526 <__sflush_r+0x1a>
 8002592:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002596:	4299      	cmp	r1, r3
 8002598:	d002      	beq.n	80025a0 <__sflush_r+0x94>
 800259a:	4628      	mov	r0, r5
 800259c:	f7ff febe 	bl	800231c <_free_r>
 80025a0:	2000      	movs	r0, #0
 80025a2:	6360      	str	r0, [r4, #52]	; 0x34
 80025a4:	e7c0      	b.n	8002528 <__sflush_r+0x1c>
 80025a6:	2301      	movs	r3, #1
 80025a8:	4628      	mov	r0, r5
 80025aa:	47b0      	blx	r6
 80025ac:	1c41      	adds	r1, r0, #1
 80025ae:	d1c8      	bne.n	8002542 <__sflush_r+0x36>
 80025b0:	682b      	ldr	r3, [r5, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0c5      	beq.n	8002542 <__sflush_r+0x36>
 80025b6:	2b1d      	cmp	r3, #29
 80025b8:	d001      	beq.n	80025be <__sflush_r+0xb2>
 80025ba:	2b16      	cmp	r3, #22
 80025bc:	d101      	bne.n	80025c2 <__sflush_r+0xb6>
 80025be:	602f      	str	r7, [r5, #0]
 80025c0:	e7b1      	b.n	8002526 <__sflush_r+0x1a>
 80025c2:	89a3      	ldrh	r3, [r4, #12]
 80025c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025c8:	81a3      	strh	r3, [r4, #12]
 80025ca:	e7ad      	b.n	8002528 <__sflush_r+0x1c>
 80025cc:	690f      	ldr	r7, [r1, #16]
 80025ce:	2f00      	cmp	r7, #0
 80025d0:	d0a9      	beq.n	8002526 <__sflush_r+0x1a>
 80025d2:	0793      	lsls	r3, r2, #30
 80025d4:	680e      	ldr	r6, [r1, #0]
 80025d6:	bf08      	it	eq
 80025d8:	694b      	ldreq	r3, [r1, #20]
 80025da:	600f      	str	r7, [r1, #0]
 80025dc:	bf18      	it	ne
 80025de:	2300      	movne	r3, #0
 80025e0:	eba6 0807 	sub.w	r8, r6, r7
 80025e4:	608b      	str	r3, [r1, #8]
 80025e6:	f1b8 0f00 	cmp.w	r8, #0
 80025ea:	dd9c      	ble.n	8002526 <__sflush_r+0x1a>
 80025ec:	6a21      	ldr	r1, [r4, #32]
 80025ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80025f0:	4643      	mov	r3, r8
 80025f2:	463a      	mov	r2, r7
 80025f4:	4628      	mov	r0, r5
 80025f6:	47b0      	blx	r6
 80025f8:	2800      	cmp	r0, #0
 80025fa:	dc06      	bgt.n	800260a <__sflush_r+0xfe>
 80025fc:	89a3      	ldrh	r3, [r4, #12]
 80025fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002602:	81a3      	strh	r3, [r4, #12]
 8002604:	f04f 30ff 	mov.w	r0, #4294967295
 8002608:	e78e      	b.n	8002528 <__sflush_r+0x1c>
 800260a:	4407      	add	r7, r0
 800260c:	eba8 0800 	sub.w	r8, r8, r0
 8002610:	e7e9      	b.n	80025e6 <__sflush_r+0xda>
 8002612:	bf00      	nop
 8002614:	dfbffffe 	.word	0xdfbffffe

08002618 <_fflush_r>:
 8002618:	b538      	push	{r3, r4, r5, lr}
 800261a:	690b      	ldr	r3, [r1, #16]
 800261c:	4605      	mov	r5, r0
 800261e:	460c      	mov	r4, r1
 8002620:	b913      	cbnz	r3, 8002628 <_fflush_r+0x10>
 8002622:	2500      	movs	r5, #0
 8002624:	4628      	mov	r0, r5
 8002626:	bd38      	pop	{r3, r4, r5, pc}
 8002628:	b118      	cbz	r0, 8002632 <_fflush_r+0x1a>
 800262a:	6a03      	ldr	r3, [r0, #32]
 800262c:	b90b      	cbnz	r3, 8002632 <_fflush_r+0x1a>
 800262e:	f7ff fc8f 	bl	8001f50 <__sinit>
 8002632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f3      	beq.n	8002622 <_fflush_r+0xa>
 800263a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800263c:	07d0      	lsls	r0, r2, #31
 800263e:	d404      	bmi.n	800264a <_fflush_r+0x32>
 8002640:	0599      	lsls	r1, r3, #22
 8002642:	d402      	bmi.n	800264a <_fflush_r+0x32>
 8002644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002646:	f7ff fe66 	bl	8002316 <__retarget_lock_acquire_recursive>
 800264a:	4628      	mov	r0, r5
 800264c:	4621      	mov	r1, r4
 800264e:	f7ff ff5d 	bl	800250c <__sflush_r>
 8002652:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002654:	07da      	lsls	r2, r3, #31
 8002656:	4605      	mov	r5, r0
 8002658:	d4e4      	bmi.n	8002624 <_fflush_r+0xc>
 800265a:	89a3      	ldrh	r3, [r4, #12]
 800265c:	059b      	lsls	r3, r3, #22
 800265e:	d4e1      	bmi.n	8002624 <_fflush_r+0xc>
 8002660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002662:	f7ff fe59 	bl	8002318 <__retarget_lock_release_recursive>
 8002666:	e7dd      	b.n	8002624 <_fflush_r+0xc>

08002668 <__swhatbuf_r>:
 8002668:	b570      	push	{r4, r5, r6, lr}
 800266a:	460c      	mov	r4, r1
 800266c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002670:	2900      	cmp	r1, #0
 8002672:	b096      	sub	sp, #88	; 0x58
 8002674:	4615      	mov	r5, r2
 8002676:	461e      	mov	r6, r3
 8002678:	da0d      	bge.n	8002696 <__swhatbuf_r+0x2e>
 800267a:	89a3      	ldrh	r3, [r4, #12]
 800267c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002680:	f04f 0100 	mov.w	r1, #0
 8002684:	bf0c      	ite	eq
 8002686:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800268a:	2340      	movne	r3, #64	; 0x40
 800268c:	2000      	movs	r0, #0
 800268e:	6031      	str	r1, [r6, #0]
 8002690:	602b      	str	r3, [r5, #0]
 8002692:	b016      	add	sp, #88	; 0x58
 8002694:	bd70      	pop	{r4, r5, r6, pc}
 8002696:	466a      	mov	r2, sp
 8002698:	f000 f848 	bl	800272c <_fstat_r>
 800269c:	2800      	cmp	r0, #0
 800269e:	dbec      	blt.n	800267a <__swhatbuf_r+0x12>
 80026a0:	9901      	ldr	r1, [sp, #4]
 80026a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80026a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80026aa:	4259      	negs	r1, r3
 80026ac:	4159      	adcs	r1, r3
 80026ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026b2:	e7eb      	b.n	800268c <__swhatbuf_r+0x24>

080026b4 <__smakebuf_r>:
 80026b4:	898b      	ldrh	r3, [r1, #12]
 80026b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80026b8:	079d      	lsls	r5, r3, #30
 80026ba:	4606      	mov	r6, r0
 80026bc:	460c      	mov	r4, r1
 80026be:	d507      	bpl.n	80026d0 <__smakebuf_r+0x1c>
 80026c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80026c4:	6023      	str	r3, [r4, #0]
 80026c6:	6123      	str	r3, [r4, #16]
 80026c8:	2301      	movs	r3, #1
 80026ca:	6163      	str	r3, [r4, #20]
 80026cc:	b002      	add	sp, #8
 80026ce:	bd70      	pop	{r4, r5, r6, pc}
 80026d0:	ab01      	add	r3, sp, #4
 80026d2:	466a      	mov	r2, sp
 80026d4:	f7ff ffc8 	bl	8002668 <__swhatbuf_r>
 80026d8:	9900      	ldr	r1, [sp, #0]
 80026da:	4605      	mov	r5, r0
 80026dc:	4630      	mov	r0, r6
 80026de:	f7ff fe89 	bl	80023f4 <_malloc_r>
 80026e2:	b948      	cbnz	r0, 80026f8 <__smakebuf_r+0x44>
 80026e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026e8:	059a      	lsls	r2, r3, #22
 80026ea:	d4ef      	bmi.n	80026cc <__smakebuf_r+0x18>
 80026ec:	f023 0303 	bic.w	r3, r3, #3
 80026f0:	f043 0302 	orr.w	r3, r3, #2
 80026f4:	81a3      	strh	r3, [r4, #12]
 80026f6:	e7e3      	b.n	80026c0 <__smakebuf_r+0xc>
 80026f8:	89a3      	ldrh	r3, [r4, #12]
 80026fa:	6020      	str	r0, [r4, #0]
 80026fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002700:	81a3      	strh	r3, [r4, #12]
 8002702:	9b00      	ldr	r3, [sp, #0]
 8002704:	6163      	str	r3, [r4, #20]
 8002706:	9b01      	ldr	r3, [sp, #4]
 8002708:	6120      	str	r0, [r4, #16]
 800270a:	b15b      	cbz	r3, 8002724 <__smakebuf_r+0x70>
 800270c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002710:	4630      	mov	r0, r6
 8002712:	f000 f81d 	bl	8002750 <_isatty_r>
 8002716:	b128      	cbz	r0, 8002724 <__smakebuf_r+0x70>
 8002718:	89a3      	ldrh	r3, [r4, #12]
 800271a:	f023 0303 	bic.w	r3, r3, #3
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	81a3      	strh	r3, [r4, #12]
 8002724:	89a3      	ldrh	r3, [r4, #12]
 8002726:	431d      	orrs	r5, r3
 8002728:	81a5      	strh	r5, [r4, #12]
 800272a:	e7cf      	b.n	80026cc <__smakebuf_r+0x18>

0800272c <_fstat_r>:
 800272c:	b538      	push	{r3, r4, r5, lr}
 800272e:	4d07      	ldr	r5, [pc, #28]	; (800274c <_fstat_r+0x20>)
 8002730:	2300      	movs	r3, #0
 8002732:	4604      	mov	r4, r0
 8002734:	4608      	mov	r0, r1
 8002736:	4611      	mov	r1, r2
 8002738:	602b      	str	r3, [r5, #0]
 800273a:	f7fe f8d6 	bl	80008ea <_fstat>
 800273e:	1c43      	adds	r3, r0, #1
 8002740:	d102      	bne.n	8002748 <_fstat_r+0x1c>
 8002742:	682b      	ldr	r3, [r5, #0]
 8002744:	b103      	cbz	r3, 8002748 <_fstat_r+0x1c>
 8002746:	6023      	str	r3, [r4, #0]
 8002748:	bd38      	pop	{r3, r4, r5, pc}
 800274a:	bf00      	nop
 800274c:	20000210 	.word	0x20000210

08002750 <_isatty_r>:
 8002750:	b538      	push	{r3, r4, r5, lr}
 8002752:	4d06      	ldr	r5, [pc, #24]	; (800276c <_isatty_r+0x1c>)
 8002754:	2300      	movs	r3, #0
 8002756:	4604      	mov	r4, r0
 8002758:	4608      	mov	r0, r1
 800275a:	602b      	str	r3, [r5, #0]
 800275c:	f7fe f8d5 	bl	800090a <_isatty>
 8002760:	1c43      	adds	r3, r0, #1
 8002762:	d102      	bne.n	800276a <_isatty_r+0x1a>
 8002764:	682b      	ldr	r3, [r5, #0]
 8002766:	b103      	cbz	r3, 800276a <_isatty_r+0x1a>
 8002768:	6023      	str	r3, [r4, #0]
 800276a:	bd38      	pop	{r3, r4, r5, pc}
 800276c:	20000210 	.word	0x20000210

08002770 <_sbrk_r>:
 8002770:	b538      	push	{r3, r4, r5, lr}
 8002772:	4d06      	ldr	r5, [pc, #24]	; (800278c <_sbrk_r+0x1c>)
 8002774:	2300      	movs	r3, #0
 8002776:	4604      	mov	r4, r0
 8002778:	4608      	mov	r0, r1
 800277a:	602b      	str	r3, [r5, #0]
 800277c:	f7fe f8de 	bl	800093c <_sbrk>
 8002780:	1c43      	adds	r3, r0, #1
 8002782:	d102      	bne.n	800278a <_sbrk_r+0x1a>
 8002784:	682b      	ldr	r3, [r5, #0]
 8002786:	b103      	cbz	r3, 800278a <_sbrk_r+0x1a>
 8002788:	6023      	str	r3, [r4, #0]
 800278a:	bd38      	pop	{r3, r4, r5, pc}
 800278c:	20000210 	.word	0x20000210

08002790 <_init>:
 8002790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002792:	bf00      	nop
 8002794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002796:	bc08      	pop	{r3}
 8002798:	469e      	mov	lr, r3
 800279a:	4770      	bx	lr

0800279c <_fini>:
 800279c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800279e:	bf00      	nop
 80027a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027a2:	bc08      	pop	{r3}
 80027a4:	469e      	mov	lr, r3
 80027a6:	4770      	bx	lr
