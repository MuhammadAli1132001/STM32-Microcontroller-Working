
Adc_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ad8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004c78  08004c78  00014c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cd8  08004cd8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004cd8  08004cd8  00014cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ce0  08004ce0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ce0  08004ce0  00014ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ce4  08004ce4  00014ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000005c  08004d44  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08004d44  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bcf9  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f6a  00000000  00000000  0002bdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a0  00000000  00000000  0002dd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000761  00000000  00000000  0002e6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016dfb  00000000  00000000  0002ee39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d1a2  00000000  00000000  00045c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094ca4  00000000  00000000  00052dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002cc0  00000000  00000000  000e7a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000ea73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004c60 	.word	0x08004c60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004c60 	.word	0x08004c60

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b970 	b.w	8000dc4 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9e08      	ldr	r6, [sp, #32]
 8000b02:	460d      	mov	r5, r1
 8000b04:	4604      	mov	r4, r0
 8000b06:	460f      	mov	r7, r1
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d14a      	bne.n	8000ba2 <__udivmoddi4+0xa6>
 8000b0c:	428a      	cmp	r2, r1
 8000b0e:	4694      	mov	ip, r2
 8000b10:	d965      	bls.n	8000bde <__udivmoddi4+0xe2>
 8000b12:	fab2 f382 	clz	r3, r2
 8000b16:	b143      	cbz	r3, 8000b2a <__udivmoddi4+0x2e>
 8000b18:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b1c:	f1c3 0220 	rsb	r2, r3, #32
 8000b20:	409f      	lsls	r7, r3
 8000b22:	fa20 f202 	lsr.w	r2, r0, r2
 8000b26:	4317      	orrs	r7, r2
 8000b28:	409c      	lsls	r4, r3
 8000b2a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b2e:	fa1f f58c 	uxth.w	r5, ip
 8000b32:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b36:	0c22      	lsrs	r2, r4, #16
 8000b38:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b3c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b40:	fb01 f005 	mul.w	r0, r1, r5
 8000b44:	4290      	cmp	r0, r2
 8000b46:	d90a      	bls.n	8000b5e <__udivmoddi4+0x62>
 8000b48:	eb1c 0202 	adds.w	r2, ip, r2
 8000b4c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b50:	f080 811c 	bcs.w	8000d8c <__udivmoddi4+0x290>
 8000b54:	4290      	cmp	r0, r2
 8000b56:	f240 8119 	bls.w	8000d8c <__udivmoddi4+0x290>
 8000b5a:	3902      	subs	r1, #2
 8000b5c:	4462      	add	r2, ip
 8000b5e:	1a12      	subs	r2, r2, r0
 8000b60:	b2a4      	uxth	r4, r4
 8000b62:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b66:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b6a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b6e:	fb00 f505 	mul.w	r5, r0, r5
 8000b72:	42a5      	cmp	r5, r4
 8000b74:	d90a      	bls.n	8000b8c <__udivmoddi4+0x90>
 8000b76:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b7e:	f080 8107 	bcs.w	8000d90 <__udivmoddi4+0x294>
 8000b82:	42a5      	cmp	r5, r4
 8000b84:	f240 8104 	bls.w	8000d90 <__udivmoddi4+0x294>
 8000b88:	4464      	add	r4, ip
 8000b8a:	3802      	subs	r0, #2
 8000b8c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b90:	1b64      	subs	r4, r4, r5
 8000b92:	2100      	movs	r1, #0
 8000b94:	b11e      	cbz	r6, 8000b9e <__udivmoddi4+0xa2>
 8000b96:	40dc      	lsrs	r4, r3
 8000b98:	2300      	movs	r3, #0
 8000b9a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0xbc>
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	f000 80ed 	beq.w	8000d86 <__udivmoddi4+0x28a>
 8000bac:	2100      	movs	r1, #0
 8000bae:	e9c6 0500 	strd	r0, r5, [r6]
 8000bb2:	4608      	mov	r0, r1
 8000bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb8:	fab3 f183 	clz	r1, r3
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	d149      	bne.n	8000c54 <__udivmoddi4+0x158>
 8000bc0:	42ab      	cmp	r3, r5
 8000bc2:	d302      	bcc.n	8000bca <__udivmoddi4+0xce>
 8000bc4:	4282      	cmp	r2, r0
 8000bc6:	f200 80f8 	bhi.w	8000dba <__udivmoddi4+0x2be>
 8000bca:	1a84      	subs	r4, r0, r2
 8000bcc:	eb65 0203 	sbc.w	r2, r5, r3
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	d0e2      	beq.n	8000b9e <__udivmoddi4+0xa2>
 8000bd8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bdc:	e7df      	b.n	8000b9e <__udivmoddi4+0xa2>
 8000bde:	b902      	cbnz	r2, 8000be2 <__udivmoddi4+0xe6>
 8000be0:	deff      	udf	#255	; 0xff
 8000be2:	fab2 f382 	clz	r3, r2
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f040 8090 	bne.w	8000d0c <__udivmoddi4+0x210>
 8000bec:	1a8a      	subs	r2, r1, r2
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f fe8c 	uxth.w	lr, ip
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bfc:	fb07 2015 	mls	r0, r7, r5, r2
 8000c00:	0c22      	lsrs	r2, r4, #16
 8000c02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c06:	fb0e f005 	mul.w	r0, lr, r5
 8000c0a:	4290      	cmp	r0, r2
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x124>
 8000c0e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c12:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x122>
 8000c18:	4290      	cmp	r0, r2
 8000c1a:	f200 80cb 	bhi.w	8000db4 <__udivmoddi4+0x2b8>
 8000c1e:	4645      	mov	r5, r8
 8000c20:	1a12      	subs	r2, r2, r0
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c28:	fb07 2210 	mls	r2, r7, r0, r2
 8000c2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c30:	fb0e fe00 	mul.w	lr, lr, r0
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x14e>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x14c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f200 80bb 	bhi.w	8000dbe <__udivmoddi4+0x2c2>
 8000c48:	4610      	mov	r0, r2
 8000c4a:	eba4 040e 	sub.w	r4, r4, lr
 8000c4e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c52:	e79f      	b.n	8000b94 <__udivmoddi4+0x98>
 8000c54:	f1c1 0720 	rsb	r7, r1, #32
 8000c58:	408b      	lsls	r3, r1
 8000c5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c62:	fa05 f401 	lsl.w	r4, r5, r1
 8000c66:	fa20 f307 	lsr.w	r3, r0, r7
 8000c6a:	40fd      	lsrs	r5, r7
 8000c6c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c70:	4323      	orrs	r3, r4
 8000c72:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c76:	fa1f fe8c 	uxth.w	lr, ip
 8000c7a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c7e:	0c1c      	lsrs	r4, r3, #16
 8000c80:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c84:	fb08 f50e 	mul.w	r5, r8, lr
 8000c88:	42a5      	cmp	r5, r4
 8000c8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c8e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c92:	d90b      	bls.n	8000cac <__udivmoddi4+0x1b0>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c9c:	f080 8088 	bcs.w	8000db0 <__udivmoddi4+0x2b4>
 8000ca0:	42a5      	cmp	r5, r4
 8000ca2:	f240 8085 	bls.w	8000db0 <__udivmoddi4+0x2b4>
 8000ca6:	f1a8 0802 	sub.w	r8, r8, #2
 8000caa:	4464      	add	r4, ip
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	b29d      	uxth	r5, r3
 8000cb0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cb4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cb8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cbc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x1da>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ccc:	d26c      	bcs.n	8000da8 <__udivmoddi4+0x2ac>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	d96a      	bls.n	8000da8 <__udivmoddi4+0x2ac>
 8000cd2:	3b02      	subs	r3, #2
 8000cd4:	4464      	add	r4, ip
 8000cd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cda:	fba3 9502 	umull	r9, r5, r3, r2
 8000cde:	eba4 040e 	sub.w	r4, r4, lr
 8000ce2:	42ac      	cmp	r4, r5
 8000ce4:	46c8      	mov	r8, r9
 8000ce6:	46ae      	mov	lr, r5
 8000ce8:	d356      	bcc.n	8000d98 <__udivmoddi4+0x29c>
 8000cea:	d053      	beq.n	8000d94 <__udivmoddi4+0x298>
 8000cec:	b156      	cbz	r6, 8000d04 <__udivmoddi4+0x208>
 8000cee:	ebb0 0208 	subs.w	r2, r0, r8
 8000cf2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cf6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cfa:	40ca      	lsrs	r2, r1
 8000cfc:	40cc      	lsrs	r4, r1
 8000cfe:	4317      	orrs	r7, r2
 8000d00:	e9c6 7400 	strd	r7, r4, [r6]
 8000d04:	4618      	mov	r0, r3
 8000d06:	2100      	movs	r1, #0
 8000d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0c:	f1c3 0120 	rsb	r1, r3, #32
 8000d10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d14:	fa20 f201 	lsr.w	r2, r0, r1
 8000d18:	fa25 f101 	lsr.w	r1, r5, r1
 8000d1c:	409d      	lsls	r5, r3
 8000d1e:	432a      	orrs	r2, r5
 8000d20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d24:	fa1f fe8c 	uxth.w	lr, ip
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d30:	0c11      	lsrs	r1, r2, #16
 8000d32:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d36:	fb00 f50e 	mul.w	r5, r0, lr
 8000d3a:	428d      	cmp	r5, r1
 8000d3c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x258>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d4a:	d22f      	bcs.n	8000dac <__udivmoddi4+0x2b0>
 8000d4c:	428d      	cmp	r5, r1
 8000d4e:	d92d      	bls.n	8000dac <__udivmoddi4+0x2b0>
 8000d50:	3802      	subs	r0, #2
 8000d52:	4461      	add	r1, ip
 8000d54:	1b49      	subs	r1, r1, r5
 8000d56:	b292      	uxth	r2, r2
 8000d58:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d5c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d64:	fb05 f10e 	mul.w	r1, r5, lr
 8000d68:	4291      	cmp	r1, r2
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x282>
 8000d6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d70:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d74:	d216      	bcs.n	8000da4 <__udivmoddi4+0x2a8>
 8000d76:	4291      	cmp	r1, r2
 8000d78:	d914      	bls.n	8000da4 <__udivmoddi4+0x2a8>
 8000d7a:	3d02      	subs	r5, #2
 8000d7c:	4462      	add	r2, ip
 8000d7e:	1a52      	subs	r2, r2, r1
 8000d80:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d84:	e738      	b.n	8000bf8 <__udivmoddi4+0xfc>
 8000d86:	4631      	mov	r1, r6
 8000d88:	4630      	mov	r0, r6
 8000d8a:	e708      	b.n	8000b9e <__udivmoddi4+0xa2>
 8000d8c:	4639      	mov	r1, r7
 8000d8e:	e6e6      	b.n	8000b5e <__udivmoddi4+0x62>
 8000d90:	4610      	mov	r0, r2
 8000d92:	e6fb      	b.n	8000b8c <__udivmoddi4+0x90>
 8000d94:	4548      	cmp	r0, r9
 8000d96:	d2a9      	bcs.n	8000cec <__udivmoddi4+0x1f0>
 8000d98:	ebb9 0802 	subs.w	r8, r9, r2
 8000d9c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000da0:	3b01      	subs	r3, #1
 8000da2:	e7a3      	b.n	8000cec <__udivmoddi4+0x1f0>
 8000da4:	4645      	mov	r5, r8
 8000da6:	e7ea      	b.n	8000d7e <__udivmoddi4+0x282>
 8000da8:	462b      	mov	r3, r5
 8000daa:	e794      	b.n	8000cd6 <__udivmoddi4+0x1da>
 8000dac:	4640      	mov	r0, r8
 8000dae:	e7d1      	b.n	8000d54 <__udivmoddi4+0x258>
 8000db0:	46d0      	mov	r8, sl
 8000db2:	e77b      	b.n	8000cac <__udivmoddi4+0x1b0>
 8000db4:	3d02      	subs	r5, #2
 8000db6:	4462      	add	r2, ip
 8000db8:	e732      	b.n	8000c20 <__udivmoddi4+0x124>
 8000dba:	4608      	mov	r0, r1
 8000dbc:	e70a      	b.n	8000bd4 <__udivmoddi4+0xd8>
 8000dbe:	4464      	add	r4, ip
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	e742      	b.n	8000c4a <__udivmoddi4+0x14e>

08000dc4 <__aeabi_idiv0>:
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop

08000dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dcc:	f000 fb78 	bl	80014c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd0:	f000 f870 	bl	8000eb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd4:	f000 f97e 	bl	80010d4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000dd8:	f000 f8d8 	bl	8000f8c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000ddc:	f000 f950 	bl	8001080 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000de0:	f000 f928 	bl	8001034 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000de4:	482c      	ldr	r0, [pc, #176]	; (8000e98 <main+0xd0>)
 8000de6:	f000 fc45 	bl	8001674 <HAL_ADC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000dea:	2120      	movs	r1, #32
 8000dec:	482b      	ldr	r0, [pc, #172]	; (8000e9c <main+0xd4>)
 8000dee:	f001 fc24 	bl	800263a <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8000df2:	20c8      	movs	r0, #200	; 0xc8
 8000df4:	f000 fbd6 	bl	80015a4 <HAL_Delay>

	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000df8:	2140      	movs	r1, #64	; 0x40
 8000dfa:	4828      	ldr	r0, [pc, #160]	; (8000e9c <main+0xd4>)
 8000dfc:	f001 fc1d 	bl	800263a <HAL_GPIO_TogglePin>


	  HAL_ADC_Start(&hadc1);
 8000e00:	4825      	ldr	r0, [pc, #148]	; (8000e98 <main+0xd0>)
 8000e02:	f000 fc37 	bl	8001674 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10000);
 8000e06:	f242 7110 	movw	r1, #10000	; 0x2710
 8000e0a:	4823      	ldr	r0, [pc, #140]	; (8000e98 <main+0xd0>)
 8000e0c:	f000 fce6 	bl	80017dc <HAL_ADC_PollForConversion>

	  adcvalue = HAL_ADC_GetValue(&hadc1);
 8000e10:	4821      	ldr	r0, [pc, #132]	; (8000e98 <main+0xd0>)
 8000e12:	f000 fe7e 	bl	8001b12 <HAL_ADC_GetValue>
 8000e16:	4603      	mov	r3, r0
 8000e18:	4a21      	ldr	r2, [pc, #132]	; (8000ea0 <main+0xd8>)
 8000e1a:	6013      	str	r3, [r2, #0]
	  adcvoltage = (adcvalue * 3.3) / 4096;
 8000e1c:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <main+0xd8>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fb77 	bl	8000514 <__aeabi_ui2d>
 8000e26:	a31a      	add	r3, pc, #104	; (adr r3, 8000e90 <main+0xc8>)
 8000e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2c:	f7ff fbec 	bl	8000608 <__aeabi_dmul>
 8000e30:	4602      	mov	r2, r0
 8000e32:	460b      	mov	r3, r1
 8000e34:	4610      	mov	r0, r2
 8000e36:	4619      	mov	r1, r3
 8000e38:	f04f 0200 	mov.w	r2, #0
 8000e3c:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <main+0xdc>)
 8000e3e:	f7ff fd0d 	bl	800085c <__aeabi_ddiv>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	4610      	mov	r0, r2
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f7ff fdef 	bl	8000a2c <__aeabi_d2f>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	4a15      	ldr	r2, [pc, #84]	; (8000ea8 <main+0xe0>)
 8000e52:	6013      	str	r3, [r2, #0]

	  sprintf(msg, "ADC value = %hu\r\n", adcvoltage);
 8000e54:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <main+0xe0>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fb7d 	bl	8000558 <__aeabi_f2d>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	460b      	mov	r3, r1
 8000e62:	4912      	ldr	r1, [pc, #72]	; (8000eac <main+0xe4>)
 8000e64:	4812      	ldr	r0, [pc, #72]	; (8000eb0 <main+0xe8>)
 8000e66:	f003 fa57 	bl	8004318 <siprintf>
	  HAL_UART_Transmit(&hadc1, (uint8_t*)msg, strlen(msg), 10000);
 8000e6a:	4811      	ldr	r0, [pc, #68]	; (8000eb0 <main+0xe8>)
 8000e6c:	f7ff f9b8 	bl	80001e0 <strlen>
 8000e70:	4603      	mov	r3, r0
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	f242 7310 	movw	r3, #10000	; 0x2710
 8000e78:	490d      	ldr	r1, [pc, #52]	; (8000eb0 <main+0xe8>)
 8000e7a:	4807      	ldr	r0, [pc, #28]	; (8000e98 <main+0xd0>)
 8000e7c:	f002 fa85 	bl	800338a <HAL_UART_Transmit>
	  HAL_Delay(5000);
 8000e80:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e84:	f000 fb8e 	bl	80015a4 <HAL_Delay>
  {
 8000e88:	e7af      	b.n	8000dea <main+0x22>
 8000e8a:	bf00      	nop
 8000e8c:	f3af 8000 	nop.w
 8000e90:	66666666 	.word	0x66666666
 8000e94:	400a6666 	.word	0x400a6666
 8000e98:	20000078 	.word	0x20000078
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	20000124 	.word	0x20000124
 8000ea4:	40b00000 	.word	0x40b00000
 8000ea8:	20000128 	.word	0x20000128
 8000eac:	08004c78 	.word	0x08004c78
 8000eb0:	2000012c 	.word	0x2000012c

08000eb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b094      	sub	sp, #80	; 0x50
 8000eb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eba:	f107 0320 	add.w	r3, r7, #32
 8000ebe:	2230      	movs	r2, #48	; 0x30
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f003 fa48 	bl	8004358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	4b29      	ldr	r3, [pc, #164]	; (8000f84 <SystemClock_Config+0xd0>)
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	4a28      	ldr	r2, [pc, #160]	; (8000f84 <SystemClock_Config+0xd0>)
 8000ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee8:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <SystemClock_Config+0xd0>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	4b23      	ldr	r3, [pc, #140]	; (8000f88 <SystemClock_Config+0xd4>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f00:	4a21      	ldr	r2, [pc, #132]	; (8000f88 <SystemClock_Config+0xd4>)
 8000f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <SystemClock_Config+0xd4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000f14:	230a      	movs	r3, #10
 8000f16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f1c:	2310      	movs	r3, #16
 8000f1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f20:	2301      	movs	r3, #1
 8000f22:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f24:	2302      	movs	r3, #2
 8000f26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f2c:	2308      	movs	r3, #8
 8000f2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000f30:	2348      	movs	r3, #72	; 0x48
 8000f32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f34:	2302      	movs	r3, #2
 8000f36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f38:	2304      	movs	r3, #4
 8000f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3c:	f107 0320 	add.w	r3, r7, #32
 8000f40:	4618      	mov	r0, r3
 8000f42:	f001 fb95 	bl	8002670 <HAL_RCC_OscConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f4c:	f000 f912 	bl	8001174 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f50:	230f      	movs	r3, #15
 8000f52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f54:	2302      	movs	r3, #2
 8000f56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	2102      	movs	r1, #2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f001 fdf7 	bl	8002b60 <HAL_RCC_ClockConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000f78:	f000 f8fc 	bl	8001174 <Error_Handler>
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	3750      	adds	r7, #80	; 0x50
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40007000 	.word	0x40007000

08000f8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f92:	463b      	mov	r3, r7
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f9e:	4b22      	ldr	r3, [pc, #136]	; (8001028 <MX_ADC1_Init+0x9c>)
 8000fa0:	4a22      	ldr	r2, [pc, #136]	; (800102c <MX_ADC1_Init+0xa0>)
 8000fa2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fa4:	4b20      	ldr	r3, [pc, #128]	; (8001028 <MX_ADC1_Init+0x9c>)
 8000fa6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000faa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000fac:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <MX_ADC1_Init+0x9c>)
 8000fae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000fb2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fb4:	4b1c      	ldr	r3, [pc, #112]	; (8001028 <MX_ADC1_Init+0x9c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fba:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <MX_ADC1_Init+0x9c>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fc0:	4b19      	ldr	r3, [pc, #100]	; (8001028 <MX_ADC1_Init+0x9c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc8:	4b17      	ldr	r3, [pc, #92]	; (8001028 <MX_ADC1_Init+0x9c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fce:	4b16      	ldr	r3, [pc, #88]	; (8001028 <MX_ADC1_Init+0x9c>)
 8000fd0:	4a17      	ldr	r2, [pc, #92]	; (8001030 <MX_ADC1_Init+0xa4>)
 8000fd2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fd4:	4b14      	ldr	r3, [pc, #80]	; (8001028 <MX_ADC1_Init+0x9c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fda:	4b13      	ldr	r3, [pc, #76]	; (8001028 <MX_ADC1_Init+0x9c>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <MX_ADC1_Init+0x9c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_ADC1_Init+0x9c>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fee:	480e      	ldr	r0, [pc, #56]	; (8001028 <MX_ADC1_Init+0x9c>)
 8000ff0:	f000 fafc 	bl	80015ec <HAL_ADC_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000ffa:	f000 f8bb 	bl	8001174 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001002:	2301      	movs	r3, #1
 8001004:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800100a:	463b      	mov	r3, r7
 800100c:	4619      	mov	r1, r3
 800100e:	4806      	ldr	r0, [pc, #24]	; (8001028 <MX_ADC1_Init+0x9c>)
 8001010:	f000 fdaa 	bl	8001b68 <HAL_ADC_ConfigChannel>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800101a:	f000 f8ab 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000078 	.word	0x20000078
 800102c:	40012000 	.word	0x40012000
 8001030:	0f000001 	.word	0x0f000001

08001034 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <MX_RTC_Init+0x44>)
 800103a:	4a10      	ldr	r2, [pc, #64]	; (800107c <MX_RTC_Init+0x48>)
 800103c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <MX_RTC_Init+0x44>)
 8001040:	2200      	movs	r2, #0
 8001042:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <MX_RTC_Init+0x44>)
 8001046:	227f      	movs	r2, #127	; 0x7f
 8001048:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <MX_RTC_Init+0x44>)
 800104c:	22ff      	movs	r2, #255	; 0xff
 800104e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001050:	4b09      	ldr	r3, [pc, #36]	; (8001078 <MX_RTC_Init+0x44>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <MX_RTC_Init+0x44>)
 8001058:	2200      	movs	r2, #0
 800105a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <MX_RTC_Init+0x44>)
 800105e:	2200      	movs	r2, #0
 8001060:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_RTC_Init+0x44>)
 8001064:	f002 f84a 	bl	80030fc <HAL_RTC_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800106e:	f000 f881 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200000c0 	.word	0x200000c0
 800107c:	40002800 	.word	0x40002800

08001080 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_USART1_UART_Init+0x4c>)
 8001086:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <MX_USART1_UART_Init+0x50>)
 8001088:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <MX_USART1_UART_Init+0x4c>)
 800108c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001090:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <MX_USART1_UART_Init+0x4c>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <MX_USART1_UART_Init+0x4c>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <MX_USART1_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <MX_USART1_UART_Init+0x4c>)
 80010a6:	220c      	movs	r2, #12
 80010a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <MX_USART1_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <MX_USART1_UART_Init+0x4c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <MX_USART1_UART_Init+0x4c>)
 80010b8:	f002 f91a 	bl	80032f0 <HAL_UART_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010c2:	f000 f857 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200000e0 	.word	0x200000e0
 80010d0:	40011000 	.word	0x40011000

080010d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	f107 030c 	add.w	r3, r7, #12
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	4b1f      	ldr	r3, [pc, #124]	; (800116c <MX_GPIO_Init+0x98>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a1e      	ldr	r2, [pc, #120]	; (800116c <MX_GPIO_Init+0x98>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b1c      	ldr	r3, [pc, #112]	; (800116c <MX_GPIO_Init+0x98>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	4b18      	ldr	r3, [pc, #96]	; (800116c <MX_GPIO_Init+0x98>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a17      	ldr	r2, [pc, #92]	; (800116c <MX_GPIO_Init+0x98>)
 8001110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <MX_GPIO_Init+0x98>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <MX_GPIO_Init+0x98>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a10      	ldr	r2, [pc, #64]	; (800116c <MX_GPIO_Init+0x98>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_GPIO_Init+0x98>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	2160      	movs	r1, #96	; 0x60
 8001142:	480b      	ldr	r0, [pc, #44]	; (8001170 <MX_GPIO_Init+0x9c>)
 8001144:	f001 fa60 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001148:	2360      	movs	r3, #96	; 0x60
 800114a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114c:	2301      	movs	r3, #1
 800114e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	4619      	mov	r1, r3
 800115e:	4804      	ldr	r0, [pc, #16]	; (8001170 <MX_GPIO_Init+0x9c>)
 8001160:	f001 f8ce 	bl	8002300 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001164:	bf00      	nop
 8001166:	3720      	adds	r7, #32
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40023800 	.word	0x40023800
 8001170:	40020000 	.word	0x40020000

08001174 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001178:	b672      	cpsid	i
}
 800117a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800117c:	e7fe      	b.n	800117c <Error_Handler+0x8>
	...

08001180 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <HAL_MspInit+0x4c>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	4a0f      	ldr	r2, [pc, #60]	; (80011cc <HAL_MspInit+0x4c>)
 8001190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001194:	6453      	str	r3, [r2, #68]	; 0x44
 8001196:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <HAL_MspInit+0x4c>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_MspInit+0x4c>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	4a08      	ldr	r2, [pc, #32]	; (80011cc <HAL_MspInit+0x4c>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b0:	6413      	str	r3, [r2, #64]	; 0x40
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_MspInit+0x4c>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800

080011d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a1b      	ldr	r2, [pc, #108]	; (800125c <HAL_ADC_MspInit+0x8c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d12f      	bne.n	8001252 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <HAL_ADC_MspInit+0x90>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	4a19      	ldr	r2, [pc, #100]	; (8001260 <HAL_ADC_MspInit+0x90>)
 80011fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001200:	6453      	str	r3, [r2, #68]	; 0x44
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <HAL_ADC_MspInit+0x90>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <HAL_ADC_MspInit+0x90>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a12      	ldr	r2, [pc, #72]	; (8001260 <HAL_ADC_MspInit+0x90>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <HAL_ADC_MspInit+0x90>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800122a:	2301      	movs	r3, #1
 800122c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122e:	2303      	movs	r3, #3
 8001230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	4809      	ldr	r0, [pc, #36]	; (8001264 <HAL_ADC_MspInit+0x94>)
 800123e:	f001 f85f 	bl	8002300 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	2012      	movs	r0, #18
 8001248:	f000 ff91 	bl	800216e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800124c:	2012      	movs	r0, #18
 800124e:	f000 ffaa 	bl	80021a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	; 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40012000 	.word	0x40012000
 8001260:	40023800 	.word	0x40023800
 8001264:	40020000 	.word	0x40020000

08001268 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0c      	ldr	r2, [pc, #48]	; (80012b8 <HAL_RTC_MspInit+0x50>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d111      	bne.n	80012ae <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800128a:	2302      	movs	r3, #2
 800128c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800128e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001292:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	4618      	mov	r0, r3
 800129a:	f001 fe41 	bl	8002f20 <HAL_RCCEx_PeriphCLKConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80012a4:	f7ff ff66 	bl	8001174 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012a8:	4b04      	ldr	r3, [pc, #16]	; (80012bc <HAL_RTC_MspInit+0x54>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80012ae:	bf00      	nop
 80012b0:	3720      	adds	r7, #32
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40002800 	.word	0x40002800
 80012bc:	42470e3c 	.word	0x42470e3c

080012c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a1d      	ldr	r2, [pc, #116]	; (8001354 <HAL_UART_MspInit+0x94>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d134      	bne.n	800134c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <HAL_UART_MspInit+0x98>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	4a1b      	ldr	r2, [pc, #108]	; (8001358 <HAL_UART_MspInit+0x98>)
 80012ec:	f043 0310 	orr.w	r3, r3, #16
 80012f0:	6453      	str	r3, [r2, #68]	; 0x44
 80012f2:	4b19      	ldr	r3, [pc, #100]	; (8001358 <HAL_UART_MspInit+0x98>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	f003 0310 	and.w	r3, r3, #16
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <HAL_UART_MspInit+0x98>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a14      	ldr	r2, [pc, #80]	; (8001358 <HAL_UART_MspInit+0x98>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_UART_MspInit+0x98>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800131a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800131e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001328:	2303      	movs	r3, #3
 800132a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800132c:	2307      	movs	r3, #7
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	4619      	mov	r1, r3
 8001336:	4809      	ldr	r0, [pc, #36]	; (800135c <HAL_UART_MspInit+0x9c>)
 8001338:	f000 ffe2 	bl	8002300 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800133c:	2200      	movs	r2, #0
 800133e:	2100      	movs	r1, #0
 8001340:	2025      	movs	r0, #37	; 0x25
 8001342:	f000 ff14 	bl	800216e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001346:	2025      	movs	r0, #37	; 0x25
 8001348:	f000 ff2d 	bl	80021a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800134c:	bf00      	nop
 800134e:	3728      	adds	r7, #40	; 0x28
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40011000 	.word	0x40011000
 8001358:	40023800 	.word	0x40023800
 800135c:	40020000 	.word	0x40020000

08001360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <NMI_Handler+0x4>

08001366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <HardFault_Handler+0x4>

0800136c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <MemManage_Handler+0x4>

08001372 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <BusFault_Handler+0x4>

08001378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <UsageFault_Handler+0x4>

0800137e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ac:	f000 f8da 	bl	8001564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <ADC_IRQHandler+0x10>)
 80013ba:	f000 fa9a 	bl	80018f2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000078 	.word	0x20000078

080013c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <USART1_IRQHandler+0x10>)
 80013ce:	f002 f86f 	bl	80034b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200000e0 	.word	0x200000e0

080013dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e4:	4a14      	ldr	r2, [pc, #80]	; (8001438 <_sbrk+0x5c>)
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <_sbrk+0x60>)
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <_sbrk+0x64>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d102      	bne.n	80013fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <_sbrk+0x64>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	; (8001444 <_sbrk+0x68>)
 80013fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	429a      	cmp	r2, r3
 800140a:	d207      	bcs.n	800141c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800140c:	f002 ffac 	bl	8004368 <__errno>
 8001410:	4603      	mov	r3, r0
 8001412:	220c      	movs	r2, #12
 8001414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
 800141a:	e009      	b.n	8001430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <_sbrk+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <_sbrk+0x64>)
 800142c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142e:	68fb      	ldr	r3, [r7, #12]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20018000 	.word	0x20018000
 800143c:	00000400 	.word	0x00000400
 8001440:	20000154 	.word	0x20000154
 8001444:	200002a8 	.word	0x200002a8

08001448 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <SystemInit+0x20>)
 800144e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001452:	4a05      	ldr	r2, [pc, #20]	; (8001468 <SystemInit+0x20>)
 8001454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800146c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001470:	480d      	ldr	r0, [pc, #52]	; (80014a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001472:	490e      	ldr	r1, [pc, #56]	; (80014ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001474:	4a0e      	ldr	r2, [pc, #56]	; (80014b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001478:	e002      	b.n	8001480 <LoopCopyDataInit>

0800147a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800147c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147e:	3304      	adds	r3, #4

08001480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001484:	d3f9      	bcc.n	800147a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001486:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001488:	4c0b      	ldr	r4, [pc, #44]	; (80014b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800148c:	e001      	b.n	8001492 <LoopFillZerobss>

0800148e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001490:	3204      	adds	r2, #4

08001492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001494:	d3fb      	bcc.n	800148e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001496:	f7ff ffd7 	bl	8001448 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800149a:	f002 ff6b 	bl	8004374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800149e:	f7ff fc93 	bl	8000dc8 <main>
  bx  lr    
 80014a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ac:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80014b0:	08004ce8 	.word	0x08004ce8
  ldr r2, =_sbss
 80014b4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80014b8:	200002a4 	.word	0x200002a4

080014bc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014bc:	e7fe      	b.n	80014bc <DMA1_Stream0_IRQHandler>
	...

080014c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014c4:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <HAL_Init+0x40>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0d      	ldr	r2, [pc, #52]	; (8001500 <HAL_Init+0x40>)
 80014ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <HAL_Init+0x40>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <HAL_Init+0x40>)
 80014d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <HAL_Init+0x40>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a07      	ldr	r2, [pc, #28]	; (8001500 <HAL_Init+0x40>)
 80014e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e8:	2003      	movs	r0, #3
 80014ea:	f000 fe35 	bl	8002158 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ee:	200f      	movs	r0, #15
 80014f0:	f000 f808 	bl	8001504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f4:	f7ff fe44 	bl	8001180 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40023c00 	.word	0x40023c00

08001504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_InitTick+0x54>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_InitTick+0x58>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4619      	mov	r1, r3
 8001516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151a:	fbb3 f3f1 	udiv	r3, r3, r1
 800151e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001522:	4618      	mov	r0, r3
 8001524:	f000 fe4d 	bl	80021c2 <HAL_SYSTICK_Config>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e00e      	b.n	8001550 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b0f      	cmp	r3, #15
 8001536:	d80a      	bhi.n	800154e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001538:	2200      	movs	r2, #0
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	f000 fe15 	bl	800216e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001544:	4a06      	ldr	r2, [pc, #24]	; (8001560 <HAL_InitTick+0x5c>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	e000      	b.n	8001550 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000000 	.word	0x20000000
 800155c:	20000008 	.word	0x20000008
 8001560:	20000004 	.word	0x20000004

08001564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_IncTick+0x20>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_IncTick+0x24>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4413      	add	r3, r2
 8001574:	4a04      	ldr	r2, [pc, #16]	; (8001588 <HAL_IncTick+0x24>)
 8001576:	6013      	str	r3, [r2, #0]
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000008 	.word	0x20000008
 8001588:	20000158 	.word	0x20000158

0800158c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return uwTick;
 8001590:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <HAL_GetTick+0x14>)
 8001592:	681b      	ldr	r3, [r3, #0]
}
 8001594:	4618      	mov	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	20000158 	.word	0x20000158

080015a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015ac:	f7ff ffee 	bl	800158c <HAL_GetTick>
 80015b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015bc:	d005      	beq.n	80015ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <HAL_Delay+0x44>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4413      	add	r3, r2
 80015c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015ca:	bf00      	nop
 80015cc:	f7ff ffde 	bl	800158c <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d8f7      	bhi.n	80015cc <HAL_Delay+0x28>
  {
  }
}
 80015dc:	bf00      	nop
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000008 	.word	0x20000008

080015ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e033      	b.n	800166a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	2b00      	cmp	r3, #0
 8001608:	d109      	bne.n	800161e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff fde0 	bl	80011d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f003 0310 	and.w	r3, r3, #16
 8001626:	2b00      	cmp	r3, #0
 8001628:	d118      	bne.n	800165c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001632:	f023 0302 	bic.w	r3, r3, #2
 8001636:	f043 0202 	orr.w	r2, r3, #2
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 fbb4 	bl	8001dac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f023 0303 	bic.w	r3, r3, #3
 8001652:	f043 0201 	orr.w	r2, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	641a      	str	r2, [r3, #64]	; 0x40
 800165a:	e001      	b.n	8001660 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001668:	7bfb      	ldrb	r3, [r7, #15]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800167c:	2300      	movs	r3, #0
 800167e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001686:	2b01      	cmp	r3, #1
 8001688:	d101      	bne.n	800168e <HAL_ADC_Start+0x1a>
 800168a:	2302      	movs	r3, #2
 800168c:	e097      	b.n	80017be <HAL_ADC_Start+0x14a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2201      	movs	r2, #1
 8001692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d018      	beq.n	80016d6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689a      	ldr	r2, [r3, #8]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 0201 	orr.w	r2, r2, #1
 80016b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016b4:	4b45      	ldr	r3, [pc, #276]	; (80017cc <HAL_ADC_Start+0x158>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a45      	ldr	r2, [pc, #276]	; (80017d0 <HAL_ADC_Start+0x15c>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	0c9a      	lsrs	r2, r3, #18
 80016c0:	4613      	mov	r3, r2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	4413      	add	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80016c8:	e002      	b.n	80016d0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	3b01      	subs	r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f9      	bne.n	80016ca <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d15f      	bne.n	80017a4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016ec:	f023 0301 	bic.w	r3, r3, #1
 80016f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001702:	2b00      	cmp	r3, #0
 8001704:	d007      	beq.n	8001716 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800170e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800171e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001722:	d106      	bne.n	8001732 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001728:	f023 0206 	bic.w	r2, r3, #6
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	645a      	str	r2, [r3, #68]	; 0x44
 8001730:	e002      	b.n	8001738 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001740:	4b24      	ldr	r3, [pc, #144]	; (80017d4 <HAL_ADC_Start+0x160>)
 8001742:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800174c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f003 031f 	and.w	r3, r3, #31
 8001756:	2b00      	cmp	r3, #0
 8001758:	d10f      	bne.n	800177a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d129      	bne.n	80017bc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	e020      	b.n	80017bc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a16      	ldr	r2, [pc, #88]	; (80017d8 <HAL_ADC_Start+0x164>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d11b      	bne.n	80017bc <HAL_ADC_Start+0x148>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d114      	bne.n	80017bc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	e00b      	b.n	80017bc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	f043 0210 	orr.w	r2, r3, #16
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b4:	f043 0201 	orr.w	r2, r3, #1
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	20000000 	.word	0x20000000
 80017d0:	431bde83 	.word	0x431bde83
 80017d4:	40012300 	.word	0x40012300
 80017d8:	40012000 	.word	0x40012000

080017dc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017f8:	d113      	bne.n	8001822 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001808:	d10b      	bne.n	8001822 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f043 0220 	orr.w	r2, r3, #32
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e063      	b.n	80018ea <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001822:	f7ff feb3 	bl	800158c <HAL_GetTick>
 8001826:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001828:	e021      	b.n	800186e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001830:	d01d      	beq.n	800186e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d007      	beq.n	8001848 <HAL_ADC_PollForConversion+0x6c>
 8001838:	f7ff fea8 	bl	800158c <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	429a      	cmp	r2, r3
 8001846:	d212      	bcs.n	800186e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b02      	cmp	r3, #2
 8001854:	d00b      	beq.n	800186e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f043 0204 	orr.w	r2, r3, #4
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e03d      	b.n	80018ea <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b02      	cmp	r3, #2
 800187a:	d1d6      	bne.n	800182a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f06f 0212 	mvn.w	r2, #18
 8001884:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d123      	bne.n	80018e8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d11f      	bne.n	80018e8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d006      	beq.n	80018c4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d111      	bne.n	80018e8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d105      	bne.n	80018e8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	f043 0201 	orr.w	r2, r3, #1
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	f003 0320 	and.w	r3, r3, #32
 8001920:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d049      	beq.n	80019bc <HAL_ADC_IRQHandler+0xca>
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d046      	beq.n	80019bc <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 0310 	and.w	r3, r3, #16
 8001936:	2b00      	cmp	r3, #0
 8001938:	d105      	bne.n	8001946 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d12b      	bne.n	80019ac <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001958:	2b00      	cmp	r3, #0
 800195a:	d127      	bne.n	80019ac <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001966:	2b00      	cmp	r3, #0
 8001968:	d006      	beq.n	8001978 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001974:	2b00      	cmp	r3, #0
 8001976:	d119      	bne.n	80019ac <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0220 	bic.w	r2, r2, #32
 8001986:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d105      	bne.n	80019ac <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	f043 0201 	orr.w	r2, r3, #1
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 f8bd 	bl	8001b2c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f06f 0212 	mvn.w	r2, #18
 80019ba:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ca:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d057      	beq.n	8001a82 <HAL_ADC_IRQHandler+0x190>
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d054      	beq.n	8001a82 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	f003 0310 	and.w	r3, r3, #16
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d105      	bne.n	80019f0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d139      	bne.n	8001a72 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a04:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d006      	beq.n	8001a1a <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d12b      	bne.n	8001a72 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d124      	bne.n	8001a72 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d11d      	bne.n	8001a72 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d119      	bne.n	8001a72 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a4c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d105      	bne.n	8001a72 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f043 0201 	orr.w	r2, r3, #1
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 fa96 	bl	8001fa4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f06f 020c 	mvn.w	r2, #12
 8001a80:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a90:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d017      	beq.n	8001ac8 <HAL_ADC_IRQHandler+0x1d6>
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d014      	beq.n	8001ac8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d10d      	bne.n	8001ac8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f841 	bl	8001b40 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f06f 0201 	mvn.w	r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 0320 	and.w	r3, r3, #32
 8001ace:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ad6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d015      	beq.n	8001b0a <HAL_ADC_IRQHandler+0x218>
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d012      	beq.n	8001b0a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae8:	f043 0202 	orr.w	r2, r3, #2
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f06f 0220 	mvn.w	r2, #32
 8001af8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f82a 	bl	8001b54 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f06f 0220 	mvn.w	r2, #32
 8001b08:	601a      	str	r2, [r3, #0]
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x1c>
 8001b80:	2302      	movs	r3, #2
 8001b82:	e105      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x228>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b09      	cmp	r3, #9
 8001b92:	d925      	bls.n	8001be0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68d9      	ldr	r1, [r3, #12]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3b1e      	subs	r3, #30
 8001baa:	2207      	movs	r2, #7
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43da      	mvns	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	400a      	ands	r2, r1
 8001bb8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68d9      	ldr	r1, [r3, #12]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	4603      	mov	r3, r0
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4403      	add	r3, r0
 8001bd2:	3b1e      	subs	r3, #30
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	e022      	b.n	8001c26 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6919      	ldr	r1, [r3, #16]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	4613      	mov	r3, r2
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	4413      	add	r3, r2
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	400a      	ands	r2, r1
 8001c02:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6919      	ldr	r1, [r3, #16]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	4618      	mov	r0, r3
 8001c16:	4603      	mov	r3, r0
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	4403      	add	r3, r0
 8001c1c:	409a      	lsls	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b06      	cmp	r3, #6
 8001c2c:	d824      	bhi.n	8001c78 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3b05      	subs	r3, #5
 8001c40:	221f      	movs	r2, #31
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43da      	mvns	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	400a      	ands	r2, r1
 8001c4e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	3b05      	subs	r3, #5
 8001c6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	635a      	str	r2, [r3, #52]	; 0x34
 8001c76:	e04c      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b0c      	cmp	r3, #12
 8001c7e:	d824      	bhi.n	8001cca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	3b23      	subs	r3, #35	; 0x23
 8001c92:	221f      	movs	r2, #31
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43da      	mvns	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	400a      	ands	r2, r1
 8001ca0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	3b23      	subs	r3, #35	; 0x23
 8001cbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	631a      	str	r2, [r3, #48]	; 0x30
 8001cc8:	e023      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	3b41      	subs	r3, #65	; 0x41
 8001cdc:	221f      	movs	r2, #31
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	400a      	ands	r2, r1
 8001cea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	3b41      	subs	r3, #65	; 0x41
 8001d06:	fa00 f203 	lsl.w	r2, r0, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d12:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <HAL_ADC_ConfigChannel+0x234>)
 8001d14:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a21      	ldr	r2, [pc, #132]	; (8001da0 <HAL_ADC_ConfigChannel+0x238>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d109      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0x1cc>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b12      	cmp	r3, #18
 8001d26:	d105      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a19      	ldr	r2, [pc, #100]	; (8001da0 <HAL_ADC_ConfigChannel+0x238>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d123      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x21e>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b10      	cmp	r3, #16
 8001d44:	d003      	beq.n	8001d4e <HAL_ADC_ConfigChannel+0x1e6>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b11      	cmp	r3, #17
 8001d4c:	d11b      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2b10      	cmp	r3, #16
 8001d60:	d111      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <HAL_ADC_ConfigChannel+0x23c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a10      	ldr	r2, [pc, #64]	; (8001da8 <HAL_ADC_ConfigChannel+0x240>)
 8001d68:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6c:	0c9a      	lsrs	r2, r3, #18
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d78:	e002      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f9      	bne.n	8001d7a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	40012300 	.word	0x40012300
 8001da0:	40012000 	.word	0x40012000
 8001da4:	20000000 	.word	0x20000000
 8001da8:	431bde83 	.word	0x431bde83

08001dac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001db4:	4b79      	ldr	r3, [pc, #484]	; (8001f9c <ADC_Init+0x1f0>)
 8001db6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001de0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6859      	ldr	r1, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	021a      	lsls	r2, r3, #8
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6859      	ldr	r1, [r3, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6899      	ldr	r1, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3e:	4a58      	ldr	r2, [pc, #352]	; (8001fa0 <ADC_Init+0x1f4>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d022      	beq.n	8001e8a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6899      	ldr	r1, [r3, #8]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6899      	ldr	r1, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	e00f      	b.n	8001eaa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ea8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0202 	bic.w	r2, r2, #2
 8001eb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6899      	ldr	r1, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	7e1b      	ldrb	r3, [r3, #24]
 8001ec4:	005a      	lsls	r2, r3, #1
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d01b      	beq.n	8001f10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ee6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ef6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6859      	ldr	r1, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	3b01      	subs	r3, #1
 8001f04:	035a      	lsls	r2, r3, #13
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	e007      	b.n	8001f20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	051a      	lsls	r2, r3, #20
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6899      	ldr	r1, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f62:	025a      	lsls	r2, r3, #9
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6899      	ldr	r1, [r3, #8]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	029a      	lsls	r2, r3, #10
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	609a      	str	r2, [r3, #8]
}
 8001f90:	bf00      	nop
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	40012300 	.word	0x40012300
 8001fa0:	0f000001 	.word	0x0f000001

08001fa4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <__NVIC_SetPriorityGrouping+0x44>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fea:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <__NVIC_SetPriorityGrouping+0x44>)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	60d3      	str	r3, [r2, #12]
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002004:	4b04      	ldr	r3, [pc, #16]	; (8002018 <__NVIC_GetPriorityGrouping+0x18>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	0a1b      	lsrs	r3, r3, #8
 800200a:	f003 0307 	and.w	r3, r3, #7
}
 800200e:	4618      	mov	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	2b00      	cmp	r3, #0
 800202c:	db0b      	blt.n	8002046 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	f003 021f 	and.w	r2, r3, #31
 8002034:	4907      	ldr	r1, [pc, #28]	; (8002054 <__NVIC_EnableIRQ+0x38>)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	095b      	lsrs	r3, r3, #5
 800203c:	2001      	movs	r0, #1
 800203e:	fa00 f202 	lsl.w	r2, r0, r2
 8002042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000e100 	.word	0xe000e100

08002058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	6039      	str	r1, [r7, #0]
 8002062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	2b00      	cmp	r3, #0
 800206a:	db0a      	blt.n	8002082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	b2da      	uxtb	r2, r3
 8002070:	490c      	ldr	r1, [pc, #48]	; (80020a4 <__NVIC_SetPriority+0x4c>)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	0112      	lsls	r2, r2, #4
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	440b      	add	r3, r1
 800207c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002080:	e00a      	b.n	8002098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4908      	ldr	r1, [pc, #32]	; (80020a8 <__NVIC_SetPriority+0x50>)
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	3b04      	subs	r3, #4
 8002090:	0112      	lsls	r2, r2, #4
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	440b      	add	r3, r1
 8002096:	761a      	strb	r2, [r3, #24]
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000e100 	.word	0xe000e100
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b089      	sub	sp, #36	; 0x24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f1c3 0307 	rsb	r3, r3, #7
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	bf28      	it	cs
 80020ca:	2304      	movcs	r3, #4
 80020cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3304      	adds	r3, #4
 80020d2:	2b06      	cmp	r3, #6
 80020d4:	d902      	bls.n	80020dc <NVIC_EncodePriority+0x30>
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3b03      	subs	r3, #3
 80020da:	e000      	b.n	80020de <NVIC_EncodePriority+0x32>
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e0:	f04f 32ff 	mov.w	r2, #4294967295
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43da      	mvns	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	401a      	ands	r2, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f4:	f04f 31ff 	mov.w	r1, #4294967295
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	fa01 f303 	lsl.w	r3, r1, r3
 80020fe:	43d9      	mvns	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002104:	4313      	orrs	r3, r2
         );
}
 8002106:	4618      	mov	r0, r3
 8002108:	3724      	adds	r7, #36	; 0x24
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3b01      	subs	r3, #1
 8002120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002124:	d301      	bcc.n	800212a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002126:	2301      	movs	r3, #1
 8002128:	e00f      	b.n	800214a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800212a:	4a0a      	ldr	r2, [pc, #40]	; (8002154 <SysTick_Config+0x40>)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3b01      	subs	r3, #1
 8002130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002132:	210f      	movs	r1, #15
 8002134:	f04f 30ff 	mov.w	r0, #4294967295
 8002138:	f7ff ff8e 	bl	8002058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <SysTick_Config+0x40>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002142:	4b04      	ldr	r3, [pc, #16]	; (8002154 <SysTick_Config+0x40>)
 8002144:	2207      	movs	r2, #7
 8002146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	e000e010 	.word	0xe000e010

08002158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff ff29 	bl	8001fb8 <__NVIC_SetPriorityGrouping>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800216e:	b580      	push	{r7, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af00      	add	r7, sp, #0
 8002174:	4603      	mov	r3, r0
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002180:	f7ff ff3e 	bl	8002000 <__NVIC_GetPriorityGrouping>
 8002184:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	6978      	ldr	r0, [r7, #20]
 800218c:	f7ff ff8e 	bl	80020ac <NVIC_EncodePriority>
 8002190:	4602      	mov	r2, r0
 8002192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff5d 	bl	8002058 <__NVIC_SetPriority>
}
 800219e:	bf00      	nop
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	4603      	mov	r3, r0
 80021ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff31 	bl	800201c <__NVIC_EnableIRQ>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff ffa2 	bl	8002114 <SysTick_Config>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b084      	sub	sp, #16
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021e8:	f7ff f9d0 	bl	800158c <HAL_GetTick>
 80021ec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d008      	beq.n	800220c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2280      	movs	r2, #128	; 0x80
 80021fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e052      	b.n	80022b2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0216 	bic.w	r2, r2, #22
 800221a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	695a      	ldr	r2, [r3, #20]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800222a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	2b00      	cmp	r3, #0
 8002232:	d103      	bne.n	800223c <HAL_DMA_Abort+0x62>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002238:	2b00      	cmp	r3, #0
 800223a:	d007      	beq.n	800224c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0208 	bic.w	r2, r2, #8
 800224a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0201 	bic.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800225c:	e013      	b.n	8002286 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800225e:	f7ff f995 	bl	800158c <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b05      	cmp	r3, #5
 800226a:	d90c      	bls.n	8002286 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2220      	movs	r2, #32
 8002270:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2203      	movs	r2, #3
 8002276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e015      	b.n	80022b2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1e4      	bne.n	800225e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002298:	223f      	movs	r2, #63	; 0x3f
 800229a:	409a      	lsls	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d004      	beq.n	80022d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2280      	movs	r2, #128	; 0x80
 80022d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e00c      	b.n	80022f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2205      	movs	r2, #5
 80022dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0201 	bic.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002300:	b480      	push	{r7}
 8002302:	b089      	sub	sp, #36	; 0x24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002312:	2300      	movs	r3, #0
 8002314:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
 800231a:	e159      	b.n	80025d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800231c:	2201      	movs	r2, #1
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	429a      	cmp	r2, r3
 8002336:	f040 8148 	bne.w	80025ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	2b01      	cmp	r3, #1
 8002344:	d005      	beq.n	8002352 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800234e:	2b02      	cmp	r3, #2
 8002350:	d130      	bne.n	80023b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	2203      	movs	r2, #3
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4013      	ands	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002388:	2201      	movs	r2, #1
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	f003 0201 	and.w	r2, r3, #1
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d017      	beq.n	80023f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	2203      	movs	r2, #3
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 0303 	and.w	r3, r3, #3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d123      	bne.n	8002444 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	08da      	lsrs	r2, r3, #3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3208      	adds	r2, #8
 8002404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	220f      	movs	r2, #15
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	08da      	lsrs	r2, r3, #3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3208      	adds	r2, #8
 800243e:	69b9      	ldr	r1, [r7, #24]
 8002440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	2203      	movs	r2, #3
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 0203 	and.w	r2, r3, #3
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 80a2 	beq.w	80025ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	4b57      	ldr	r3, [pc, #348]	; (80025e8 <HAL_GPIO_Init+0x2e8>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	4a56      	ldr	r2, [pc, #344]	; (80025e8 <HAL_GPIO_Init+0x2e8>)
 8002490:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002494:	6453      	str	r3, [r2, #68]	; 0x44
 8002496:	4b54      	ldr	r3, [pc, #336]	; (80025e8 <HAL_GPIO_Init+0x2e8>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024a2:	4a52      	ldr	r2, [pc, #328]	; (80025ec <HAL_GPIO_Init+0x2ec>)
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	089b      	lsrs	r3, r3, #2
 80024a8:	3302      	adds	r3, #2
 80024aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	220f      	movs	r2, #15
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a49      	ldr	r2, [pc, #292]	; (80025f0 <HAL_GPIO_Init+0x2f0>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d019      	beq.n	8002502 <HAL_GPIO_Init+0x202>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a48      	ldr	r2, [pc, #288]	; (80025f4 <HAL_GPIO_Init+0x2f4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d013      	beq.n	80024fe <HAL_GPIO_Init+0x1fe>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a47      	ldr	r2, [pc, #284]	; (80025f8 <HAL_GPIO_Init+0x2f8>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00d      	beq.n	80024fa <HAL_GPIO_Init+0x1fa>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a46      	ldr	r2, [pc, #280]	; (80025fc <HAL_GPIO_Init+0x2fc>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d007      	beq.n	80024f6 <HAL_GPIO_Init+0x1f6>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a45      	ldr	r2, [pc, #276]	; (8002600 <HAL_GPIO_Init+0x300>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d101      	bne.n	80024f2 <HAL_GPIO_Init+0x1f2>
 80024ee:	2304      	movs	r3, #4
 80024f0:	e008      	b.n	8002504 <HAL_GPIO_Init+0x204>
 80024f2:	2307      	movs	r3, #7
 80024f4:	e006      	b.n	8002504 <HAL_GPIO_Init+0x204>
 80024f6:	2303      	movs	r3, #3
 80024f8:	e004      	b.n	8002504 <HAL_GPIO_Init+0x204>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e002      	b.n	8002504 <HAL_GPIO_Init+0x204>
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <HAL_GPIO_Init+0x204>
 8002502:	2300      	movs	r3, #0
 8002504:	69fa      	ldr	r2, [r7, #28]
 8002506:	f002 0203 	and.w	r2, r2, #3
 800250a:	0092      	lsls	r2, r2, #2
 800250c:	4093      	lsls	r3, r2
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002514:	4935      	ldr	r1, [pc, #212]	; (80025ec <HAL_GPIO_Init+0x2ec>)
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	089b      	lsrs	r3, r3, #2
 800251a:	3302      	adds	r3, #2
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002522:	4b38      	ldr	r3, [pc, #224]	; (8002604 <HAL_GPIO_Init+0x304>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	43db      	mvns	r3, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4013      	ands	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002546:	4a2f      	ldr	r2, [pc, #188]	; (8002604 <HAL_GPIO_Init+0x304>)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800254c:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <HAL_GPIO_Init+0x304>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002570:	4a24      	ldr	r2, [pc, #144]	; (8002604 <HAL_GPIO_Init+0x304>)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002576:	4b23      	ldr	r3, [pc, #140]	; (8002604 <HAL_GPIO_Init+0x304>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800259a:	4a1a      	ldr	r2, [pc, #104]	; (8002604 <HAL_GPIO_Init+0x304>)
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025a0:	4b18      	ldr	r3, [pc, #96]	; (8002604 <HAL_GPIO_Init+0x304>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025c4:	4a0f      	ldr	r2, [pc, #60]	; (8002604 <HAL_GPIO_Init+0x304>)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3301      	adds	r3, #1
 80025ce:	61fb      	str	r3, [r7, #28]
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	2b0f      	cmp	r3, #15
 80025d4:	f67f aea2 	bls.w	800231c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025d8:	bf00      	nop
 80025da:	bf00      	nop
 80025dc:	3724      	adds	r7, #36	; 0x24
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40013800 	.word	0x40013800
 80025f0:	40020000 	.word	0x40020000
 80025f4:	40020400 	.word	0x40020400
 80025f8:	40020800 	.word	0x40020800
 80025fc:	40020c00 	.word	0x40020c00
 8002600:	40021000 	.word	0x40021000
 8002604:	40013c00 	.word	0x40013c00

08002608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	807b      	strh	r3, [r7, #2]
 8002614:	4613      	mov	r3, r2
 8002616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002618:	787b      	ldrb	r3, [r7, #1]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800261e:	887a      	ldrh	r2, [r7, #2]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002624:	e003      	b.n	800262e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002626:	887b      	ldrh	r3, [r7, #2]
 8002628:	041a      	lsls	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	619a      	str	r2, [r3, #24]
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800263a:	b480      	push	{r7}
 800263c:	b085      	sub	sp, #20
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	460b      	mov	r3, r1
 8002644:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800264c:	887a      	ldrh	r2, [r7, #2]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4013      	ands	r3, r2
 8002652:	041a      	lsls	r2, r3, #16
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	43d9      	mvns	r1, r3
 8002658:	887b      	ldrh	r3, [r7, #2]
 800265a:	400b      	ands	r3, r1
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	619a      	str	r2, [r3, #24]
}
 8002662:	bf00      	nop
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e267      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d075      	beq.n	800277a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800268e:	4b88      	ldr	r3, [pc, #544]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	2b04      	cmp	r3, #4
 8002698:	d00c      	beq.n	80026b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800269a:	4b85      	ldr	r3, [pc, #532]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d112      	bne.n	80026cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026a6:	4b82      	ldr	r3, [pc, #520]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026b2:	d10b      	bne.n	80026cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b4:	4b7e      	ldr	r3, [pc, #504]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d05b      	beq.n	8002778 <HAL_RCC_OscConfig+0x108>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d157      	bne.n	8002778 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e242      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d4:	d106      	bne.n	80026e4 <HAL_RCC_OscConfig+0x74>
 80026d6:	4b76      	ldr	r3, [pc, #472]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a75      	ldr	r2, [pc, #468]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 80026dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e01d      	b.n	8002720 <HAL_RCC_OscConfig+0xb0>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026ec:	d10c      	bne.n	8002708 <HAL_RCC_OscConfig+0x98>
 80026ee:	4b70      	ldr	r3, [pc, #448]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a6f      	ldr	r2, [pc, #444]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 80026f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	4b6d      	ldr	r3, [pc, #436]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a6c      	ldr	r2, [pc, #432]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 8002700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	e00b      	b.n	8002720 <HAL_RCC_OscConfig+0xb0>
 8002708:	4b69      	ldr	r3, [pc, #420]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a68      	ldr	r2, [pc, #416]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 800270e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	4b66      	ldr	r3, [pc, #408]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a65      	ldr	r2, [pc, #404]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 800271a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800271e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d013      	beq.n	8002750 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fe ff30 	bl	800158c <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002730:	f7fe ff2c 	bl	800158c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	; 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e207      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002742:	4b5b      	ldr	r3, [pc, #364]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0xc0>
 800274e:	e014      	b.n	800277a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002750:	f7fe ff1c 	bl	800158c <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002758:	f7fe ff18 	bl	800158c <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b64      	cmp	r3, #100	; 0x64
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e1f3      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276a:	4b51      	ldr	r3, [pc, #324]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0xe8>
 8002776:	e000      	b.n	800277a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d063      	beq.n	800284e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002786:	4b4a      	ldr	r3, [pc, #296]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00b      	beq.n	80027aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002792:	4b47      	ldr	r3, [pc, #284]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800279a:	2b08      	cmp	r3, #8
 800279c:	d11c      	bne.n	80027d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800279e:	4b44      	ldr	r3, [pc, #272]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d116      	bne.n	80027d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027aa:	4b41      	ldr	r3, [pc, #260]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d005      	beq.n	80027c2 <HAL_RCC_OscConfig+0x152>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d001      	beq.n	80027c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e1c7      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c2:	4b3b      	ldr	r3, [pc, #236]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4937      	ldr	r1, [pc, #220]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d6:	e03a      	b.n	800284e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d020      	beq.n	8002822 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e0:	4b34      	ldr	r3, [pc, #208]	; (80028b4 <HAL_RCC_OscConfig+0x244>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e6:	f7fe fed1 	bl	800158c <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ee:	f7fe fecd 	bl	800158c <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e1a8      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002800:	4b2b      	ldr	r3, [pc, #172]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280c:	4b28      	ldr	r3, [pc, #160]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4925      	ldr	r1, [pc, #148]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 800281c:	4313      	orrs	r3, r2
 800281e:	600b      	str	r3, [r1, #0]
 8002820:	e015      	b.n	800284e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002822:	4b24      	ldr	r3, [pc, #144]	; (80028b4 <HAL_RCC_OscConfig+0x244>)
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002828:	f7fe feb0 	bl	800158c <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002830:	f7fe feac 	bl	800158c <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e187      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002842:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d036      	beq.n	80028c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d016      	beq.n	8002890 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <HAL_RCC_OscConfig+0x248>)
 8002864:	2201      	movs	r2, #1
 8002866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002868:	f7fe fe90 	bl	800158c <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002870:	f7fe fe8c 	bl	800158c <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e167      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002882:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 8002884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x200>
 800288e:	e01b      	b.n	80028c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002890:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <HAL_RCC_OscConfig+0x248>)
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002896:	f7fe fe79 	bl	800158c <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800289c:	e00e      	b.n	80028bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800289e:	f7fe fe75 	bl	800158c <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d907      	bls.n	80028bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e150      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
 80028b0:	40023800 	.word	0x40023800
 80028b4:	42470000 	.word	0x42470000
 80028b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028bc:	4b88      	ldr	r3, [pc, #544]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 80028be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1ea      	bne.n	800289e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 8097 	beq.w	8002a04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028d6:	2300      	movs	r3, #0
 80028d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028da:	4b81      	ldr	r3, [pc, #516]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10f      	bne.n	8002906 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	4b7d      	ldr	r3, [pc, #500]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	4a7c      	ldr	r2, [pc, #496]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 80028f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f4:	6413      	str	r3, [r2, #64]	; 0x40
 80028f6:	4b7a      	ldr	r3, [pc, #488]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002902:	2301      	movs	r3, #1
 8002904:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002906:	4b77      	ldr	r3, [pc, #476]	; (8002ae4 <HAL_RCC_OscConfig+0x474>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290e:	2b00      	cmp	r3, #0
 8002910:	d118      	bne.n	8002944 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002912:	4b74      	ldr	r3, [pc, #464]	; (8002ae4 <HAL_RCC_OscConfig+0x474>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a73      	ldr	r2, [pc, #460]	; (8002ae4 <HAL_RCC_OscConfig+0x474>)
 8002918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800291e:	f7fe fe35 	bl	800158c <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002926:	f7fe fe31 	bl	800158c <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e10c      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002938:	4b6a      	ldr	r3, [pc, #424]	; (8002ae4 <HAL_RCC_OscConfig+0x474>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d106      	bne.n	800295a <HAL_RCC_OscConfig+0x2ea>
 800294c:	4b64      	ldr	r3, [pc, #400]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 800294e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002950:	4a63      	ldr	r2, [pc, #396]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	6713      	str	r3, [r2, #112]	; 0x70
 8002958:	e01c      	b.n	8002994 <HAL_RCC_OscConfig+0x324>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	2b05      	cmp	r3, #5
 8002960:	d10c      	bne.n	800297c <HAL_RCC_OscConfig+0x30c>
 8002962:	4b5f      	ldr	r3, [pc, #380]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 8002964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002966:	4a5e      	ldr	r2, [pc, #376]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 8002968:	f043 0304 	orr.w	r3, r3, #4
 800296c:	6713      	str	r3, [r2, #112]	; 0x70
 800296e:	4b5c      	ldr	r3, [pc, #368]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002972:	4a5b      	ldr	r2, [pc, #364]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	6713      	str	r3, [r2, #112]	; 0x70
 800297a:	e00b      	b.n	8002994 <HAL_RCC_OscConfig+0x324>
 800297c:	4b58      	ldr	r3, [pc, #352]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 800297e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002980:	4a57      	ldr	r2, [pc, #348]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 8002982:	f023 0301 	bic.w	r3, r3, #1
 8002986:	6713      	str	r3, [r2, #112]	; 0x70
 8002988:	4b55      	ldr	r3, [pc, #340]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 800298a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298c:	4a54      	ldr	r2, [pc, #336]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 800298e:	f023 0304 	bic.w	r3, r3, #4
 8002992:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d015      	beq.n	80029c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299c:	f7fe fdf6 	bl	800158c <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a2:	e00a      	b.n	80029ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029a4:	f7fe fdf2 	bl	800158c <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e0cb      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ba:	4b49      	ldr	r3, [pc, #292]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 80029bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0ee      	beq.n	80029a4 <HAL_RCC_OscConfig+0x334>
 80029c6:	e014      	b.n	80029f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c8:	f7fe fde0 	bl	800158c <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ce:	e00a      	b.n	80029e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d0:	f7fe fddc 	bl	800158c <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	f241 3288 	movw	r2, #5000	; 0x1388
 80029de:	4293      	cmp	r3, r2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e0b5      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e6:	4b3e      	ldr	r3, [pc, #248]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 80029e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1ee      	bne.n	80029d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029f2:	7dfb      	ldrb	r3, [r7, #23]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d105      	bne.n	8002a04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f8:	4b39      	ldr	r3, [pc, #228]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	4a38      	ldr	r2, [pc, #224]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 80029fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 80a1 	beq.w	8002b50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a0e:	4b34      	ldr	r3, [pc, #208]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 030c 	and.w	r3, r3, #12
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d05c      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d141      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a22:	4b31      	ldr	r3, [pc, #196]	; (8002ae8 <HAL_RCC_OscConfig+0x478>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a28:	f7fe fdb0 	bl	800158c <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a30:	f7fe fdac 	bl	800158c <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e087      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a42:	4b27      	ldr	r3, [pc, #156]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f0      	bne.n	8002a30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69da      	ldr	r2, [r3, #28]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	019b      	lsls	r3, r3, #6
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a64:	085b      	lsrs	r3, r3, #1
 8002a66:	3b01      	subs	r3, #1
 8002a68:	041b      	lsls	r3, r3, #16
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a70:	061b      	lsls	r3, r3, #24
 8002a72:	491b      	ldr	r1, [pc, #108]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a78:	4b1b      	ldr	r3, [pc, #108]	; (8002ae8 <HAL_RCC_OscConfig+0x478>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7e:	f7fe fd85 	bl	800158c <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a86:	f7fe fd81 	bl	800158c <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e05c      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a98:	4b11      	ldr	r3, [pc, #68]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x416>
 8002aa4:	e054      	b.n	8002b50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa6:	4b10      	ldr	r3, [pc, #64]	; (8002ae8 <HAL_RCC_OscConfig+0x478>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7fe fd6e 	bl	800158c <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab4:	f7fe fd6a 	bl	800158c <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e045      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac6:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x444>
 8002ad2:	e03d      	b.n	8002b50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d107      	bne.n	8002aec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e038      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	40007000 	.word	0x40007000
 8002ae8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002aec:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <HAL_RCC_OscConfig+0x4ec>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d028      	beq.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d121      	bne.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d11a      	bne.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d111      	bne.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b32:	085b      	lsrs	r3, r3, #1
 8002b34:	3b01      	subs	r3, #1
 8002b36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d107      	bne.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d001      	beq.n	8002b50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e000      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40023800 	.word	0x40023800

08002b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0cc      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b74:	4b68      	ldr	r3, [pc, #416]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d90c      	bls.n	8002b9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b82:	4b65      	ldr	r3, [pc, #404]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8a:	4b63      	ldr	r3, [pc, #396]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0b8      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d020      	beq.n	8002bea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bb4:	4b59      	ldr	r3, [pc, #356]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	4a58      	ldr	r2, [pc, #352]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bcc:	4b53      	ldr	r3, [pc, #332]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	4a52      	ldr	r2, [pc, #328]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd8:	4b50      	ldr	r3, [pc, #320]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	494d      	ldr	r1, [pc, #308]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d044      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d107      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfe:	4b47      	ldr	r3, [pc, #284]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d119      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e07f      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d003      	beq.n	8002c1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d107      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c1e:	4b3f      	ldr	r3, [pc, #252]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d109      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e06f      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2e:	4b3b      	ldr	r3, [pc, #236]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e067      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c3e:	4b37      	ldr	r3, [pc, #220]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f023 0203 	bic.w	r2, r3, #3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	4934      	ldr	r1, [pc, #208]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c50:	f7fe fc9c 	bl	800158c <HAL_GetTick>
 8002c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c56:	e00a      	b.n	8002c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c58:	f7fe fc98 	bl	800158c <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e04f      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6e:	4b2b      	ldr	r3, [pc, #172]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 020c 	and.w	r2, r3, #12
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d1eb      	bne.n	8002c58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c80:	4b25      	ldr	r3, [pc, #148]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d20c      	bcs.n	8002ca8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8e:	4b22      	ldr	r3, [pc, #136]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	4b20      	ldr	r3, [pc, #128]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e032      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d008      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cb4:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	4916      	ldr	r1, [pc, #88]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d009      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cd2:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	490e      	ldr	r1, [pc, #56]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ce6:	f000 f821 	bl	8002d2c <HAL_RCC_GetSysClockFreq>
 8002cea:	4602      	mov	r2, r0
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	091b      	lsrs	r3, r3, #4
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	490a      	ldr	r1, [pc, #40]	; (8002d20 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf8:	5ccb      	ldrb	r3, [r1, r3]
 8002cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002cfe:	4a09      	ldr	r2, [pc, #36]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d02:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <HAL_RCC_ClockConfig+0x1c8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe fbfc 	bl	8001504 <HAL_InitTick>

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40023c00 	.word	0x40023c00
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	08004c8c 	.word	0x08004c8c
 8002d24:	20000000 	.word	0x20000000
 8002d28:	20000004 	.word	0x20000004

08002d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d30:	b090      	sub	sp, #64	; 0x40
 8002d32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	637b      	str	r3, [r7, #52]	; 0x34
 8002d38:	2300      	movs	r3, #0
 8002d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d44:	4b59      	ldr	r3, [pc, #356]	; (8002eac <HAL_RCC_GetSysClockFreq+0x180>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 030c 	and.w	r3, r3, #12
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d00d      	beq.n	8002d6c <HAL_RCC_GetSysClockFreq+0x40>
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	f200 80a1 	bhi.w	8002e98 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <HAL_RCC_GetSysClockFreq+0x34>
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d003      	beq.n	8002d66 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d5e:	e09b      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d60:	4b53      	ldr	r3, [pc, #332]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d62:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002d64:	e09b      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d66:	4b53      	ldr	r3, [pc, #332]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d6a:	e098      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d6c:	4b4f      	ldr	r3, [pc, #316]	; (8002eac <HAL_RCC_GetSysClockFreq+0x180>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d74:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d76:	4b4d      	ldr	r3, [pc, #308]	; (8002eac <HAL_RCC_GetSysClockFreq+0x180>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d028      	beq.n	8002dd4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d82:	4b4a      	ldr	r3, [pc, #296]	; (8002eac <HAL_RCC_GetSysClockFreq+0x180>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	099b      	lsrs	r3, r3, #6
 8002d88:	2200      	movs	r2, #0
 8002d8a:	623b      	str	r3, [r7, #32]
 8002d8c:	627a      	str	r2, [r7, #36]	; 0x24
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d94:	2100      	movs	r1, #0
 8002d96:	4b47      	ldr	r3, [pc, #284]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d98:	fb03 f201 	mul.w	r2, r3, r1
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	fb00 f303 	mul.w	r3, r0, r3
 8002da2:	4413      	add	r3, r2
 8002da4:	4a43      	ldr	r2, [pc, #268]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002da6:	fba0 1202 	umull	r1, r2, r0, r2
 8002daa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dac:	460a      	mov	r2, r1
 8002dae:	62ba      	str	r2, [r7, #40]	; 0x28
 8002db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002db2:	4413      	add	r3, r2
 8002db4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db8:	2200      	movs	r2, #0
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	61fa      	str	r2, [r7, #28]
 8002dbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002dc6:	f7fd fe81 	bl	8000acc <__aeabi_uldivmod>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4613      	mov	r3, r2
 8002dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dd2:	e053      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd4:	4b35      	ldr	r3, [pc, #212]	; (8002eac <HAL_RCC_GetSysClockFreq+0x180>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	099b      	lsrs	r3, r3, #6
 8002dda:	2200      	movs	r2, #0
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	617a      	str	r2, [r7, #20]
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002de6:	f04f 0b00 	mov.w	fp, #0
 8002dea:	4652      	mov	r2, sl
 8002dec:	465b      	mov	r3, fp
 8002dee:	f04f 0000 	mov.w	r0, #0
 8002df2:	f04f 0100 	mov.w	r1, #0
 8002df6:	0159      	lsls	r1, r3, #5
 8002df8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dfc:	0150      	lsls	r0, r2, #5
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	ebb2 080a 	subs.w	r8, r2, sl
 8002e06:	eb63 090b 	sbc.w	r9, r3, fp
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e1e:	ebb2 0408 	subs.w	r4, r2, r8
 8002e22:	eb63 0509 	sbc.w	r5, r3, r9
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	f04f 0300 	mov.w	r3, #0
 8002e2e:	00eb      	lsls	r3, r5, #3
 8002e30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e34:	00e2      	lsls	r2, r4, #3
 8002e36:	4614      	mov	r4, r2
 8002e38:	461d      	mov	r5, r3
 8002e3a:	eb14 030a 	adds.w	r3, r4, sl
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	eb45 030b 	adc.w	r3, r5, fp
 8002e44:	607b      	str	r3, [r7, #4]
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e52:	4629      	mov	r1, r5
 8002e54:	028b      	lsls	r3, r1, #10
 8002e56:	4621      	mov	r1, r4
 8002e58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e5c:	4621      	mov	r1, r4
 8002e5e:	028a      	lsls	r2, r1, #10
 8002e60:	4610      	mov	r0, r2
 8002e62:	4619      	mov	r1, r3
 8002e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e66:	2200      	movs	r2, #0
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	60fa      	str	r2, [r7, #12]
 8002e6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e70:	f7fd fe2c 	bl	8000acc <__aeabi_uldivmod>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4613      	mov	r3, r2
 8002e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_RCC_GetSysClockFreq+0x180>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	0c1b      	lsrs	r3, r3, #16
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	3301      	adds	r3, #1
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002e8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e96:	e002      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e9a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3740      	adds	r7, #64	; 0x40
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	00f42400 	.word	0x00f42400
 8002eb4:	017d7840 	.word	0x017d7840

08002eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ebc:	4b03      	ldr	r3, [pc, #12]	; (8002ecc <HAL_RCC_GetHCLKFreq+0x14>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20000000 	.word	0x20000000

08002ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ed4:	f7ff fff0 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	0a9b      	lsrs	r3, r3, #10
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	4903      	ldr	r1, [pc, #12]	; (8002ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ee6:	5ccb      	ldrb	r3, [r1, r3]
 8002ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	08004c9c 	.word	0x08004c9c

08002ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002efc:	f7ff ffdc 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8002f00:	4602      	mov	r2, r0
 8002f02:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	0b5b      	lsrs	r3, r3, #13
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	4903      	ldr	r1, [pc, #12]	; (8002f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f0e:	5ccb      	ldrb	r3, [r1, r3]
 8002f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	08004c9c 	.word	0x08004c9c

08002f20 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d105      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d035      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f48:	4b67      	ldr	r3, [pc, #412]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f4e:	f7fe fb1d 	bl	800158c <HAL_GetTick>
 8002f52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f54:	e008      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f56:	f7fe fb19 	bl	800158c <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e0ba      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f68:	4b60      	ldr	r3, [pc, #384]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1f0      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	019a      	lsls	r2, r3, #6
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	071b      	lsls	r3, r3, #28
 8002f80:	495a      	ldr	r1, [pc, #360]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f88:	4b57      	ldr	r3, [pc, #348]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f8e:	f7fe fafd 	bl	800158c <HAL_GetTick>
 8002f92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f96:	f7fe faf9 	bl	800158c <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e09a      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fa8:	4b50      	ldr	r3, [pc, #320]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0f0      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 8083 	beq.w	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	4b49      	ldr	r3, [pc, #292]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	4a48      	ldr	r2, [pc, #288]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd2:	4b46      	ldr	r3, [pc, #280]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002fde:	4b44      	ldr	r3, [pc, #272]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a43      	ldr	r2, [pc, #268]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fea:	f7fe facf 	bl	800158c <HAL_GetTick>
 8002fee:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ff0:	e008      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ff2:	f7fe facb 	bl	800158c <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e06c      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003004:	4b3a      	ldr	r3, [pc, #232]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0f0      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003010:	4b36      	ldr	r3, [pc, #216]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003014:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003018:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d02f      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	429a      	cmp	r2, r3
 800302c:	d028      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800302e:	4b2f      	ldr	r3, [pc, #188]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003036:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003038:	4b2e      	ldr	r3, [pc, #184]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800303a:	2201      	movs	r2, #1
 800303c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800303e:	4b2d      	ldr	r3, [pc, #180]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003044:	4a29      	ldr	r2, [pc, #164]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800304a:	4b28      	ldr	r3, [pc, #160]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800304c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b01      	cmp	r3, #1
 8003054:	d114      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003056:	f7fe fa99 	bl	800158c <HAL_GetTick>
 800305a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305c:	e00a      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800305e:	f7fe fa95 	bl	800158c <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	f241 3288 	movw	r2, #5000	; 0x1388
 800306c:	4293      	cmp	r3, r2
 800306e:	d901      	bls.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e034      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003074:	4b1d      	ldr	r3, [pc, #116]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0ee      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003088:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800308c:	d10d      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800308e:	4b17      	ldr	r3, [pc, #92]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800309e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a2:	4912      	ldr	r1, [pc, #72]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	608b      	str	r3, [r1, #8]
 80030a8:	e005      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80030aa:	4b10      	ldr	r3, [pc, #64]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	4a0f      	ldr	r2, [pc, #60]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80030b0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80030b4:	6093      	str	r3, [r2, #8]
 80030b6:	4b0d      	ldr	r3, [pc, #52]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80030b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c2:	490a      	ldr	r1, [pc, #40]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	7c1a      	ldrb	r2, [r3, #16]
 80030d8:	4b07      	ldr	r3, [pc, #28]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80030da:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3718      	adds	r7, #24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	42470068 	.word	0x42470068
 80030ec:	40023800 	.word	0x40023800
 80030f0:	40007000 	.word	0x40007000
 80030f4:	42470e40 	.word	0x42470e40
 80030f8:	424711e0 	.word	0x424711e0

080030fc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e066      	b.n	80031e0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	7f5b      	ldrb	r3, [r3, #29]
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d105      	bne.n	8003128 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7fe f8a0 	bl	8001268 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	22ca      	movs	r2, #202	; 0xca
 8003134:	625a      	str	r2, [r3, #36]	; 0x24
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2253      	movs	r2, #83	; 0x53
 800313c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f87a 	bl	8003238 <RTC_EnterInitMode>
 8003144:	4603      	mov	r3, r0
 8003146:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d12c      	bne.n	80031a8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6812      	ldr	r2, [r2, #0]
 8003158:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800315c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003160:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6899      	ldr	r1, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	68d2      	ldr	r2, [r2, #12]
 8003188:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6919      	ldr	r1, [r3, #16]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	041a      	lsls	r2, r3, #16
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f881 	bl	80032a6 <RTC_ExitInitMode>
 80031a4:	4603      	mov	r3, r0
 80031a6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d113      	bne.n	80031d6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699a      	ldr	r2, [r3, #24]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	22ff      	movs	r2, #255	; 0xff
 80031dc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80031de:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003202:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003204:	f7fe f9c2 	bl	800158c <HAL_GetTick>
 8003208:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800320a:	e009      	b.n	8003220 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800320c:	f7fe f9be 	bl	800158c <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800321a:	d901      	bls.n	8003220 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e007      	b.n	8003230 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0ee      	beq.n	800320c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003252:	2b00      	cmp	r3, #0
 8003254:	d122      	bne.n	800329c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003264:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003266:	f7fe f991 	bl	800158c <HAL_GetTick>
 800326a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800326c:	e00c      	b.n	8003288 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800326e:	f7fe f98d 	bl	800158c <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800327c:	d904      	bls.n	8003288 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2204      	movs	r2, #4
 8003282:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003292:	2b00      	cmp	r3, #0
 8003294:	d102      	bne.n	800329c <RTC_EnterInitMode+0x64>
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d1e8      	bne.n	800326e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800329c:	7bfb      	ldrb	r3, [r7, #15]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b084      	sub	sp, #16
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032c0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 0320 	and.w	r3, r3, #32
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10a      	bne.n	80032e6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff ff89 	bl	80031e8 <HAL_RTC_WaitForSynchro>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d004      	beq.n	80032e6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2204      	movs	r2, #4
 80032e0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e03f      	b.n	8003382 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d106      	bne.n	800331c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7fd ffd2 	bl	80012c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2224      	movs	r2, #36	; 0x24
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003332:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 fd7b 	bl	8003e30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003348:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695a      	ldr	r2, [r3, #20]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003358:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003368:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b08a      	sub	sp, #40	; 0x28
 800338e:	af02      	add	r7, sp, #8
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	603b      	str	r3, [r7, #0]
 8003396:	4613      	mov	r3, r2
 8003398:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b20      	cmp	r3, #32
 80033a8:	d17c      	bne.n	80034a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d002      	beq.n	80033b6 <HAL_UART_Transmit+0x2c>
 80033b0:	88fb      	ldrh	r3, [r7, #6]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e075      	b.n	80034a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_UART_Transmit+0x3e>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e06e      	b.n	80034a6 <HAL_UART_Transmit+0x11c>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2221      	movs	r2, #33	; 0x21
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033de:	f7fe f8d5 	bl	800158c <HAL_GetTick>
 80033e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	88fa      	ldrh	r2, [r7, #6]
 80033e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	88fa      	ldrh	r2, [r7, #6]
 80033ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f8:	d108      	bne.n	800340c <HAL_UART_Transmit+0x82>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d104      	bne.n	800340c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003402:	2300      	movs	r3, #0
 8003404:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	61bb      	str	r3, [r7, #24]
 800340a:	e003      	b.n	8003414 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003410:	2300      	movs	r3, #0
 8003412:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800341c:	e02a      	b.n	8003474 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2200      	movs	r2, #0
 8003426:	2180      	movs	r1, #128	; 0x80
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 faf9 	bl	8003a20 <UART_WaitOnFlagUntilTimeout>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e036      	b.n	80034a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10b      	bne.n	8003456 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800344c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	3302      	adds	r3, #2
 8003452:	61bb      	str	r3, [r7, #24]
 8003454:	e007      	b.n	8003466 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	781a      	ldrb	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	3301      	adds	r3, #1
 8003464:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800346a:	b29b      	uxth	r3, r3
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003478:	b29b      	uxth	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1cf      	bne.n	800341e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2200      	movs	r2, #0
 8003486:	2140      	movs	r1, #64	; 0x40
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 fac9 	bl	8003a20 <UART_WaitOnFlagUntilTimeout>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e006      	b.n	80034a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034a0:	2300      	movs	r3, #0
 80034a2:	e000      	b.n	80034a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80034a4:	2302      	movs	r3, #2
  }
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3720      	adds	r7, #32
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
	...

080034b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b0ba      	sub	sp, #232	; 0xe8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80034dc:	2300      	movs	r3, #0
 80034de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80034ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10f      	bne.n	8003516 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d009      	beq.n	8003516 <HAL_UART_IRQHandler+0x66>
 8003502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003506:	f003 0320 	and.w	r3, r3, #32
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 fbd3 	bl	8003cba <UART_Receive_IT>
      return;
 8003514:	e256      	b.n	80039c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003516:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 80de 	beq.w	80036dc <HAL_UART_IRQHandler+0x22c>
 8003520:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d106      	bne.n	800353a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800352c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003530:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 80d1 	beq.w	80036dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800353a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00b      	beq.n	800355e <HAL_UART_IRQHandler+0xae>
 8003546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800354a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354e:	2b00      	cmp	r3, #0
 8003550:	d005      	beq.n	800355e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	f043 0201 	orr.w	r2, r3, #1
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800355e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00b      	beq.n	8003582 <HAL_UART_IRQHandler+0xd2>
 800356a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f043 0202 	orr.w	r2, r3, #2
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00b      	beq.n	80035a6 <HAL_UART_IRQHandler+0xf6>
 800358e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d005      	beq.n	80035a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	f043 0204 	orr.w	r2, r3, #4
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80035a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d011      	beq.n	80035d6 <HAL_UART_IRQHandler+0x126>
 80035b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035b6:	f003 0320 	and.w	r3, r3, #32
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d105      	bne.n	80035ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80035be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d005      	beq.n	80035d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f043 0208 	orr.w	r2, r3, #8
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 81ed 	beq.w	80039ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035e4:	f003 0320 	and.w	r3, r3, #32
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d008      	beq.n	80035fe <HAL_UART_IRQHandler+0x14e>
 80035ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035f0:	f003 0320 	and.w	r3, r3, #32
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 fb5e 	bl	8003cba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003608:	2b40      	cmp	r3, #64	; 0x40
 800360a:	bf0c      	ite	eq
 800360c:	2301      	moveq	r3, #1
 800360e:	2300      	movne	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d103      	bne.n	800362a <HAL_UART_IRQHandler+0x17a>
 8003622:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003626:	2b00      	cmp	r3, #0
 8003628:	d04f      	beq.n	80036ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fa66 	bl	8003afc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363a:	2b40      	cmp	r3, #64	; 0x40
 800363c:	d141      	bne.n	80036c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3314      	adds	r3, #20
 8003644:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003648:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800364c:	e853 3f00 	ldrex	r3, [r3]
 8003650:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003654:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800365c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3314      	adds	r3, #20
 8003666:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800366a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800366e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003672:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003676:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800367a:	e841 2300 	strex	r3, r2, [r1]
 800367e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003682:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1d9      	bne.n	800363e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368e:	2b00      	cmp	r3, #0
 8003690:	d013      	beq.n	80036ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003696:	4a7d      	ldr	r2, [pc, #500]	; (800388c <HAL_UART_IRQHandler+0x3dc>)
 8003698:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fe fe0b 	bl	80022ba <HAL_DMA_Abort_IT>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d016      	beq.n	80036d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036b4:	4610      	mov	r0, r2
 80036b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b8:	e00e      	b.n	80036d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f99a 	bl	80039f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036c0:	e00a      	b.n	80036d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f996 	bl	80039f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036c8:	e006      	b.n	80036d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f992 	bl	80039f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80036d6:	e170      	b.n	80039ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d8:	bf00      	nop
    return;
 80036da:	e16e      	b.n	80039ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	f040 814a 	bne.w	800397a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80036e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ea:	f003 0310 	and.w	r3, r3, #16
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 8143 	beq.w	800397a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80036f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036f8:	f003 0310 	and.w	r3, r3, #16
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 813c 	beq.w	800397a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003702:	2300      	movs	r3, #0
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	60bb      	str	r3, [r7, #8]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	60bb      	str	r3, [r7, #8]
 8003716:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003722:	2b40      	cmp	r3, #64	; 0x40
 8003724:	f040 80b4 	bne.w	8003890 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003734:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 8140 	beq.w	80039be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003742:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003746:	429a      	cmp	r2, r3
 8003748:	f080 8139 	bcs.w	80039be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003752:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800375e:	f000 8088 	beq.w	8003872 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	330c      	adds	r3, #12
 8003768:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003770:	e853 3f00 	ldrex	r3, [r3]
 8003774:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003778:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800377c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003780:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	330c      	adds	r3, #12
 800378a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800378e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003792:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003796:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800379a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800379e:	e841 2300 	strex	r3, r2, [r1]
 80037a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80037a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1d9      	bne.n	8003762 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	3314      	adds	r3, #20
 80037b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037b8:	e853 3f00 	ldrex	r3, [r3]
 80037bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80037be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037c0:	f023 0301 	bic.w	r3, r3, #1
 80037c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3314      	adds	r3, #20
 80037ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80037d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80037da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037de:	e841 2300 	strex	r3, r2, [r1]
 80037e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80037e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1e1      	bne.n	80037ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	3314      	adds	r3, #20
 80037f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037f4:	e853 3f00 	ldrex	r3, [r3]
 80037f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80037fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003800:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3314      	adds	r3, #20
 800380a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800380e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003810:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003812:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003814:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003816:	e841 2300 	strex	r3, r2, [r1]
 800381a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800381c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1e3      	bne.n	80037ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2220      	movs	r2, #32
 8003826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	330c      	adds	r3, #12
 8003836:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800383a:	e853 3f00 	ldrex	r3, [r3]
 800383e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003842:	f023 0310 	bic.w	r3, r3, #16
 8003846:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	330c      	adds	r3, #12
 8003850:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003854:	65ba      	str	r2, [r7, #88]	; 0x58
 8003856:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003858:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800385a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800385c:	e841 2300 	strex	r3, r2, [r1]
 8003860:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1e3      	bne.n	8003830 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386c:	4618      	mov	r0, r3
 800386e:	f7fe fcb4 	bl	80021da <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800387a:	b29b      	uxth	r3, r3
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	b29b      	uxth	r3, r3
 8003880:	4619      	mov	r1, r3
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f8c0 	bl	8003a08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003888:	e099      	b.n	80039be <HAL_UART_IRQHandler+0x50e>
 800388a:	bf00      	nop
 800388c:	08003bc3 	.word	0x08003bc3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003898:	b29b      	uxth	r3, r3
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 808b 	beq.w	80039c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80038ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 8086 	beq.w	80039c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	330c      	adds	r3, #12
 80038bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c0:	e853 3f00 	ldrex	r3, [r3]
 80038c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	330c      	adds	r3, #12
 80038d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80038da:	647a      	str	r2, [r7, #68]	; 0x44
 80038dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038e2:	e841 2300 	strex	r3, r2, [r1]
 80038e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1e3      	bne.n	80038b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3314      	adds	r3, #20
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	e853 3f00 	ldrex	r3, [r3]
 80038fc:	623b      	str	r3, [r7, #32]
   return(result);
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	f023 0301 	bic.w	r3, r3, #1
 8003904:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3314      	adds	r3, #20
 800390e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003912:	633a      	str	r2, [r7, #48]	; 0x30
 8003914:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003916:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800391a:	e841 2300 	strex	r3, r2, [r1]
 800391e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1e3      	bne.n	80038ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2220      	movs	r2, #32
 800392a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	330c      	adds	r3, #12
 800393a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	e853 3f00 	ldrex	r3, [r3]
 8003942:	60fb      	str	r3, [r7, #12]
   return(result);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f023 0310 	bic.w	r3, r3, #16
 800394a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	330c      	adds	r3, #12
 8003954:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003958:	61fa      	str	r2, [r7, #28]
 800395a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395c:	69b9      	ldr	r1, [r7, #24]
 800395e:	69fa      	ldr	r2, [r7, #28]
 8003960:	e841 2300 	strex	r3, r2, [r1]
 8003964:	617b      	str	r3, [r7, #20]
   return(result);
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1e3      	bne.n	8003934 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800396c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003970:	4619      	mov	r1, r3
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f848 	bl	8003a08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003978:	e023      	b.n	80039c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800397a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800397e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003982:	2b00      	cmp	r3, #0
 8003984:	d009      	beq.n	800399a <HAL_UART_IRQHandler+0x4ea>
 8003986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800398a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f929 	bl	8003bea <UART_Transmit_IT>
    return;
 8003998:	e014      	b.n	80039c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800399a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800399e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00e      	beq.n	80039c4 <HAL_UART_IRQHandler+0x514>
 80039a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d008      	beq.n	80039c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f969 	bl	8003c8a <UART_EndTransmit_IT>
    return;
 80039b8:	e004      	b.n	80039c4 <HAL_UART_IRQHandler+0x514>
    return;
 80039ba:	bf00      	nop
 80039bc:	e002      	b.n	80039c4 <HAL_UART_IRQHandler+0x514>
      return;
 80039be:	bf00      	nop
 80039c0:	e000      	b.n	80039c4 <HAL_UART_IRQHandler+0x514>
      return;
 80039c2:	bf00      	nop
  }
}
 80039c4:	37e8      	adds	r7, #232	; 0xe8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop

080039cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b090      	sub	sp, #64	; 0x40
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	603b      	str	r3, [r7, #0]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a30:	e050      	b.n	8003ad4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a38:	d04c      	beq.n	8003ad4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d007      	beq.n	8003a50 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a40:	f7fd fda4 	bl	800158c <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d241      	bcs.n	8003ad4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	330c      	adds	r3, #12
 8003a56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5a:	e853 3f00 	ldrex	r3, [r3]
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	330c      	adds	r3, #12
 8003a6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a70:	637a      	str	r2, [r7, #52]	; 0x34
 8003a72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a78:	e841 2300 	strex	r3, r2, [r1]
 8003a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1e5      	bne.n	8003a50 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3314      	adds	r3, #20
 8003a8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	e853 3f00 	ldrex	r3, [r3]
 8003a92:	613b      	str	r3, [r7, #16]
   return(result);
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f023 0301 	bic.w	r3, r3, #1
 8003a9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3314      	adds	r3, #20
 8003aa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003aa4:	623a      	str	r2, [r7, #32]
 8003aa6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa8:	69f9      	ldr	r1, [r7, #28]
 8003aaa:	6a3a      	ldr	r2, [r7, #32]
 8003aac:	e841 2300 	strex	r3, r2, [r1]
 8003ab0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1e5      	bne.n	8003a84 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e00f      	b.n	8003af4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	4013      	ands	r3, r2
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	bf0c      	ite	eq
 8003ae4:	2301      	moveq	r3, #1
 8003ae6:	2300      	movne	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	461a      	mov	r2, r3
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d09f      	beq.n	8003a32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3740      	adds	r7, #64	; 0x40
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b095      	sub	sp, #84	; 0x54
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	330c      	adds	r3, #12
 8003b0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b0e:	e853 3f00 	ldrex	r3, [r3]
 8003b12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	330c      	adds	r3, #12
 8003b22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b24:	643a      	str	r2, [r7, #64]	; 0x40
 8003b26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b2c:	e841 2300 	strex	r3, r2, [r1]
 8003b30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1e5      	bne.n	8003b04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3314      	adds	r3, #20
 8003b3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	e853 3f00 	ldrex	r3, [r3]
 8003b46:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f023 0301 	bic.w	r3, r3, #1
 8003b4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3314      	adds	r3, #20
 8003b56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b60:	e841 2300 	strex	r3, r2, [r1]
 8003b64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e5      	bne.n	8003b38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d119      	bne.n	8003ba8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	330c      	adds	r3, #12
 8003b7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	e853 3f00 	ldrex	r3, [r3]
 8003b82:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f023 0310 	bic.w	r3, r3, #16
 8003b8a:	647b      	str	r3, [r7, #68]	; 0x44
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	330c      	adds	r3, #12
 8003b92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b94:	61ba      	str	r2, [r7, #24]
 8003b96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b98:	6979      	ldr	r1, [r7, #20]
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	e841 2300 	strex	r3, r2, [r1]
 8003ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1e5      	bne.n	8003b74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003bb6:	bf00      	nop
 8003bb8:	3754      	adds	r7, #84	; 0x54
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f7ff ff09 	bl	80039f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003be2:	bf00      	nop
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b085      	sub	sp, #20
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b21      	cmp	r3, #33	; 0x21
 8003bfc:	d13e      	bne.n	8003c7c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c06:	d114      	bne.n	8003c32 <UART_Transmit_IT+0x48>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d110      	bne.n	8003c32 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c24:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	1c9a      	adds	r2, r3, #2
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	621a      	str	r2, [r3, #32]
 8003c30:	e008      	b.n	8003c44 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	1c59      	adds	r1, r3, #1
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6211      	str	r1, [r2, #32]
 8003c3c:	781a      	ldrb	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	4619      	mov	r1, r3
 8003c52:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10f      	bne.n	8003c78 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c66:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c76:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e000      	b.n	8003c7e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c7c:	2302      	movs	r3, #2
  }
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b082      	sub	sp, #8
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68da      	ldr	r2, [r3, #12]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ca0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff fe8e 	bl	80039cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b08c      	sub	sp, #48	; 0x30
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b22      	cmp	r3, #34	; 0x22
 8003ccc:	f040 80ab 	bne.w	8003e26 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd8:	d117      	bne.n	8003d0a <UART_Receive_IT+0x50>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d113      	bne.n	8003d0a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d02:	1c9a      	adds	r2, r3, #2
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	629a      	str	r2, [r3, #40]	; 0x28
 8003d08:	e026      	b.n	8003d58 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d1c:	d007      	beq.n	8003d2e <UART_Receive_IT+0x74>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10a      	bne.n	8003d3c <UART_Receive_IT+0x82>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d106      	bne.n	8003d3c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d38:	701a      	strb	r2, [r3, #0]
 8003d3a:	e008      	b.n	8003d4e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	4619      	mov	r1, r3
 8003d66:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d15a      	bne.n	8003e22 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0220 	bic.w	r2, r2, #32
 8003d7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695a      	ldr	r2, [r3, #20]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0201 	bic.w	r2, r2, #1
 8003d9a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d135      	bne.n	8003e18 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	330c      	adds	r3, #12
 8003db8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	e853 3f00 	ldrex	r3, [r3]
 8003dc0:	613b      	str	r3, [r7, #16]
   return(result);
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f023 0310 	bic.w	r3, r3, #16
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	330c      	adds	r3, #12
 8003dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd2:	623a      	str	r2, [r7, #32]
 8003dd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd6:	69f9      	ldr	r1, [r7, #28]
 8003dd8:	6a3a      	ldr	r2, [r7, #32]
 8003dda:	e841 2300 	strex	r3, r2, [r1]
 8003dde:	61bb      	str	r3, [r7, #24]
   return(result);
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1e5      	bne.n	8003db2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0310 	and.w	r3, r3, #16
 8003df0:	2b10      	cmp	r3, #16
 8003df2:	d10a      	bne.n	8003e0a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003df4:	2300      	movs	r3, #0
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e0e:	4619      	mov	r1, r3
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff fdf9 	bl	8003a08 <HAL_UARTEx_RxEventCallback>
 8003e16:	e002      	b.n	8003e1e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff fde1 	bl	80039e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	e002      	b.n	8003e28 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003e22:	2300      	movs	r3, #0
 8003e24:	e000      	b.n	8003e28 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003e26:	2302      	movs	r3, #2
  }
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3730      	adds	r7, #48	; 0x30
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e34:	b0c0      	sub	sp, #256	; 0x100
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e4c:	68d9      	ldr	r1, [r3, #12]
 8003e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	ea40 0301 	orr.w	r3, r0, r1
 8003e58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	431a      	orrs	r2, r3
 8003e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e88:	f021 010c 	bic.w	r1, r1, #12
 8003e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e96:	430b      	orrs	r3, r1
 8003e98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eaa:	6999      	ldr	r1, [r3, #24]
 8003eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	ea40 0301 	orr.w	r3, r0, r1
 8003eb6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	4b8f      	ldr	r3, [pc, #572]	; (80040fc <UART_SetConfig+0x2cc>)
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d005      	beq.n	8003ed0 <UART_SetConfig+0xa0>
 8003ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	4b8d      	ldr	r3, [pc, #564]	; (8004100 <UART_SetConfig+0x2d0>)
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d104      	bne.n	8003eda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ed0:	f7ff f812 	bl	8002ef8 <HAL_RCC_GetPCLK2Freq>
 8003ed4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ed8:	e003      	b.n	8003ee2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003eda:	f7fe fff9 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 8003ede:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eec:	f040 810c 	bne.w	8004108 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ef0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003efa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003efe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f02:	4622      	mov	r2, r4
 8003f04:	462b      	mov	r3, r5
 8003f06:	1891      	adds	r1, r2, r2
 8003f08:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f0a:	415b      	adcs	r3, r3
 8003f0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f12:	4621      	mov	r1, r4
 8003f14:	eb12 0801 	adds.w	r8, r2, r1
 8003f18:	4629      	mov	r1, r5
 8003f1a:	eb43 0901 	adc.w	r9, r3, r1
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	f04f 0300 	mov.w	r3, #0
 8003f26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f32:	4690      	mov	r8, r2
 8003f34:	4699      	mov	r9, r3
 8003f36:	4623      	mov	r3, r4
 8003f38:	eb18 0303 	adds.w	r3, r8, r3
 8003f3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f40:	462b      	mov	r3, r5
 8003f42:	eb49 0303 	adc.w	r3, r9, r3
 8003f46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f5e:	460b      	mov	r3, r1
 8003f60:	18db      	adds	r3, r3, r3
 8003f62:	653b      	str	r3, [r7, #80]	; 0x50
 8003f64:	4613      	mov	r3, r2
 8003f66:	eb42 0303 	adc.w	r3, r2, r3
 8003f6a:	657b      	str	r3, [r7, #84]	; 0x54
 8003f6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003f74:	f7fc fdaa 	bl	8000acc <__aeabi_uldivmod>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4b61      	ldr	r3, [pc, #388]	; (8004104 <UART_SetConfig+0x2d4>)
 8003f7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f82:	095b      	lsrs	r3, r3, #5
 8003f84:	011c      	lsls	r4, r3, #4
 8003f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003f98:	4642      	mov	r2, r8
 8003f9a:	464b      	mov	r3, r9
 8003f9c:	1891      	adds	r1, r2, r2
 8003f9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003fa0:	415b      	adcs	r3, r3
 8003fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fa4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003fa8:	4641      	mov	r1, r8
 8003faa:	eb12 0a01 	adds.w	sl, r2, r1
 8003fae:	4649      	mov	r1, r9
 8003fb0:	eb43 0b01 	adc.w	fp, r3, r1
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fc8:	4692      	mov	sl, r2
 8003fca:	469b      	mov	fp, r3
 8003fcc:	4643      	mov	r3, r8
 8003fce:	eb1a 0303 	adds.w	r3, sl, r3
 8003fd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fd6:	464b      	mov	r3, r9
 8003fd8:	eb4b 0303 	adc.w	r3, fp, r3
 8003fdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ff0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	18db      	adds	r3, r3, r3
 8003ff8:	643b      	str	r3, [r7, #64]	; 0x40
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	eb42 0303 	adc.w	r3, r2, r3
 8004000:	647b      	str	r3, [r7, #68]	; 0x44
 8004002:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004006:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800400a:	f7fc fd5f 	bl	8000acc <__aeabi_uldivmod>
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	4611      	mov	r1, r2
 8004014:	4b3b      	ldr	r3, [pc, #236]	; (8004104 <UART_SetConfig+0x2d4>)
 8004016:	fba3 2301 	umull	r2, r3, r3, r1
 800401a:	095b      	lsrs	r3, r3, #5
 800401c:	2264      	movs	r2, #100	; 0x64
 800401e:	fb02 f303 	mul.w	r3, r2, r3
 8004022:	1acb      	subs	r3, r1, r3
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800402a:	4b36      	ldr	r3, [pc, #216]	; (8004104 <UART_SetConfig+0x2d4>)
 800402c:	fba3 2302 	umull	r2, r3, r3, r2
 8004030:	095b      	lsrs	r3, r3, #5
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004038:	441c      	add	r4, r3
 800403a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800403e:	2200      	movs	r2, #0
 8004040:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004044:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004048:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800404c:	4642      	mov	r2, r8
 800404e:	464b      	mov	r3, r9
 8004050:	1891      	adds	r1, r2, r2
 8004052:	63b9      	str	r1, [r7, #56]	; 0x38
 8004054:	415b      	adcs	r3, r3
 8004056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004058:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800405c:	4641      	mov	r1, r8
 800405e:	1851      	adds	r1, r2, r1
 8004060:	6339      	str	r1, [r7, #48]	; 0x30
 8004062:	4649      	mov	r1, r9
 8004064:	414b      	adcs	r3, r1
 8004066:	637b      	str	r3, [r7, #52]	; 0x34
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004074:	4659      	mov	r1, fp
 8004076:	00cb      	lsls	r3, r1, #3
 8004078:	4651      	mov	r1, sl
 800407a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800407e:	4651      	mov	r1, sl
 8004080:	00ca      	lsls	r2, r1, #3
 8004082:	4610      	mov	r0, r2
 8004084:	4619      	mov	r1, r3
 8004086:	4603      	mov	r3, r0
 8004088:	4642      	mov	r2, r8
 800408a:	189b      	adds	r3, r3, r2
 800408c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004090:	464b      	mov	r3, r9
 8004092:	460a      	mov	r2, r1
 8004094:	eb42 0303 	adc.w	r3, r2, r3
 8004098:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800409c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80040ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040b0:	460b      	mov	r3, r1
 80040b2:	18db      	adds	r3, r3, r3
 80040b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80040b6:	4613      	mov	r3, r2
 80040b8:	eb42 0303 	adc.w	r3, r2, r3
 80040bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80040c6:	f7fc fd01 	bl	8000acc <__aeabi_uldivmod>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	4b0d      	ldr	r3, [pc, #52]	; (8004104 <UART_SetConfig+0x2d4>)
 80040d0:	fba3 1302 	umull	r1, r3, r3, r2
 80040d4:	095b      	lsrs	r3, r3, #5
 80040d6:	2164      	movs	r1, #100	; 0x64
 80040d8:	fb01 f303 	mul.w	r3, r1, r3
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	3332      	adds	r3, #50	; 0x32
 80040e2:	4a08      	ldr	r2, [pc, #32]	; (8004104 <UART_SetConfig+0x2d4>)
 80040e4:	fba2 2303 	umull	r2, r3, r2, r3
 80040e8:	095b      	lsrs	r3, r3, #5
 80040ea:	f003 0207 	and.w	r2, r3, #7
 80040ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4422      	add	r2, r4
 80040f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040f8:	e106      	b.n	8004308 <UART_SetConfig+0x4d8>
 80040fa:	bf00      	nop
 80040fc:	40011000 	.word	0x40011000
 8004100:	40011400 	.word	0x40011400
 8004104:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004108:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800410c:	2200      	movs	r2, #0
 800410e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004112:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004116:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800411a:	4642      	mov	r2, r8
 800411c:	464b      	mov	r3, r9
 800411e:	1891      	adds	r1, r2, r2
 8004120:	6239      	str	r1, [r7, #32]
 8004122:	415b      	adcs	r3, r3
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
 8004126:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800412a:	4641      	mov	r1, r8
 800412c:	1854      	adds	r4, r2, r1
 800412e:	4649      	mov	r1, r9
 8004130:	eb43 0501 	adc.w	r5, r3, r1
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	00eb      	lsls	r3, r5, #3
 800413e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004142:	00e2      	lsls	r2, r4, #3
 8004144:	4614      	mov	r4, r2
 8004146:	461d      	mov	r5, r3
 8004148:	4643      	mov	r3, r8
 800414a:	18e3      	adds	r3, r4, r3
 800414c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004150:	464b      	mov	r3, r9
 8004152:	eb45 0303 	adc.w	r3, r5, r3
 8004156:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800415a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004166:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800416a:	f04f 0200 	mov.w	r2, #0
 800416e:	f04f 0300 	mov.w	r3, #0
 8004172:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004176:	4629      	mov	r1, r5
 8004178:	008b      	lsls	r3, r1, #2
 800417a:	4621      	mov	r1, r4
 800417c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004180:	4621      	mov	r1, r4
 8004182:	008a      	lsls	r2, r1, #2
 8004184:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004188:	f7fc fca0 	bl	8000acc <__aeabi_uldivmod>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4b60      	ldr	r3, [pc, #384]	; (8004314 <UART_SetConfig+0x4e4>)
 8004192:	fba3 2302 	umull	r2, r3, r3, r2
 8004196:	095b      	lsrs	r3, r3, #5
 8004198:	011c      	lsls	r4, r3, #4
 800419a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800419e:	2200      	movs	r2, #0
 80041a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80041a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80041ac:	4642      	mov	r2, r8
 80041ae:	464b      	mov	r3, r9
 80041b0:	1891      	adds	r1, r2, r2
 80041b2:	61b9      	str	r1, [r7, #24]
 80041b4:	415b      	adcs	r3, r3
 80041b6:	61fb      	str	r3, [r7, #28]
 80041b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041bc:	4641      	mov	r1, r8
 80041be:	1851      	adds	r1, r2, r1
 80041c0:	6139      	str	r1, [r7, #16]
 80041c2:	4649      	mov	r1, r9
 80041c4:	414b      	adcs	r3, r1
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041d4:	4659      	mov	r1, fp
 80041d6:	00cb      	lsls	r3, r1, #3
 80041d8:	4651      	mov	r1, sl
 80041da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041de:	4651      	mov	r1, sl
 80041e0:	00ca      	lsls	r2, r1, #3
 80041e2:	4610      	mov	r0, r2
 80041e4:	4619      	mov	r1, r3
 80041e6:	4603      	mov	r3, r0
 80041e8:	4642      	mov	r2, r8
 80041ea:	189b      	adds	r3, r3, r2
 80041ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041f0:	464b      	mov	r3, r9
 80041f2:	460a      	mov	r2, r1
 80041f4:	eb42 0303 	adc.w	r3, r2, r3
 80041f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	67bb      	str	r3, [r7, #120]	; 0x78
 8004206:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004214:	4649      	mov	r1, r9
 8004216:	008b      	lsls	r3, r1, #2
 8004218:	4641      	mov	r1, r8
 800421a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800421e:	4641      	mov	r1, r8
 8004220:	008a      	lsls	r2, r1, #2
 8004222:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004226:	f7fc fc51 	bl	8000acc <__aeabi_uldivmod>
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	4611      	mov	r1, r2
 8004230:	4b38      	ldr	r3, [pc, #224]	; (8004314 <UART_SetConfig+0x4e4>)
 8004232:	fba3 2301 	umull	r2, r3, r3, r1
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	2264      	movs	r2, #100	; 0x64
 800423a:	fb02 f303 	mul.w	r3, r2, r3
 800423e:	1acb      	subs	r3, r1, r3
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	3332      	adds	r3, #50	; 0x32
 8004244:	4a33      	ldr	r2, [pc, #204]	; (8004314 <UART_SetConfig+0x4e4>)
 8004246:	fba2 2303 	umull	r2, r3, r2, r3
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004250:	441c      	add	r4, r3
 8004252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004256:	2200      	movs	r2, #0
 8004258:	673b      	str	r3, [r7, #112]	; 0x70
 800425a:	677a      	str	r2, [r7, #116]	; 0x74
 800425c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004260:	4642      	mov	r2, r8
 8004262:	464b      	mov	r3, r9
 8004264:	1891      	adds	r1, r2, r2
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	415b      	adcs	r3, r3
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004270:	4641      	mov	r1, r8
 8004272:	1851      	adds	r1, r2, r1
 8004274:	6039      	str	r1, [r7, #0]
 8004276:	4649      	mov	r1, r9
 8004278:	414b      	adcs	r3, r1
 800427a:	607b      	str	r3, [r7, #4]
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004288:	4659      	mov	r1, fp
 800428a:	00cb      	lsls	r3, r1, #3
 800428c:	4651      	mov	r1, sl
 800428e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004292:	4651      	mov	r1, sl
 8004294:	00ca      	lsls	r2, r1, #3
 8004296:	4610      	mov	r0, r2
 8004298:	4619      	mov	r1, r3
 800429a:	4603      	mov	r3, r0
 800429c:	4642      	mov	r2, r8
 800429e:	189b      	adds	r3, r3, r2
 80042a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80042a2:	464b      	mov	r3, r9
 80042a4:	460a      	mov	r2, r1
 80042a6:	eb42 0303 	adc.w	r3, r2, r3
 80042aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	663b      	str	r3, [r7, #96]	; 0x60
 80042b6:	667a      	str	r2, [r7, #100]	; 0x64
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80042c4:	4649      	mov	r1, r9
 80042c6:	008b      	lsls	r3, r1, #2
 80042c8:	4641      	mov	r1, r8
 80042ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042ce:	4641      	mov	r1, r8
 80042d0:	008a      	lsls	r2, r1, #2
 80042d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80042d6:	f7fc fbf9 	bl	8000acc <__aeabi_uldivmod>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <UART_SetConfig+0x4e4>)
 80042e0:	fba3 1302 	umull	r1, r3, r3, r2
 80042e4:	095b      	lsrs	r3, r3, #5
 80042e6:	2164      	movs	r1, #100	; 0x64
 80042e8:	fb01 f303 	mul.w	r3, r1, r3
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	3332      	adds	r3, #50	; 0x32
 80042f2:	4a08      	ldr	r2, [pc, #32]	; (8004314 <UART_SetConfig+0x4e4>)
 80042f4:	fba2 2303 	umull	r2, r3, r2, r3
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	f003 020f 	and.w	r2, r3, #15
 80042fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4422      	add	r2, r4
 8004306:	609a      	str	r2, [r3, #8]
}
 8004308:	bf00      	nop
 800430a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800430e:	46bd      	mov	sp, r7
 8004310:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004314:	51eb851f 	.word	0x51eb851f

08004318 <siprintf>:
 8004318:	b40e      	push	{r1, r2, r3}
 800431a:	b500      	push	{lr}
 800431c:	b09c      	sub	sp, #112	; 0x70
 800431e:	ab1d      	add	r3, sp, #116	; 0x74
 8004320:	9002      	str	r0, [sp, #8]
 8004322:	9006      	str	r0, [sp, #24]
 8004324:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004328:	4809      	ldr	r0, [pc, #36]	; (8004350 <siprintf+0x38>)
 800432a:	9107      	str	r1, [sp, #28]
 800432c:	9104      	str	r1, [sp, #16]
 800432e:	4909      	ldr	r1, [pc, #36]	; (8004354 <siprintf+0x3c>)
 8004330:	f853 2b04 	ldr.w	r2, [r3], #4
 8004334:	9105      	str	r1, [sp, #20]
 8004336:	6800      	ldr	r0, [r0, #0]
 8004338:	9301      	str	r3, [sp, #4]
 800433a:	a902      	add	r1, sp, #8
 800433c:	f000 f992 	bl	8004664 <_svfiprintf_r>
 8004340:	9b02      	ldr	r3, [sp, #8]
 8004342:	2200      	movs	r2, #0
 8004344:	701a      	strb	r2, [r3, #0]
 8004346:	b01c      	add	sp, #112	; 0x70
 8004348:	f85d eb04 	ldr.w	lr, [sp], #4
 800434c:	b003      	add	sp, #12
 800434e:	4770      	bx	lr
 8004350:	20000058 	.word	0x20000058
 8004354:	ffff0208 	.word	0xffff0208

08004358 <memset>:
 8004358:	4402      	add	r2, r0
 800435a:	4603      	mov	r3, r0
 800435c:	4293      	cmp	r3, r2
 800435e:	d100      	bne.n	8004362 <memset+0xa>
 8004360:	4770      	bx	lr
 8004362:	f803 1b01 	strb.w	r1, [r3], #1
 8004366:	e7f9      	b.n	800435c <memset+0x4>

08004368 <__errno>:
 8004368:	4b01      	ldr	r3, [pc, #4]	; (8004370 <__errno+0x8>)
 800436a:	6818      	ldr	r0, [r3, #0]
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	20000058 	.word	0x20000058

08004374 <__libc_init_array>:
 8004374:	b570      	push	{r4, r5, r6, lr}
 8004376:	4d0d      	ldr	r5, [pc, #52]	; (80043ac <__libc_init_array+0x38>)
 8004378:	4c0d      	ldr	r4, [pc, #52]	; (80043b0 <__libc_init_array+0x3c>)
 800437a:	1b64      	subs	r4, r4, r5
 800437c:	10a4      	asrs	r4, r4, #2
 800437e:	2600      	movs	r6, #0
 8004380:	42a6      	cmp	r6, r4
 8004382:	d109      	bne.n	8004398 <__libc_init_array+0x24>
 8004384:	4d0b      	ldr	r5, [pc, #44]	; (80043b4 <__libc_init_array+0x40>)
 8004386:	4c0c      	ldr	r4, [pc, #48]	; (80043b8 <__libc_init_array+0x44>)
 8004388:	f000 fc6a 	bl	8004c60 <_init>
 800438c:	1b64      	subs	r4, r4, r5
 800438e:	10a4      	asrs	r4, r4, #2
 8004390:	2600      	movs	r6, #0
 8004392:	42a6      	cmp	r6, r4
 8004394:	d105      	bne.n	80043a2 <__libc_init_array+0x2e>
 8004396:	bd70      	pop	{r4, r5, r6, pc}
 8004398:	f855 3b04 	ldr.w	r3, [r5], #4
 800439c:	4798      	blx	r3
 800439e:	3601      	adds	r6, #1
 80043a0:	e7ee      	b.n	8004380 <__libc_init_array+0xc>
 80043a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043a6:	4798      	blx	r3
 80043a8:	3601      	adds	r6, #1
 80043aa:	e7f2      	b.n	8004392 <__libc_init_array+0x1e>
 80043ac:	08004ce0 	.word	0x08004ce0
 80043b0:	08004ce0 	.word	0x08004ce0
 80043b4:	08004ce0 	.word	0x08004ce0
 80043b8:	08004ce4 	.word	0x08004ce4

080043bc <__retarget_lock_acquire_recursive>:
 80043bc:	4770      	bx	lr

080043be <__retarget_lock_release_recursive>:
 80043be:	4770      	bx	lr

080043c0 <_free_r>:
 80043c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043c2:	2900      	cmp	r1, #0
 80043c4:	d044      	beq.n	8004450 <_free_r+0x90>
 80043c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043ca:	9001      	str	r0, [sp, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f1a1 0404 	sub.w	r4, r1, #4
 80043d2:	bfb8      	it	lt
 80043d4:	18e4      	addlt	r4, r4, r3
 80043d6:	f000 f8df 	bl	8004598 <__malloc_lock>
 80043da:	4a1e      	ldr	r2, [pc, #120]	; (8004454 <_free_r+0x94>)
 80043dc:	9801      	ldr	r0, [sp, #4]
 80043de:	6813      	ldr	r3, [r2, #0]
 80043e0:	b933      	cbnz	r3, 80043f0 <_free_r+0x30>
 80043e2:	6063      	str	r3, [r4, #4]
 80043e4:	6014      	str	r4, [r2, #0]
 80043e6:	b003      	add	sp, #12
 80043e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043ec:	f000 b8da 	b.w	80045a4 <__malloc_unlock>
 80043f0:	42a3      	cmp	r3, r4
 80043f2:	d908      	bls.n	8004406 <_free_r+0x46>
 80043f4:	6825      	ldr	r5, [r4, #0]
 80043f6:	1961      	adds	r1, r4, r5
 80043f8:	428b      	cmp	r3, r1
 80043fa:	bf01      	itttt	eq
 80043fc:	6819      	ldreq	r1, [r3, #0]
 80043fe:	685b      	ldreq	r3, [r3, #4]
 8004400:	1949      	addeq	r1, r1, r5
 8004402:	6021      	streq	r1, [r4, #0]
 8004404:	e7ed      	b.n	80043e2 <_free_r+0x22>
 8004406:	461a      	mov	r2, r3
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	b10b      	cbz	r3, 8004410 <_free_r+0x50>
 800440c:	42a3      	cmp	r3, r4
 800440e:	d9fa      	bls.n	8004406 <_free_r+0x46>
 8004410:	6811      	ldr	r1, [r2, #0]
 8004412:	1855      	adds	r5, r2, r1
 8004414:	42a5      	cmp	r5, r4
 8004416:	d10b      	bne.n	8004430 <_free_r+0x70>
 8004418:	6824      	ldr	r4, [r4, #0]
 800441a:	4421      	add	r1, r4
 800441c:	1854      	adds	r4, r2, r1
 800441e:	42a3      	cmp	r3, r4
 8004420:	6011      	str	r1, [r2, #0]
 8004422:	d1e0      	bne.n	80043e6 <_free_r+0x26>
 8004424:	681c      	ldr	r4, [r3, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	6053      	str	r3, [r2, #4]
 800442a:	440c      	add	r4, r1
 800442c:	6014      	str	r4, [r2, #0]
 800442e:	e7da      	b.n	80043e6 <_free_r+0x26>
 8004430:	d902      	bls.n	8004438 <_free_r+0x78>
 8004432:	230c      	movs	r3, #12
 8004434:	6003      	str	r3, [r0, #0]
 8004436:	e7d6      	b.n	80043e6 <_free_r+0x26>
 8004438:	6825      	ldr	r5, [r4, #0]
 800443a:	1961      	adds	r1, r4, r5
 800443c:	428b      	cmp	r3, r1
 800443e:	bf04      	itt	eq
 8004440:	6819      	ldreq	r1, [r3, #0]
 8004442:	685b      	ldreq	r3, [r3, #4]
 8004444:	6063      	str	r3, [r4, #4]
 8004446:	bf04      	itt	eq
 8004448:	1949      	addeq	r1, r1, r5
 800444a:	6021      	streq	r1, [r4, #0]
 800444c:	6054      	str	r4, [r2, #4]
 800444e:	e7ca      	b.n	80043e6 <_free_r+0x26>
 8004450:	b003      	add	sp, #12
 8004452:	bd30      	pop	{r4, r5, pc}
 8004454:	2000029c 	.word	0x2000029c

08004458 <sbrk_aligned>:
 8004458:	b570      	push	{r4, r5, r6, lr}
 800445a:	4e0e      	ldr	r6, [pc, #56]	; (8004494 <sbrk_aligned+0x3c>)
 800445c:	460c      	mov	r4, r1
 800445e:	6831      	ldr	r1, [r6, #0]
 8004460:	4605      	mov	r5, r0
 8004462:	b911      	cbnz	r1, 800446a <sbrk_aligned+0x12>
 8004464:	f000 fba6 	bl	8004bb4 <_sbrk_r>
 8004468:	6030      	str	r0, [r6, #0]
 800446a:	4621      	mov	r1, r4
 800446c:	4628      	mov	r0, r5
 800446e:	f000 fba1 	bl	8004bb4 <_sbrk_r>
 8004472:	1c43      	adds	r3, r0, #1
 8004474:	d00a      	beq.n	800448c <sbrk_aligned+0x34>
 8004476:	1cc4      	adds	r4, r0, #3
 8004478:	f024 0403 	bic.w	r4, r4, #3
 800447c:	42a0      	cmp	r0, r4
 800447e:	d007      	beq.n	8004490 <sbrk_aligned+0x38>
 8004480:	1a21      	subs	r1, r4, r0
 8004482:	4628      	mov	r0, r5
 8004484:	f000 fb96 	bl	8004bb4 <_sbrk_r>
 8004488:	3001      	adds	r0, #1
 800448a:	d101      	bne.n	8004490 <sbrk_aligned+0x38>
 800448c:	f04f 34ff 	mov.w	r4, #4294967295
 8004490:	4620      	mov	r0, r4
 8004492:	bd70      	pop	{r4, r5, r6, pc}
 8004494:	200002a0 	.word	0x200002a0

08004498 <_malloc_r>:
 8004498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800449c:	1ccd      	adds	r5, r1, #3
 800449e:	f025 0503 	bic.w	r5, r5, #3
 80044a2:	3508      	adds	r5, #8
 80044a4:	2d0c      	cmp	r5, #12
 80044a6:	bf38      	it	cc
 80044a8:	250c      	movcc	r5, #12
 80044aa:	2d00      	cmp	r5, #0
 80044ac:	4607      	mov	r7, r0
 80044ae:	db01      	blt.n	80044b4 <_malloc_r+0x1c>
 80044b0:	42a9      	cmp	r1, r5
 80044b2:	d905      	bls.n	80044c0 <_malloc_r+0x28>
 80044b4:	230c      	movs	r3, #12
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	2600      	movs	r6, #0
 80044ba:	4630      	mov	r0, r6
 80044bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004594 <_malloc_r+0xfc>
 80044c4:	f000 f868 	bl	8004598 <__malloc_lock>
 80044c8:	f8d8 3000 	ldr.w	r3, [r8]
 80044cc:	461c      	mov	r4, r3
 80044ce:	bb5c      	cbnz	r4, 8004528 <_malloc_r+0x90>
 80044d0:	4629      	mov	r1, r5
 80044d2:	4638      	mov	r0, r7
 80044d4:	f7ff ffc0 	bl	8004458 <sbrk_aligned>
 80044d8:	1c43      	adds	r3, r0, #1
 80044da:	4604      	mov	r4, r0
 80044dc:	d155      	bne.n	800458a <_malloc_r+0xf2>
 80044de:	f8d8 4000 	ldr.w	r4, [r8]
 80044e2:	4626      	mov	r6, r4
 80044e4:	2e00      	cmp	r6, #0
 80044e6:	d145      	bne.n	8004574 <_malloc_r+0xdc>
 80044e8:	2c00      	cmp	r4, #0
 80044ea:	d048      	beq.n	800457e <_malloc_r+0xe6>
 80044ec:	6823      	ldr	r3, [r4, #0]
 80044ee:	4631      	mov	r1, r6
 80044f0:	4638      	mov	r0, r7
 80044f2:	eb04 0903 	add.w	r9, r4, r3
 80044f6:	f000 fb5d 	bl	8004bb4 <_sbrk_r>
 80044fa:	4581      	cmp	r9, r0
 80044fc:	d13f      	bne.n	800457e <_malloc_r+0xe6>
 80044fe:	6821      	ldr	r1, [r4, #0]
 8004500:	1a6d      	subs	r5, r5, r1
 8004502:	4629      	mov	r1, r5
 8004504:	4638      	mov	r0, r7
 8004506:	f7ff ffa7 	bl	8004458 <sbrk_aligned>
 800450a:	3001      	adds	r0, #1
 800450c:	d037      	beq.n	800457e <_malloc_r+0xe6>
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	442b      	add	r3, r5
 8004512:	6023      	str	r3, [r4, #0]
 8004514:	f8d8 3000 	ldr.w	r3, [r8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d038      	beq.n	800458e <_malloc_r+0xf6>
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	42a2      	cmp	r2, r4
 8004520:	d12b      	bne.n	800457a <_malloc_r+0xe2>
 8004522:	2200      	movs	r2, #0
 8004524:	605a      	str	r2, [r3, #4]
 8004526:	e00f      	b.n	8004548 <_malloc_r+0xb0>
 8004528:	6822      	ldr	r2, [r4, #0]
 800452a:	1b52      	subs	r2, r2, r5
 800452c:	d41f      	bmi.n	800456e <_malloc_r+0xd6>
 800452e:	2a0b      	cmp	r2, #11
 8004530:	d917      	bls.n	8004562 <_malloc_r+0xca>
 8004532:	1961      	adds	r1, r4, r5
 8004534:	42a3      	cmp	r3, r4
 8004536:	6025      	str	r5, [r4, #0]
 8004538:	bf18      	it	ne
 800453a:	6059      	strne	r1, [r3, #4]
 800453c:	6863      	ldr	r3, [r4, #4]
 800453e:	bf08      	it	eq
 8004540:	f8c8 1000 	streq.w	r1, [r8]
 8004544:	5162      	str	r2, [r4, r5]
 8004546:	604b      	str	r3, [r1, #4]
 8004548:	4638      	mov	r0, r7
 800454a:	f104 060b 	add.w	r6, r4, #11
 800454e:	f000 f829 	bl	80045a4 <__malloc_unlock>
 8004552:	f026 0607 	bic.w	r6, r6, #7
 8004556:	1d23      	adds	r3, r4, #4
 8004558:	1af2      	subs	r2, r6, r3
 800455a:	d0ae      	beq.n	80044ba <_malloc_r+0x22>
 800455c:	1b9b      	subs	r3, r3, r6
 800455e:	50a3      	str	r3, [r4, r2]
 8004560:	e7ab      	b.n	80044ba <_malloc_r+0x22>
 8004562:	42a3      	cmp	r3, r4
 8004564:	6862      	ldr	r2, [r4, #4]
 8004566:	d1dd      	bne.n	8004524 <_malloc_r+0x8c>
 8004568:	f8c8 2000 	str.w	r2, [r8]
 800456c:	e7ec      	b.n	8004548 <_malloc_r+0xb0>
 800456e:	4623      	mov	r3, r4
 8004570:	6864      	ldr	r4, [r4, #4]
 8004572:	e7ac      	b.n	80044ce <_malloc_r+0x36>
 8004574:	4634      	mov	r4, r6
 8004576:	6876      	ldr	r6, [r6, #4]
 8004578:	e7b4      	b.n	80044e4 <_malloc_r+0x4c>
 800457a:	4613      	mov	r3, r2
 800457c:	e7cc      	b.n	8004518 <_malloc_r+0x80>
 800457e:	230c      	movs	r3, #12
 8004580:	603b      	str	r3, [r7, #0]
 8004582:	4638      	mov	r0, r7
 8004584:	f000 f80e 	bl	80045a4 <__malloc_unlock>
 8004588:	e797      	b.n	80044ba <_malloc_r+0x22>
 800458a:	6025      	str	r5, [r4, #0]
 800458c:	e7dc      	b.n	8004548 <_malloc_r+0xb0>
 800458e:	605b      	str	r3, [r3, #4]
 8004590:	deff      	udf	#255	; 0xff
 8004592:	bf00      	nop
 8004594:	2000029c 	.word	0x2000029c

08004598 <__malloc_lock>:
 8004598:	4801      	ldr	r0, [pc, #4]	; (80045a0 <__malloc_lock+0x8>)
 800459a:	f7ff bf0f 	b.w	80043bc <__retarget_lock_acquire_recursive>
 800459e:	bf00      	nop
 80045a0:	20000298 	.word	0x20000298

080045a4 <__malloc_unlock>:
 80045a4:	4801      	ldr	r0, [pc, #4]	; (80045ac <__malloc_unlock+0x8>)
 80045a6:	f7ff bf0a 	b.w	80043be <__retarget_lock_release_recursive>
 80045aa:	bf00      	nop
 80045ac:	20000298 	.word	0x20000298

080045b0 <__ssputs_r>:
 80045b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045b4:	688e      	ldr	r6, [r1, #8]
 80045b6:	461f      	mov	r7, r3
 80045b8:	42be      	cmp	r6, r7
 80045ba:	680b      	ldr	r3, [r1, #0]
 80045bc:	4682      	mov	sl, r0
 80045be:	460c      	mov	r4, r1
 80045c0:	4690      	mov	r8, r2
 80045c2:	d82c      	bhi.n	800461e <__ssputs_r+0x6e>
 80045c4:	898a      	ldrh	r2, [r1, #12]
 80045c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045ca:	d026      	beq.n	800461a <__ssputs_r+0x6a>
 80045cc:	6965      	ldr	r5, [r4, #20]
 80045ce:	6909      	ldr	r1, [r1, #16]
 80045d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045d4:	eba3 0901 	sub.w	r9, r3, r1
 80045d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045dc:	1c7b      	adds	r3, r7, #1
 80045de:	444b      	add	r3, r9
 80045e0:	106d      	asrs	r5, r5, #1
 80045e2:	429d      	cmp	r5, r3
 80045e4:	bf38      	it	cc
 80045e6:	461d      	movcc	r5, r3
 80045e8:	0553      	lsls	r3, r2, #21
 80045ea:	d527      	bpl.n	800463c <__ssputs_r+0x8c>
 80045ec:	4629      	mov	r1, r5
 80045ee:	f7ff ff53 	bl	8004498 <_malloc_r>
 80045f2:	4606      	mov	r6, r0
 80045f4:	b360      	cbz	r0, 8004650 <__ssputs_r+0xa0>
 80045f6:	6921      	ldr	r1, [r4, #16]
 80045f8:	464a      	mov	r2, r9
 80045fa:	f000 faeb 	bl	8004bd4 <memcpy>
 80045fe:	89a3      	ldrh	r3, [r4, #12]
 8004600:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004608:	81a3      	strh	r3, [r4, #12]
 800460a:	6126      	str	r6, [r4, #16]
 800460c:	6165      	str	r5, [r4, #20]
 800460e:	444e      	add	r6, r9
 8004610:	eba5 0509 	sub.w	r5, r5, r9
 8004614:	6026      	str	r6, [r4, #0]
 8004616:	60a5      	str	r5, [r4, #8]
 8004618:	463e      	mov	r6, r7
 800461a:	42be      	cmp	r6, r7
 800461c:	d900      	bls.n	8004620 <__ssputs_r+0x70>
 800461e:	463e      	mov	r6, r7
 8004620:	6820      	ldr	r0, [r4, #0]
 8004622:	4632      	mov	r2, r6
 8004624:	4641      	mov	r1, r8
 8004626:	f000 faab 	bl	8004b80 <memmove>
 800462a:	68a3      	ldr	r3, [r4, #8]
 800462c:	1b9b      	subs	r3, r3, r6
 800462e:	60a3      	str	r3, [r4, #8]
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	4433      	add	r3, r6
 8004634:	6023      	str	r3, [r4, #0]
 8004636:	2000      	movs	r0, #0
 8004638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800463c:	462a      	mov	r2, r5
 800463e:	f000 fad7 	bl	8004bf0 <_realloc_r>
 8004642:	4606      	mov	r6, r0
 8004644:	2800      	cmp	r0, #0
 8004646:	d1e0      	bne.n	800460a <__ssputs_r+0x5a>
 8004648:	6921      	ldr	r1, [r4, #16]
 800464a:	4650      	mov	r0, sl
 800464c:	f7ff feb8 	bl	80043c0 <_free_r>
 8004650:	230c      	movs	r3, #12
 8004652:	f8ca 3000 	str.w	r3, [sl]
 8004656:	89a3      	ldrh	r3, [r4, #12]
 8004658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800465c:	81a3      	strh	r3, [r4, #12]
 800465e:	f04f 30ff 	mov.w	r0, #4294967295
 8004662:	e7e9      	b.n	8004638 <__ssputs_r+0x88>

08004664 <_svfiprintf_r>:
 8004664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004668:	4698      	mov	r8, r3
 800466a:	898b      	ldrh	r3, [r1, #12]
 800466c:	061b      	lsls	r3, r3, #24
 800466e:	b09d      	sub	sp, #116	; 0x74
 8004670:	4607      	mov	r7, r0
 8004672:	460d      	mov	r5, r1
 8004674:	4614      	mov	r4, r2
 8004676:	d50e      	bpl.n	8004696 <_svfiprintf_r+0x32>
 8004678:	690b      	ldr	r3, [r1, #16]
 800467a:	b963      	cbnz	r3, 8004696 <_svfiprintf_r+0x32>
 800467c:	2140      	movs	r1, #64	; 0x40
 800467e:	f7ff ff0b 	bl	8004498 <_malloc_r>
 8004682:	6028      	str	r0, [r5, #0]
 8004684:	6128      	str	r0, [r5, #16]
 8004686:	b920      	cbnz	r0, 8004692 <_svfiprintf_r+0x2e>
 8004688:	230c      	movs	r3, #12
 800468a:	603b      	str	r3, [r7, #0]
 800468c:	f04f 30ff 	mov.w	r0, #4294967295
 8004690:	e0d0      	b.n	8004834 <_svfiprintf_r+0x1d0>
 8004692:	2340      	movs	r3, #64	; 0x40
 8004694:	616b      	str	r3, [r5, #20]
 8004696:	2300      	movs	r3, #0
 8004698:	9309      	str	r3, [sp, #36]	; 0x24
 800469a:	2320      	movs	r3, #32
 800469c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80046a4:	2330      	movs	r3, #48	; 0x30
 80046a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800484c <_svfiprintf_r+0x1e8>
 80046aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046ae:	f04f 0901 	mov.w	r9, #1
 80046b2:	4623      	mov	r3, r4
 80046b4:	469a      	mov	sl, r3
 80046b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046ba:	b10a      	cbz	r2, 80046c0 <_svfiprintf_r+0x5c>
 80046bc:	2a25      	cmp	r2, #37	; 0x25
 80046be:	d1f9      	bne.n	80046b4 <_svfiprintf_r+0x50>
 80046c0:	ebba 0b04 	subs.w	fp, sl, r4
 80046c4:	d00b      	beq.n	80046de <_svfiprintf_r+0x7a>
 80046c6:	465b      	mov	r3, fp
 80046c8:	4622      	mov	r2, r4
 80046ca:	4629      	mov	r1, r5
 80046cc:	4638      	mov	r0, r7
 80046ce:	f7ff ff6f 	bl	80045b0 <__ssputs_r>
 80046d2:	3001      	adds	r0, #1
 80046d4:	f000 80a9 	beq.w	800482a <_svfiprintf_r+0x1c6>
 80046d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046da:	445a      	add	r2, fp
 80046dc:	9209      	str	r2, [sp, #36]	; 0x24
 80046de:	f89a 3000 	ldrb.w	r3, [sl]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 80a1 	beq.w	800482a <_svfiprintf_r+0x1c6>
 80046e8:	2300      	movs	r3, #0
 80046ea:	f04f 32ff 	mov.w	r2, #4294967295
 80046ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046f2:	f10a 0a01 	add.w	sl, sl, #1
 80046f6:	9304      	str	r3, [sp, #16]
 80046f8:	9307      	str	r3, [sp, #28]
 80046fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046fe:	931a      	str	r3, [sp, #104]	; 0x68
 8004700:	4654      	mov	r4, sl
 8004702:	2205      	movs	r2, #5
 8004704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004708:	4850      	ldr	r0, [pc, #320]	; (800484c <_svfiprintf_r+0x1e8>)
 800470a:	f7fb fd71 	bl	80001f0 <memchr>
 800470e:	9a04      	ldr	r2, [sp, #16]
 8004710:	b9d8      	cbnz	r0, 800474a <_svfiprintf_r+0xe6>
 8004712:	06d0      	lsls	r0, r2, #27
 8004714:	bf44      	itt	mi
 8004716:	2320      	movmi	r3, #32
 8004718:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800471c:	0711      	lsls	r1, r2, #28
 800471e:	bf44      	itt	mi
 8004720:	232b      	movmi	r3, #43	; 0x2b
 8004722:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004726:	f89a 3000 	ldrb.w	r3, [sl]
 800472a:	2b2a      	cmp	r3, #42	; 0x2a
 800472c:	d015      	beq.n	800475a <_svfiprintf_r+0xf6>
 800472e:	9a07      	ldr	r2, [sp, #28]
 8004730:	4654      	mov	r4, sl
 8004732:	2000      	movs	r0, #0
 8004734:	f04f 0c0a 	mov.w	ip, #10
 8004738:	4621      	mov	r1, r4
 800473a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800473e:	3b30      	subs	r3, #48	; 0x30
 8004740:	2b09      	cmp	r3, #9
 8004742:	d94d      	bls.n	80047e0 <_svfiprintf_r+0x17c>
 8004744:	b1b0      	cbz	r0, 8004774 <_svfiprintf_r+0x110>
 8004746:	9207      	str	r2, [sp, #28]
 8004748:	e014      	b.n	8004774 <_svfiprintf_r+0x110>
 800474a:	eba0 0308 	sub.w	r3, r0, r8
 800474e:	fa09 f303 	lsl.w	r3, r9, r3
 8004752:	4313      	orrs	r3, r2
 8004754:	9304      	str	r3, [sp, #16]
 8004756:	46a2      	mov	sl, r4
 8004758:	e7d2      	b.n	8004700 <_svfiprintf_r+0x9c>
 800475a:	9b03      	ldr	r3, [sp, #12]
 800475c:	1d19      	adds	r1, r3, #4
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	9103      	str	r1, [sp, #12]
 8004762:	2b00      	cmp	r3, #0
 8004764:	bfbb      	ittet	lt
 8004766:	425b      	neglt	r3, r3
 8004768:	f042 0202 	orrlt.w	r2, r2, #2
 800476c:	9307      	strge	r3, [sp, #28]
 800476e:	9307      	strlt	r3, [sp, #28]
 8004770:	bfb8      	it	lt
 8004772:	9204      	strlt	r2, [sp, #16]
 8004774:	7823      	ldrb	r3, [r4, #0]
 8004776:	2b2e      	cmp	r3, #46	; 0x2e
 8004778:	d10c      	bne.n	8004794 <_svfiprintf_r+0x130>
 800477a:	7863      	ldrb	r3, [r4, #1]
 800477c:	2b2a      	cmp	r3, #42	; 0x2a
 800477e:	d134      	bne.n	80047ea <_svfiprintf_r+0x186>
 8004780:	9b03      	ldr	r3, [sp, #12]
 8004782:	1d1a      	adds	r2, r3, #4
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	9203      	str	r2, [sp, #12]
 8004788:	2b00      	cmp	r3, #0
 800478a:	bfb8      	it	lt
 800478c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004790:	3402      	adds	r4, #2
 8004792:	9305      	str	r3, [sp, #20]
 8004794:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800485c <_svfiprintf_r+0x1f8>
 8004798:	7821      	ldrb	r1, [r4, #0]
 800479a:	2203      	movs	r2, #3
 800479c:	4650      	mov	r0, sl
 800479e:	f7fb fd27 	bl	80001f0 <memchr>
 80047a2:	b138      	cbz	r0, 80047b4 <_svfiprintf_r+0x150>
 80047a4:	9b04      	ldr	r3, [sp, #16]
 80047a6:	eba0 000a 	sub.w	r0, r0, sl
 80047aa:	2240      	movs	r2, #64	; 0x40
 80047ac:	4082      	lsls	r2, r0
 80047ae:	4313      	orrs	r3, r2
 80047b0:	3401      	adds	r4, #1
 80047b2:	9304      	str	r3, [sp, #16]
 80047b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047b8:	4825      	ldr	r0, [pc, #148]	; (8004850 <_svfiprintf_r+0x1ec>)
 80047ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047be:	2206      	movs	r2, #6
 80047c0:	f7fb fd16 	bl	80001f0 <memchr>
 80047c4:	2800      	cmp	r0, #0
 80047c6:	d038      	beq.n	800483a <_svfiprintf_r+0x1d6>
 80047c8:	4b22      	ldr	r3, [pc, #136]	; (8004854 <_svfiprintf_r+0x1f0>)
 80047ca:	bb1b      	cbnz	r3, 8004814 <_svfiprintf_r+0x1b0>
 80047cc:	9b03      	ldr	r3, [sp, #12]
 80047ce:	3307      	adds	r3, #7
 80047d0:	f023 0307 	bic.w	r3, r3, #7
 80047d4:	3308      	adds	r3, #8
 80047d6:	9303      	str	r3, [sp, #12]
 80047d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047da:	4433      	add	r3, r6
 80047dc:	9309      	str	r3, [sp, #36]	; 0x24
 80047de:	e768      	b.n	80046b2 <_svfiprintf_r+0x4e>
 80047e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80047e4:	460c      	mov	r4, r1
 80047e6:	2001      	movs	r0, #1
 80047e8:	e7a6      	b.n	8004738 <_svfiprintf_r+0xd4>
 80047ea:	2300      	movs	r3, #0
 80047ec:	3401      	adds	r4, #1
 80047ee:	9305      	str	r3, [sp, #20]
 80047f0:	4619      	mov	r1, r3
 80047f2:	f04f 0c0a 	mov.w	ip, #10
 80047f6:	4620      	mov	r0, r4
 80047f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047fc:	3a30      	subs	r2, #48	; 0x30
 80047fe:	2a09      	cmp	r2, #9
 8004800:	d903      	bls.n	800480a <_svfiprintf_r+0x1a6>
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0c6      	beq.n	8004794 <_svfiprintf_r+0x130>
 8004806:	9105      	str	r1, [sp, #20]
 8004808:	e7c4      	b.n	8004794 <_svfiprintf_r+0x130>
 800480a:	fb0c 2101 	mla	r1, ip, r1, r2
 800480e:	4604      	mov	r4, r0
 8004810:	2301      	movs	r3, #1
 8004812:	e7f0      	b.n	80047f6 <_svfiprintf_r+0x192>
 8004814:	ab03      	add	r3, sp, #12
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	462a      	mov	r2, r5
 800481a:	4b0f      	ldr	r3, [pc, #60]	; (8004858 <_svfiprintf_r+0x1f4>)
 800481c:	a904      	add	r1, sp, #16
 800481e:	4638      	mov	r0, r7
 8004820:	f3af 8000 	nop.w
 8004824:	1c42      	adds	r2, r0, #1
 8004826:	4606      	mov	r6, r0
 8004828:	d1d6      	bne.n	80047d8 <_svfiprintf_r+0x174>
 800482a:	89ab      	ldrh	r3, [r5, #12]
 800482c:	065b      	lsls	r3, r3, #25
 800482e:	f53f af2d 	bmi.w	800468c <_svfiprintf_r+0x28>
 8004832:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004834:	b01d      	add	sp, #116	; 0x74
 8004836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800483a:	ab03      	add	r3, sp, #12
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	462a      	mov	r2, r5
 8004840:	4b05      	ldr	r3, [pc, #20]	; (8004858 <_svfiprintf_r+0x1f4>)
 8004842:	a904      	add	r1, sp, #16
 8004844:	4638      	mov	r0, r7
 8004846:	f000 f879 	bl	800493c <_printf_i>
 800484a:	e7eb      	b.n	8004824 <_svfiprintf_r+0x1c0>
 800484c:	08004ca4 	.word	0x08004ca4
 8004850:	08004cae 	.word	0x08004cae
 8004854:	00000000 	.word	0x00000000
 8004858:	080045b1 	.word	0x080045b1
 800485c:	08004caa 	.word	0x08004caa

08004860 <_printf_common>:
 8004860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004864:	4616      	mov	r6, r2
 8004866:	4699      	mov	r9, r3
 8004868:	688a      	ldr	r2, [r1, #8]
 800486a:	690b      	ldr	r3, [r1, #16]
 800486c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004870:	4293      	cmp	r3, r2
 8004872:	bfb8      	it	lt
 8004874:	4613      	movlt	r3, r2
 8004876:	6033      	str	r3, [r6, #0]
 8004878:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800487c:	4607      	mov	r7, r0
 800487e:	460c      	mov	r4, r1
 8004880:	b10a      	cbz	r2, 8004886 <_printf_common+0x26>
 8004882:	3301      	adds	r3, #1
 8004884:	6033      	str	r3, [r6, #0]
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	0699      	lsls	r1, r3, #26
 800488a:	bf42      	ittt	mi
 800488c:	6833      	ldrmi	r3, [r6, #0]
 800488e:	3302      	addmi	r3, #2
 8004890:	6033      	strmi	r3, [r6, #0]
 8004892:	6825      	ldr	r5, [r4, #0]
 8004894:	f015 0506 	ands.w	r5, r5, #6
 8004898:	d106      	bne.n	80048a8 <_printf_common+0x48>
 800489a:	f104 0a19 	add.w	sl, r4, #25
 800489e:	68e3      	ldr	r3, [r4, #12]
 80048a0:	6832      	ldr	r2, [r6, #0]
 80048a2:	1a9b      	subs	r3, r3, r2
 80048a4:	42ab      	cmp	r3, r5
 80048a6:	dc26      	bgt.n	80048f6 <_printf_common+0x96>
 80048a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048ac:	1e13      	subs	r3, r2, #0
 80048ae:	6822      	ldr	r2, [r4, #0]
 80048b0:	bf18      	it	ne
 80048b2:	2301      	movne	r3, #1
 80048b4:	0692      	lsls	r2, r2, #26
 80048b6:	d42b      	bmi.n	8004910 <_printf_common+0xb0>
 80048b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048bc:	4649      	mov	r1, r9
 80048be:	4638      	mov	r0, r7
 80048c0:	47c0      	blx	r8
 80048c2:	3001      	adds	r0, #1
 80048c4:	d01e      	beq.n	8004904 <_printf_common+0xa4>
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	6922      	ldr	r2, [r4, #16]
 80048ca:	f003 0306 	and.w	r3, r3, #6
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	bf02      	ittt	eq
 80048d2:	68e5      	ldreq	r5, [r4, #12]
 80048d4:	6833      	ldreq	r3, [r6, #0]
 80048d6:	1aed      	subeq	r5, r5, r3
 80048d8:	68a3      	ldr	r3, [r4, #8]
 80048da:	bf0c      	ite	eq
 80048dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048e0:	2500      	movne	r5, #0
 80048e2:	4293      	cmp	r3, r2
 80048e4:	bfc4      	itt	gt
 80048e6:	1a9b      	subgt	r3, r3, r2
 80048e8:	18ed      	addgt	r5, r5, r3
 80048ea:	2600      	movs	r6, #0
 80048ec:	341a      	adds	r4, #26
 80048ee:	42b5      	cmp	r5, r6
 80048f0:	d11a      	bne.n	8004928 <_printf_common+0xc8>
 80048f2:	2000      	movs	r0, #0
 80048f4:	e008      	b.n	8004908 <_printf_common+0xa8>
 80048f6:	2301      	movs	r3, #1
 80048f8:	4652      	mov	r2, sl
 80048fa:	4649      	mov	r1, r9
 80048fc:	4638      	mov	r0, r7
 80048fe:	47c0      	blx	r8
 8004900:	3001      	adds	r0, #1
 8004902:	d103      	bne.n	800490c <_printf_common+0xac>
 8004904:	f04f 30ff 	mov.w	r0, #4294967295
 8004908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800490c:	3501      	adds	r5, #1
 800490e:	e7c6      	b.n	800489e <_printf_common+0x3e>
 8004910:	18e1      	adds	r1, r4, r3
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	2030      	movs	r0, #48	; 0x30
 8004916:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800491a:	4422      	add	r2, r4
 800491c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004920:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004924:	3302      	adds	r3, #2
 8004926:	e7c7      	b.n	80048b8 <_printf_common+0x58>
 8004928:	2301      	movs	r3, #1
 800492a:	4622      	mov	r2, r4
 800492c:	4649      	mov	r1, r9
 800492e:	4638      	mov	r0, r7
 8004930:	47c0      	blx	r8
 8004932:	3001      	adds	r0, #1
 8004934:	d0e6      	beq.n	8004904 <_printf_common+0xa4>
 8004936:	3601      	adds	r6, #1
 8004938:	e7d9      	b.n	80048ee <_printf_common+0x8e>
	...

0800493c <_printf_i>:
 800493c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004940:	7e0f      	ldrb	r7, [r1, #24]
 8004942:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004944:	2f78      	cmp	r7, #120	; 0x78
 8004946:	4691      	mov	r9, r2
 8004948:	4680      	mov	r8, r0
 800494a:	460c      	mov	r4, r1
 800494c:	469a      	mov	sl, r3
 800494e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004952:	d807      	bhi.n	8004964 <_printf_i+0x28>
 8004954:	2f62      	cmp	r7, #98	; 0x62
 8004956:	d80a      	bhi.n	800496e <_printf_i+0x32>
 8004958:	2f00      	cmp	r7, #0
 800495a:	f000 80d4 	beq.w	8004b06 <_printf_i+0x1ca>
 800495e:	2f58      	cmp	r7, #88	; 0x58
 8004960:	f000 80c0 	beq.w	8004ae4 <_printf_i+0x1a8>
 8004964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004968:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800496c:	e03a      	b.n	80049e4 <_printf_i+0xa8>
 800496e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004972:	2b15      	cmp	r3, #21
 8004974:	d8f6      	bhi.n	8004964 <_printf_i+0x28>
 8004976:	a101      	add	r1, pc, #4	; (adr r1, 800497c <_printf_i+0x40>)
 8004978:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800497c:	080049d5 	.word	0x080049d5
 8004980:	080049e9 	.word	0x080049e9
 8004984:	08004965 	.word	0x08004965
 8004988:	08004965 	.word	0x08004965
 800498c:	08004965 	.word	0x08004965
 8004990:	08004965 	.word	0x08004965
 8004994:	080049e9 	.word	0x080049e9
 8004998:	08004965 	.word	0x08004965
 800499c:	08004965 	.word	0x08004965
 80049a0:	08004965 	.word	0x08004965
 80049a4:	08004965 	.word	0x08004965
 80049a8:	08004aed 	.word	0x08004aed
 80049ac:	08004a15 	.word	0x08004a15
 80049b0:	08004aa7 	.word	0x08004aa7
 80049b4:	08004965 	.word	0x08004965
 80049b8:	08004965 	.word	0x08004965
 80049bc:	08004b0f 	.word	0x08004b0f
 80049c0:	08004965 	.word	0x08004965
 80049c4:	08004a15 	.word	0x08004a15
 80049c8:	08004965 	.word	0x08004965
 80049cc:	08004965 	.word	0x08004965
 80049d0:	08004aaf 	.word	0x08004aaf
 80049d4:	682b      	ldr	r3, [r5, #0]
 80049d6:	1d1a      	adds	r2, r3, #4
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	602a      	str	r2, [r5, #0]
 80049dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049e4:	2301      	movs	r3, #1
 80049e6:	e09f      	b.n	8004b28 <_printf_i+0x1ec>
 80049e8:	6820      	ldr	r0, [r4, #0]
 80049ea:	682b      	ldr	r3, [r5, #0]
 80049ec:	0607      	lsls	r7, r0, #24
 80049ee:	f103 0104 	add.w	r1, r3, #4
 80049f2:	6029      	str	r1, [r5, #0]
 80049f4:	d501      	bpl.n	80049fa <_printf_i+0xbe>
 80049f6:	681e      	ldr	r6, [r3, #0]
 80049f8:	e003      	b.n	8004a02 <_printf_i+0xc6>
 80049fa:	0646      	lsls	r6, r0, #25
 80049fc:	d5fb      	bpl.n	80049f6 <_printf_i+0xba>
 80049fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004a02:	2e00      	cmp	r6, #0
 8004a04:	da03      	bge.n	8004a0e <_printf_i+0xd2>
 8004a06:	232d      	movs	r3, #45	; 0x2d
 8004a08:	4276      	negs	r6, r6
 8004a0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a0e:	485a      	ldr	r0, [pc, #360]	; (8004b78 <_printf_i+0x23c>)
 8004a10:	230a      	movs	r3, #10
 8004a12:	e012      	b.n	8004a3a <_printf_i+0xfe>
 8004a14:	682b      	ldr	r3, [r5, #0]
 8004a16:	6820      	ldr	r0, [r4, #0]
 8004a18:	1d19      	adds	r1, r3, #4
 8004a1a:	6029      	str	r1, [r5, #0]
 8004a1c:	0605      	lsls	r5, r0, #24
 8004a1e:	d501      	bpl.n	8004a24 <_printf_i+0xe8>
 8004a20:	681e      	ldr	r6, [r3, #0]
 8004a22:	e002      	b.n	8004a2a <_printf_i+0xee>
 8004a24:	0641      	lsls	r1, r0, #25
 8004a26:	d5fb      	bpl.n	8004a20 <_printf_i+0xe4>
 8004a28:	881e      	ldrh	r6, [r3, #0]
 8004a2a:	4853      	ldr	r0, [pc, #332]	; (8004b78 <_printf_i+0x23c>)
 8004a2c:	2f6f      	cmp	r7, #111	; 0x6f
 8004a2e:	bf0c      	ite	eq
 8004a30:	2308      	moveq	r3, #8
 8004a32:	230a      	movne	r3, #10
 8004a34:	2100      	movs	r1, #0
 8004a36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a3a:	6865      	ldr	r5, [r4, #4]
 8004a3c:	60a5      	str	r5, [r4, #8]
 8004a3e:	2d00      	cmp	r5, #0
 8004a40:	bfa2      	ittt	ge
 8004a42:	6821      	ldrge	r1, [r4, #0]
 8004a44:	f021 0104 	bicge.w	r1, r1, #4
 8004a48:	6021      	strge	r1, [r4, #0]
 8004a4a:	b90e      	cbnz	r6, 8004a50 <_printf_i+0x114>
 8004a4c:	2d00      	cmp	r5, #0
 8004a4e:	d04b      	beq.n	8004ae8 <_printf_i+0x1ac>
 8004a50:	4615      	mov	r5, r2
 8004a52:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a56:	fb03 6711 	mls	r7, r3, r1, r6
 8004a5a:	5dc7      	ldrb	r7, [r0, r7]
 8004a5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a60:	4637      	mov	r7, r6
 8004a62:	42bb      	cmp	r3, r7
 8004a64:	460e      	mov	r6, r1
 8004a66:	d9f4      	bls.n	8004a52 <_printf_i+0x116>
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	d10b      	bne.n	8004a84 <_printf_i+0x148>
 8004a6c:	6823      	ldr	r3, [r4, #0]
 8004a6e:	07de      	lsls	r6, r3, #31
 8004a70:	d508      	bpl.n	8004a84 <_printf_i+0x148>
 8004a72:	6923      	ldr	r3, [r4, #16]
 8004a74:	6861      	ldr	r1, [r4, #4]
 8004a76:	4299      	cmp	r1, r3
 8004a78:	bfde      	ittt	le
 8004a7a:	2330      	movle	r3, #48	; 0x30
 8004a7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a84:	1b52      	subs	r2, r2, r5
 8004a86:	6122      	str	r2, [r4, #16]
 8004a88:	f8cd a000 	str.w	sl, [sp]
 8004a8c:	464b      	mov	r3, r9
 8004a8e:	aa03      	add	r2, sp, #12
 8004a90:	4621      	mov	r1, r4
 8004a92:	4640      	mov	r0, r8
 8004a94:	f7ff fee4 	bl	8004860 <_printf_common>
 8004a98:	3001      	adds	r0, #1
 8004a9a:	d14a      	bne.n	8004b32 <_printf_i+0x1f6>
 8004a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa0:	b004      	add	sp, #16
 8004aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	f043 0320 	orr.w	r3, r3, #32
 8004aac:	6023      	str	r3, [r4, #0]
 8004aae:	4833      	ldr	r0, [pc, #204]	; (8004b7c <_printf_i+0x240>)
 8004ab0:	2778      	movs	r7, #120	; 0x78
 8004ab2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	6829      	ldr	r1, [r5, #0]
 8004aba:	061f      	lsls	r7, r3, #24
 8004abc:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ac0:	d402      	bmi.n	8004ac8 <_printf_i+0x18c>
 8004ac2:	065f      	lsls	r7, r3, #25
 8004ac4:	bf48      	it	mi
 8004ac6:	b2b6      	uxthmi	r6, r6
 8004ac8:	07df      	lsls	r7, r3, #31
 8004aca:	bf48      	it	mi
 8004acc:	f043 0320 	orrmi.w	r3, r3, #32
 8004ad0:	6029      	str	r1, [r5, #0]
 8004ad2:	bf48      	it	mi
 8004ad4:	6023      	strmi	r3, [r4, #0]
 8004ad6:	b91e      	cbnz	r6, 8004ae0 <_printf_i+0x1a4>
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	f023 0320 	bic.w	r3, r3, #32
 8004ade:	6023      	str	r3, [r4, #0]
 8004ae0:	2310      	movs	r3, #16
 8004ae2:	e7a7      	b.n	8004a34 <_printf_i+0xf8>
 8004ae4:	4824      	ldr	r0, [pc, #144]	; (8004b78 <_printf_i+0x23c>)
 8004ae6:	e7e4      	b.n	8004ab2 <_printf_i+0x176>
 8004ae8:	4615      	mov	r5, r2
 8004aea:	e7bd      	b.n	8004a68 <_printf_i+0x12c>
 8004aec:	682b      	ldr	r3, [r5, #0]
 8004aee:	6826      	ldr	r6, [r4, #0]
 8004af0:	6961      	ldr	r1, [r4, #20]
 8004af2:	1d18      	adds	r0, r3, #4
 8004af4:	6028      	str	r0, [r5, #0]
 8004af6:	0635      	lsls	r5, r6, #24
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	d501      	bpl.n	8004b00 <_printf_i+0x1c4>
 8004afc:	6019      	str	r1, [r3, #0]
 8004afe:	e002      	b.n	8004b06 <_printf_i+0x1ca>
 8004b00:	0670      	lsls	r0, r6, #25
 8004b02:	d5fb      	bpl.n	8004afc <_printf_i+0x1c0>
 8004b04:	8019      	strh	r1, [r3, #0]
 8004b06:	2300      	movs	r3, #0
 8004b08:	6123      	str	r3, [r4, #16]
 8004b0a:	4615      	mov	r5, r2
 8004b0c:	e7bc      	b.n	8004a88 <_printf_i+0x14c>
 8004b0e:	682b      	ldr	r3, [r5, #0]
 8004b10:	1d1a      	adds	r2, r3, #4
 8004b12:	602a      	str	r2, [r5, #0]
 8004b14:	681d      	ldr	r5, [r3, #0]
 8004b16:	6862      	ldr	r2, [r4, #4]
 8004b18:	2100      	movs	r1, #0
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	f7fb fb68 	bl	80001f0 <memchr>
 8004b20:	b108      	cbz	r0, 8004b26 <_printf_i+0x1ea>
 8004b22:	1b40      	subs	r0, r0, r5
 8004b24:	6060      	str	r0, [r4, #4]
 8004b26:	6863      	ldr	r3, [r4, #4]
 8004b28:	6123      	str	r3, [r4, #16]
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b30:	e7aa      	b.n	8004a88 <_printf_i+0x14c>
 8004b32:	6923      	ldr	r3, [r4, #16]
 8004b34:	462a      	mov	r2, r5
 8004b36:	4649      	mov	r1, r9
 8004b38:	4640      	mov	r0, r8
 8004b3a:	47d0      	blx	sl
 8004b3c:	3001      	adds	r0, #1
 8004b3e:	d0ad      	beq.n	8004a9c <_printf_i+0x160>
 8004b40:	6823      	ldr	r3, [r4, #0]
 8004b42:	079b      	lsls	r3, r3, #30
 8004b44:	d413      	bmi.n	8004b6e <_printf_i+0x232>
 8004b46:	68e0      	ldr	r0, [r4, #12]
 8004b48:	9b03      	ldr	r3, [sp, #12]
 8004b4a:	4298      	cmp	r0, r3
 8004b4c:	bfb8      	it	lt
 8004b4e:	4618      	movlt	r0, r3
 8004b50:	e7a6      	b.n	8004aa0 <_printf_i+0x164>
 8004b52:	2301      	movs	r3, #1
 8004b54:	4632      	mov	r2, r6
 8004b56:	4649      	mov	r1, r9
 8004b58:	4640      	mov	r0, r8
 8004b5a:	47d0      	blx	sl
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	d09d      	beq.n	8004a9c <_printf_i+0x160>
 8004b60:	3501      	adds	r5, #1
 8004b62:	68e3      	ldr	r3, [r4, #12]
 8004b64:	9903      	ldr	r1, [sp, #12]
 8004b66:	1a5b      	subs	r3, r3, r1
 8004b68:	42ab      	cmp	r3, r5
 8004b6a:	dcf2      	bgt.n	8004b52 <_printf_i+0x216>
 8004b6c:	e7eb      	b.n	8004b46 <_printf_i+0x20a>
 8004b6e:	2500      	movs	r5, #0
 8004b70:	f104 0619 	add.w	r6, r4, #25
 8004b74:	e7f5      	b.n	8004b62 <_printf_i+0x226>
 8004b76:	bf00      	nop
 8004b78:	08004cb5 	.word	0x08004cb5
 8004b7c:	08004cc6 	.word	0x08004cc6

08004b80 <memmove>:
 8004b80:	4288      	cmp	r0, r1
 8004b82:	b510      	push	{r4, lr}
 8004b84:	eb01 0402 	add.w	r4, r1, r2
 8004b88:	d902      	bls.n	8004b90 <memmove+0x10>
 8004b8a:	4284      	cmp	r4, r0
 8004b8c:	4623      	mov	r3, r4
 8004b8e:	d807      	bhi.n	8004ba0 <memmove+0x20>
 8004b90:	1e43      	subs	r3, r0, #1
 8004b92:	42a1      	cmp	r1, r4
 8004b94:	d008      	beq.n	8004ba8 <memmove+0x28>
 8004b96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b9e:	e7f8      	b.n	8004b92 <memmove+0x12>
 8004ba0:	4402      	add	r2, r0
 8004ba2:	4601      	mov	r1, r0
 8004ba4:	428a      	cmp	r2, r1
 8004ba6:	d100      	bne.n	8004baa <memmove+0x2a>
 8004ba8:	bd10      	pop	{r4, pc}
 8004baa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bb2:	e7f7      	b.n	8004ba4 <memmove+0x24>

08004bb4 <_sbrk_r>:
 8004bb4:	b538      	push	{r3, r4, r5, lr}
 8004bb6:	4d06      	ldr	r5, [pc, #24]	; (8004bd0 <_sbrk_r+0x1c>)
 8004bb8:	2300      	movs	r3, #0
 8004bba:	4604      	mov	r4, r0
 8004bbc:	4608      	mov	r0, r1
 8004bbe:	602b      	str	r3, [r5, #0]
 8004bc0:	f7fc fc0c 	bl	80013dc <_sbrk>
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	d102      	bne.n	8004bce <_sbrk_r+0x1a>
 8004bc8:	682b      	ldr	r3, [r5, #0]
 8004bca:	b103      	cbz	r3, 8004bce <_sbrk_r+0x1a>
 8004bcc:	6023      	str	r3, [r4, #0]
 8004bce:	bd38      	pop	{r3, r4, r5, pc}
 8004bd0:	20000294 	.word	0x20000294

08004bd4 <memcpy>:
 8004bd4:	440a      	add	r2, r1
 8004bd6:	4291      	cmp	r1, r2
 8004bd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bdc:	d100      	bne.n	8004be0 <memcpy+0xc>
 8004bde:	4770      	bx	lr
 8004be0:	b510      	push	{r4, lr}
 8004be2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004be6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bea:	4291      	cmp	r1, r2
 8004bec:	d1f9      	bne.n	8004be2 <memcpy+0xe>
 8004bee:	bd10      	pop	{r4, pc}

08004bf0 <_realloc_r>:
 8004bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf4:	4680      	mov	r8, r0
 8004bf6:	4614      	mov	r4, r2
 8004bf8:	460e      	mov	r6, r1
 8004bfa:	b921      	cbnz	r1, 8004c06 <_realloc_r+0x16>
 8004bfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c00:	4611      	mov	r1, r2
 8004c02:	f7ff bc49 	b.w	8004498 <_malloc_r>
 8004c06:	b92a      	cbnz	r2, 8004c14 <_realloc_r+0x24>
 8004c08:	f7ff fbda 	bl	80043c0 <_free_r>
 8004c0c:	4625      	mov	r5, r4
 8004c0e:	4628      	mov	r0, r5
 8004c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c14:	f000 f81b 	bl	8004c4e <_malloc_usable_size_r>
 8004c18:	4284      	cmp	r4, r0
 8004c1a:	4607      	mov	r7, r0
 8004c1c:	d802      	bhi.n	8004c24 <_realloc_r+0x34>
 8004c1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004c22:	d812      	bhi.n	8004c4a <_realloc_r+0x5a>
 8004c24:	4621      	mov	r1, r4
 8004c26:	4640      	mov	r0, r8
 8004c28:	f7ff fc36 	bl	8004498 <_malloc_r>
 8004c2c:	4605      	mov	r5, r0
 8004c2e:	2800      	cmp	r0, #0
 8004c30:	d0ed      	beq.n	8004c0e <_realloc_r+0x1e>
 8004c32:	42bc      	cmp	r4, r7
 8004c34:	4622      	mov	r2, r4
 8004c36:	4631      	mov	r1, r6
 8004c38:	bf28      	it	cs
 8004c3a:	463a      	movcs	r2, r7
 8004c3c:	f7ff ffca 	bl	8004bd4 <memcpy>
 8004c40:	4631      	mov	r1, r6
 8004c42:	4640      	mov	r0, r8
 8004c44:	f7ff fbbc 	bl	80043c0 <_free_r>
 8004c48:	e7e1      	b.n	8004c0e <_realloc_r+0x1e>
 8004c4a:	4635      	mov	r5, r6
 8004c4c:	e7df      	b.n	8004c0e <_realloc_r+0x1e>

08004c4e <_malloc_usable_size_r>:
 8004c4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c52:	1f18      	subs	r0, r3, #4
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	bfbc      	itt	lt
 8004c58:	580b      	ldrlt	r3, [r1, r0]
 8004c5a:	18c0      	addlt	r0, r0, r3
 8004c5c:	4770      	bx	lr
	...

08004c60 <_init>:
 8004c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c62:	bf00      	nop
 8004c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c66:	bc08      	pop	{r3}
 8004c68:	469e      	mov	lr, r3
 8004c6a:	4770      	bx	lr

08004c6c <_fini>:
 8004c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6e:	bf00      	nop
 8004c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c72:	bc08      	pop	{r3}
 8004c74:	469e      	mov	lr, r3
 8004c76:	4770      	bx	lr
